'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};!function($){"use strict";var FOUNDATION_VERSION='6.2.2';// Global Foundation object
// This is attached to the window, or used as a module for AMD/Browserify
var Foundation={version:FOUNDATION_VERSION,/**
   * Stores initialized plugins.
   */_plugins:{},/**
   * Stores generated unique ids for plugin instances
   */_uuids:[],/**
   * Returns a boolean for RTL support
   */rtl:function rtl(){return $('html').attr('dir')==='rtl';},/**
   * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
   * @param {Object} plugin - The constructor of the plugin.
   */plugin:function plugin(_plugin,name){// Object key to use when adding to global Foundation object
// Examples: Foundation.Reveal, Foundation.OffCanvas
var className=name||functionName(_plugin);// Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
// Examples: data-reveal, data-off-canvas
var attrName=hyphenate(className);// Add to the Foundation object and the plugins list (for reflowing)
this._plugins[attrName]=this[className]=_plugin;},/**
   * @function
   * Populates the _uuids array with pointers to each individual plugin instance.
   * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
   * Also fires the initialization event for each plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @param {String} name - the name of the plugin, passed as a camelCased string.
   * @fires Plugin#init
   */registerPlugin:function registerPlugin(plugin,name){var pluginName=name?hyphenate(name):functionName(plugin.constructor).toLowerCase();plugin.uuid=this.GetYoDigits(6,pluginName);if(!plugin.$element.attr('data-'+pluginName)){plugin.$element.attr('data-'+pluginName,plugin.uuid);}if(!plugin.$element.data('zfPlugin')){plugin.$element.data('zfPlugin',plugin);}/**
           * Fires when the plugin has initialized.
           * @event Plugin#init
           */plugin.$element.trigger('init.zf.'+pluginName);this._uuids.push(plugin.uuid);return;},/**
   * @function
   * Removes the plugins uuid from the _uuids array.
   * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
   * Also fires the destroyed event for the plugin, consolidating repetitive code.
   * @param {Object} plugin - an instance of a plugin, usually `this` in context.
   * @fires Plugin#destroyed
   */unregisterPlugin:function unregisterPlugin(plugin){var pluginName=hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));this._uuids.splice(this._uuids.indexOf(plugin.uuid),1);plugin.$element.removeAttr('data-'+pluginName).removeData('zfPlugin')/**
           * Fires when the plugin has been destroyed.
           * @event Plugin#destroyed
           */.trigger('destroyed.zf.'+pluginName);for(var prop in plugin){plugin[prop]=null;//clean up script to prep for garbage collection.
}return;},/**
   * @function
   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
   * @default If no argument is passed, reflow all currently active plugins.
   */reInit:function reInit(plugins){var isJQ=plugins instanceof $;try{if(isJQ){plugins.each(function(){$(this).data('zfPlugin')._init();});}else{var type=typeof plugins==='undefined'?'undefined':_typeof(plugins),_this=this,fns={'object':function object(plgs){plgs.forEach(function(p){p=hyphenate(p);$('[data-'+p+']').foundation('_init');});},'string':function string(){plugins=hyphenate(plugins);$('[data-'+plugins+']').foundation('_init');},'undefined':function undefined(){this['object'](Object.keys(_this._plugins));}};fns[type](plugins);}}catch(err){console.error(err);}finally{return plugins;}},/**
   * returns a random base-36 uid with namespacing
   * @function
   * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
   * @param {String} namespace - name of plugin to be incorporated in uid, optional.
   * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
   * @returns {String} - unique id
   */GetYoDigits:function GetYoDigits(length,namespace){length=length||6;return Math.round(Math.pow(36,length+1)-Math.random()*Math.pow(36,length)).toString(36).slice(1)+(namespace?'-'+namespace:'');},/**
   * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
   */reflow:function reflow(elem,plugins){// If plugins is undefined, just grab everything
if(typeof plugins==='undefined'){plugins=Object.keys(this._plugins);}// If plugins is a string, convert it to an array with one item
else if(typeof plugins==='string'){plugins=[plugins];}var _this=this;// Iterate through each plugin
$.each(plugins,function(i,name){// Get the current plugin
var plugin=_this._plugins[name];// Localize the search to all elements inside elem, as well as elem itself, unless elem === document
var $elem=$(elem).find('[data-'+name+']').addBack('[data-'+name+']');// For each plugin found, initialize it
$elem.each(function(){var $el=$(this),opts={};// Don't double-dip on plugins
if($el.data('zfPlugin')){console.warn("Tried to initialize "+name+" on an element that already has a Foundation plugin.");return;}if($el.attr('data-options')){var thing=$el.attr('data-options').split(';').forEach(function(e,i){var opt=e.split(':').map(function(el){return el.trim();});if(opt[0])opts[opt[0]]=parseValue(opt[1]);});}try{$el.data('zfPlugin',new plugin($(this),opts));}catch(er){console.error(er);}finally{return;}});});},getFnName:functionName,transitionend:function transitionend($elem){var transitions={'transition':'transitionend','WebkitTransition':'webkitTransitionEnd','MozTransition':'transitionend','OTransition':'otransitionend'};var elem=document.createElement('div'),end;for(var t in transitions){if(typeof elem.style[t]!=='undefined'){end=transitions[t];}}if(end){return end;}else{end=setTimeout(function(){$elem.triggerHandler('transitionend',[$elem]);},1);return'transitionend';}}};Foundation.util={/**
   * Function for applying a debounce effect to a function call.
   * @function
   * @param {Function} func - Function to be called at end of timeout.
   * @param {Number} delay - Time in ms to delay the call of `func`.
   * @returns function
   */throttle:function throttle(func,delay){var timer=null;return function(){var context=this,args=arguments;if(timer===null){timer=setTimeout(function(){func.apply(context,args);timer=null;},delay);}};}};// TODO: consider not making this a jQuery function
// TODO: need way to reflow vs. re-initialize
/**
 * The Foundation jQuery method.
 * @param {String|Array} method - An action to perform on the current jQuery object.
 */var foundation=function foundation(method){var type=typeof method==='undefined'?'undefined':_typeof(method),$meta=$('meta.foundation-mq'),$noJS=$('.no-js');if(!$meta.length){$('<meta class="foundation-mq">').appendTo(document.head);}if($noJS.length){$noJS.removeClass('no-js');}if(type==='undefined'){//needs to initialize the Foundation object, or an individual plugin.
Foundation.MediaQuery._init();Foundation.reflow(this);}else if(type==='string'){//an individual method to invoke on a plugin or group of plugins
var args=Array.prototype.slice.call(arguments,1);//collect all the arguments, if necessary
var plugClass=this.data('zfPlugin');//determine the class of plugin
if(plugClass!==undefined&&plugClass[method]!==undefined){//make sure both the class and method exist
if(this.length===1){//if there's only one, call it directly.
plugClass[method].apply(plugClass,args);}else{this.each(function(i,el){//otherwise loop through the jQuery collection and invoke the method on each
plugClass[method].apply($(el).data('zfPlugin'),args);});}}else{//error for no class or no method
throw new ReferenceError("We're sorry, '"+method+"' is not an available method for "+(plugClass?functionName(plugClass):'this element')+'.');}}else{//error for invalid argument type
throw new TypeError('We\'re sorry, '+type+' is not a valid parameter. You must use a string representing the method you wish to invoke.');}return this;};window.Foundation=Foundation;$.fn.foundation=foundation;// Polyfill for requestAnimationFrame
(function(){if(!Date.now||!window.Date.now)window.Date.now=Date.now=function(){return new Date().getTime();};var vendors=['webkit','moz'];for(var i=0;i<vendors.length&&!window.requestAnimationFrame;++i){var vp=vendors[i];window.requestAnimationFrame=window[vp+'RequestAnimationFrame'];window.cancelAnimationFrame=window[vp+'CancelAnimationFrame']||window[vp+'CancelRequestAnimationFrame'];}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var lastTime=0;window.requestAnimationFrame=function(callback){var now=Date.now();var nextTime=Math.max(lastTime+16,now);return setTimeout(function(){callback(lastTime=nextTime);},nextTime-now);};window.cancelAnimationFrame=clearTimeout;}/**
   * Polyfill for performance.now, required by rAF
   */if(!window.performance||!window.performance.now){window.performance={start:Date.now(),now:function now(){return Date.now()-this.start;}};}})();if(!Function.prototype.bind){Function.prototype.bind=function(oThis){if(typeof this!=='function'){// closest thing possible to the ECMAScript 5
// internal IsCallable function
throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');}var aArgs=Array.prototype.slice.call(arguments,1),fToBind=this,fNOP=function fNOP(){},fBound=function fBound(){return fToBind.apply(this instanceof fNOP?this:oThis,aArgs.concat(Array.prototype.slice.call(arguments)));};if(this.prototype){// native functions don't have a prototype
fNOP.prototype=this.prototype;}fBound.prototype=new fNOP();return fBound;};}// Polyfill to get the name of a function in IE9
function functionName(fn){if(Function.prototype.name===undefined){var funcNameRegex=/function\s([^(]{1,})\(/;var results=funcNameRegex.exec(fn.toString());return results&&results.length>1?results[1].trim():"";}else if(fn.prototype===undefined){return fn.constructor.name;}else{return fn.prototype.constructor.name;}}function parseValue(str){if(/true/.test(str))return true;else if(/false/.test(str))return false;else if(!isNaN(str*1))return parseFloat(str);return str;}// Convert PascalCase to kebab-case
// Thank you: http://stackoverflow.com/a/8955580
function hyphenate(str){return str.replace(/([a-z])([A-Z])/g,'$1-$2').toLowerCase();}}(jQuery);
'use strict';!function($){Foundation.Box={ImNotTouchingYou:ImNotTouchingYou,GetDimensions:GetDimensions,GetOffsets:GetOffsets};/**
 * Compares the dimensions of an element to a container and determines collision events with container.
 * @function
 * @param {jQuery} element - jQuery object to test for collisions.
 * @param {jQuery} parent - jQuery object to use as bounding container.
 * @param {Boolean} lrOnly - set to true to check left and right values only.
 * @param {Boolean} tbOnly - set to true to check top and bottom values only.
 * @default if no parent object passed, detects collisions with `window`.
 * @returns {Boolean} - true if collision free, false if a collision in any direction.
 */function ImNotTouchingYou(element,parent,lrOnly,tbOnly){var eleDims=GetDimensions(element),top,bottom,left,right;if(parent){var parDims=GetDimensions(parent);bottom=eleDims.offset.top+eleDims.height<=parDims.height+parDims.offset.top;top=eleDims.offset.top>=parDims.offset.top;left=eleDims.offset.left>=parDims.offset.left;right=eleDims.offset.left+eleDims.width<=parDims.width+parDims.offset.left;}else{bottom=eleDims.offset.top+eleDims.height<=eleDims.windowDims.height+eleDims.windowDims.offset.top;top=eleDims.offset.top>=eleDims.windowDims.offset.top;left=eleDims.offset.left>=eleDims.windowDims.offset.left;right=eleDims.offset.left+eleDims.width<=eleDims.windowDims.width;}var allDirs=[bottom,top,left,right];if(lrOnly){return left===right===true;}if(tbOnly){return top===bottom===true;}return allDirs.indexOf(false)===-1;};/**
 * Uses native methods to return an object of dimension values.
 * @function
 * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
 * @returns {Object} - nested object of integer pixel values
 * TODO - if element is window, return only those values.
 */function GetDimensions(elem,test){elem=elem.length?elem[0]:elem;if(elem===window||elem===document){throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");}var rect=elem.getBoundingClientRect(),parRect=elem.parentNode.getBoundingClientRect(),winRect=document.body.getBoundingClientRect(),winY=window.pageYOffset,winX=window.pageXOffset;return{width:rect.width,height:rect.height,offset:{top:rect.top+winY,left:rect.left+winX},parentDims:{width:parRect.width,height:parRect.height,offset:{top:parRect.top+winY,left:parRect.left+winX}},windowDims:{width:winRect.width,height:winRect.height,offset:{top:winY,left:winX}}};}/**
 * Returns an object of top and left integer pixel values for dynamically rendered elements,
 * such as: Tooltip, Reveal, and Dropdown
 * @function
 * @param {jQuery} element - jQuery object for the element being positioned.
 * @param {jQuery} anchor - jQuery object for the element's anchor point.
 * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
 * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
 * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
 * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
 * TODO alter/rewrite to work with `em` values as well/instead of pixels
 */function GetOffsets(element,anchor,position,vOffset,hOffset,isOverflow){var $eleDims=GetDimensions(element),$anchorDims=anchor?GetDimensions(anchor):null;switch(position){case'top':return{left:Foundation.rtl()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width:$anchorDims.offset.left,top:$anchorDims.offset.top-($eleDims.height+vOffset)};break;case'left':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top};break;case'right':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset,top:$anchorDims.offset.top};break;case'center top':return{left:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2,top:$anchorDims.offset.top-($eleDims.height+vOffset)};break;case'center bottom':return{left:isOverflow?hOffset:$anchorDims.offset.left+$anchorDims.width/2-$eleDims.width/2,top:$anchorDims.offset.top+$anchorDims.height+vOffset};break;case'center left':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top+$anchorDims.height/2-$eleDims.height/2};break;case'center right':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset+1,top:$anchorDims.offset.top+$anchorDims.height/2-$eleDims.height/2};break;case'center':return{left:$eleDims.windowDims.offset.left+$eleDims.windowDims.width/2-$eleDims.width/2,top:$eleDims.windowDims.offset.top+$eleDims.windowDims.height/2-$eleDims.height/2};break;case'reveal':return{left:($eleDims.windowDims.width-$eleDims.width)/2,top:$eleDims.windowDims.offset.top+vOffset};case'reveal full':return{left:$eleDims.windowDims.offset.left,top:$eleDims.windowDims.offset.top};break;case'left bottom':return{left:$anchorDims.offset.left-($eleDims.width+hOffset),top:$anchorDims.offset.top+$anchorDims.height};break;case'right bottom':return{left:$anchorDims.offset.left+$anchorDims.width+hOffset-$eleDims.width,top:$anchorDims.offset.top+$anchorDims.height};break;default:return{left:Foundation.rtl()?$anchorDims.offset.left-$eleDims.width+$anchorDims.width:$anchorDims.offset.left,top:$anchorDims.offset.top+$anchorDims.height+vOffset};}}}(jQuery);
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/'use strict';!function($){var keyCodes={9:'TAB',13:'ENTER',27:'ESCAPE',32:'SPACE',37:'ARROW_LEFT',38:'ARROW_UP',39:'ARROW_RIGHT',40:'ARROW_DOWN'};var commands={};var Keyboard={keys:getKeyCodes(keyCodes),/**
   * Parses the (keyboard) event and returns a String that represents its key
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   * @param {Event} event - the event generated by the event handler
   * @return String key - String that represents the key pressed
   */parseKey:function parseKey(event){var key=keyCodes[event.which||event.keyCode]||String.fromCharCode(event.which).toUpperCase();if(event.shiftKey)key='SHIFT_'+key;if(event.ctrlKey)key='CTRL_'+key;if(event.altKey)key='ALT_'+key;return key;},/**
   * Handles the given (keyboard) event
   * @param {Event} event - the event generated by the event handler
   * @param {String} component - Foundation component's name, e.g. Slider or Reveal
   * @param {Objects} functions - collection of functions that are to be executed
   */handleKey:function handleKey(event,component,functions){var commandList=commands[component],keyCode=this.parseKey(event),cmds,command,fn;if(!commandList)return console.warn('Component not defined!');if(typeof commandList.ltr==='undefined'){// this component does not differentiate between ltr and rtl
cmds=commandList;// use plain list
}else{// merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
if(Foundation.rtl())cmds=$.extend({},commandList.ltr,commandList.rtl);else cmds=$.extend({},commandList.rtl,commandList.ltr);}command=cmds[keyCode];fn=functions[command];if(fn&&typeof fn==='function'){// execute function  if exists
var returnValue=fn.apply();if(functions.handled||typeof functions.handled==='function'){// execute function when event was handled
functions.handled(returnValue);}}else{if(functions.unhandled||typeof functions.unhandled==='function'){// execute function when event was not handled
functions.unhandled();}}},/**
   * Finds all focusable elements within the given `$element`
   * @param {jQuery} $element - jQuery object to search within
   * @return {jQuery} $focusable - all focusable elements within `$element`
   */findFocusable:function findFocusable($element){return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function(){if(!$(this).is(':visible')||$(this).attr('tabindex')<0){return false;}//only have visible elements and those that have a tabindex greater or equal 0
return true;});},/**
   * Returns the component name name
   * @param {Object} component - Foundation component, e.g. Slider or Reveal
   * @return String componentName
   */register:function register(componentName,cmds){commands[componentName]=cmds;}};/*
 * Constants for easier comparing.
 * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
 */function getKeyCodes(kcs){var k={};for(var kc in kcs){k[kcs[kc]]=kcs[kc];}return k;}Foundation.Keyboard=Keyboard;}(jQuery);
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};!function($){// Default set of media queries
var defaultQueries={'default':'only screen',landscape:'only screen and (orientation: landscape)',portrait:'only screen and (orientation: portrait)',retina:'only screen and (-webkit-min-device-pixel-ratio: 2),'+'only screen and (min--moz-device-pixel-ratio: 2),'+'only screen and (-o-min-device-pixel-ratio: 2/1),'+'only screen and (min-device-pixel-ratio: 2),'+'only screen and (min-resolution: 192dpi),'+'only screen and (min-resolution: 2dppx)'};var MediaQuery={queries:[],current:'',/**
   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
   * @function
   * @private
   */_init:function _init(){var self=this;var extractedStyles=$('.foundation-mq').css('font-family');var namedQueries;namedQueries=parseStyleToObject(extractedStyles);for(var key in namedQueries){if(namedQueries.hasOwnProperty(key)){self.queries.push({name:key,value:'only screen and (min-width: '+namedQueries[key]+')'});}}this.current=this._getCurrentSize();this._watcher();},/**
   * Checks if the screen is at least as wide as a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to check.
   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
   */atLeast:function atLeast(size){var query=this.get(size);if(query){return window.matchMedia(query).matches;}return false;},/**
   * Gets the media query of a breakpoint.
   * @function
   * @param {String} size - Name of the breakpoint to get.
   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
   */get:function get(size){for(var i in this.queries){if(this.queries.hasOwnProperty(i)){var query=this.queries[i];if(size===query.name)return query.value;}}return null;},/**
   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
   * @function
   * @private
   * @returns {String} Name of the current breakpoint.
   */_getCurrentSize:function _getCurrentSize(){var matched;for(var i=0;i<this.queries.length;i++){var query=this.queries[i];if(window.matchMedia(query.value).matches){matched=query;}}if((typeof matched==='undefined'?'undefined':_typeof(matched))==='object'){return matched.name;}else{return matched;}},/**
   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
   * @function
   * @private
   */_watcher:function _watcher(){var _this=this;$(window).on('resize.zf.mediaquery',function(){var newSize=_this._getCurrentSize(),currentSize=_this.current;if(newSize!==currentSize){// Change the current media query
_this.current=newSize;// Broadcast the media query change on the window
$(window).trigger('changed.zf.mediaquery',[newSize,currentSize]);}});}};Foundation.MediaQuery=MediaQuery;// matchMedia() polyfill - Test a CSS media type/query in JS.
// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
window.matchMedia||(window.matchMedia=function(){'use strict';// For browsers that support matchMedium api such as IE 9 and webkit
var styleMedia=window.styleMedia||window.media;// For those that don't support matchMedium
if(!styleMedia){var style=document.createElement('style'),script=document.getElementsByTagName('script')[0],info=null;style.type='text/css';style.id='matchmediajs-test';script.parentNode.insertBefore(style,script);// 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
info='getComputedStyle'in window&&window.getComputedStyle(style,null)||style.currentStyle;styleMedia={matchMedium:function matchMedium(media){var text='@media '+media+'{ #matchmediajs-test { width: 1px; } }';// 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
if(style.styleSheet){style.styleSheet.cssText=text;}else{style.textContent=text;}// Test if media query is true or false
return info.width==='1px';}};}return function(media){return{matches:styleMedia.matchMedium(media||'all'),media:media||'all'};};}());// Thank you: https://github.com/sindresorhus/query-string
function parseStyleToObject(str){var styleObject={};if(typeof str!=='string'){return styleObject;}str=str.trim().slice(1,-1);// browsers re-quote string style values
if(!str){return styleObject;}styleObject=str.split('&').reduce(function(ret,param){var parts=param.replace(/\+/g,' ').split('=');var key=parts[0];var val=parts[1];key=decodeURIComponent(key);// missing `=` should be `null`:
// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
val=val===undefined?null:decodeURIComponent(val);if(!ret.hasOwnProperty(key)){ret[key]=val;}else if(Array.isArray(ret[key])){ret[key].push(val);}else{ret[key]=[ret[key],val];}return ret;},{});return styleObject;}Foundation.MediaQuery=MediaQuery;}(jQuery);
'use strict';!function($){/**
 * Motion module.
 * @module foundation.motion
 */var initClasses=['mui-enter','mui-leave'];var activeClasses=['mui-enter-active','mui-leave-active'];var Motion={animateIn:function animateIn(element,animation,cb){animate(true,element,animation,cb);},animateOut:function animateOut(element,animation,cb){animate(false,element,animation,cb);}};function Move(duration,elem,fn){var anim,prog,start=null;// console.log('called');
function move(ts){if(!start)start=window.performance.now();// console.log(start, ts);
prog=ts-start;fn.apply(elem);if(prog<duration){anim=window.requestAnimationFrame(move,elem);}else{window.cancelAnimationFrame(anim);elem.trigger('finished.zf.animate',[elem]).triggerHandler('finished.zf.animate',[elem]);}}anim=window.requestAnimationFrame(move);}/**
 * Animates an element in or out using a CSS transition class.
 * @function
 * @private
 * @param {Boolean} isIn - Defines if the animation is in or out.
 * @param {Object} element - jQuery or HTML object to animate.
 * @param {String} animation - CSS class to use.
 * @param {Function} cb - Callback to run when animation is finished.
 */function animate(isIn,element,animation,cb){element=$(element).eq(0);if(!element.length)return;var initClass=isIn?initClasses[0]:initClasses[1];var activeClass=isIn?activeClasses[0]:activeClasses[1];// Set up the animation
reset();element.addClass(animation).css('transition','none');requestAnimationFrame(function(){element.addClass(initClass);if(isIn)element.show();});// Start the animation
requestAnimationFrame(function(){element[0].offsetWidth;element.css('transition','').addClass(activeClass);});// Clean up the animation when it finishes
element.one(Foundation.transitionend(element),finish);// Hides the element (for out animations), resets the element, and runs a callback
function finish(){if(!isIn)element.hide();reset();if(cb)cb.apply(element);}// Resets transitions and removes motion-specific classes
function reset(){element[0].style.transitionDuration=0;element.removeClass(initClass+' '+activeClass+' '+animation);}}Foundation.Move=Move;Foundation.Motion=Motion;}(jQuery);
'use strict';!function($){var Nest={Feather:function Feather(menu){var type=arguments.length<=1||arguments[1]===undefined?'zf':arguments[1];menu.attr('role','menubar');var items=menu.find('li').attr({'role':'menuitem'}),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('a:first').attr('tabindex',0);items.each(function(){var $item=$(this),$sub=$item.children('ul');if($sub.length){$item.addClass(hasSubClass).attr({'aria-haspopup':true,'aria-expanded':false,'aria-label':$item.children('a:first').text()});$sub.addClass('submenu '+subMenuClass).attr({'data-submenu':'','aria-hidden':true,'role':'menu'});}if($item.parent('[data-submenu]').length){$item.addClass('is-submenu-item '+subItemClass);}});return;},Burn:function Burn(menu,type){var items=menu.find('li').removeAttr('tabindex'),subMenuClass='is-'+type+'-submenu',subItemClass=subMenuClass+'-item',hasSubClass='is-'+type+'-submenu-parent';menu.find('*').removeClass(subMenuClass+' '+subItemClass+' '+hasSubClass+' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display','');// console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
//           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
//           .removeAttr('data-submenu'));
// items.each(function(){
//   var $item = $(this),
//       $sub = $item.children('ul');
//   if($item.parent('[data-submenu]').length){
//     $item.removeClass('is-submenu-item ' + subItemClass);
//   }
//   if($sub.length){
//     $item.removeClass('has-submenu');
//     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
//   }
// });
}};Foundation.Nest=Nest;}(jQuery);
'use strict';!function($){function Timer(elem,options,cb){var _this=this,duration=options.duration,//options is an object for easily adding features later.
nameSpace=Object.keys(elem.data())[0]||'timer',remain=-1,start,timer;this.isPaused=false;this.restart=function(){remain=-1;clearTimeout(timer);this.start();};this.start=function(){this.isPaused=false;// if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
clearTimeout(timer);remain=remain<=0?duration:remain;elem.data('paused',false);start=Date.now();timer=setTimeout(function(){if(options.infinite){_this.restart();//rerun the timer.
}cb();},remain);elem.trigger('timerstart.zf.'+nameSpace);};this.pause=function(){this.isPaused=true;//if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
clearTimeout(timer);elem.data('paused',true);var end=Date.now();remain=remain-(end-start);elem.trigger('timerpaused.zf.'+nameSpace);};}/**
 * Runs a callback function when images are fully loaded.
 * @param {Object} images - Image(s) to check if loaded.
 * @param {Func} callback - Function to execute when image is fully loaded.
 */function onImagesLoaded(images,callback){var self=this,unloaded=images.length;if(unloaded===0){callback();}images.each(function(){if(this.complete){singleImageLoaded();}else if(typeof this.naturalWidth!=='undefined'&&this.naturalWidth>0){singleImageLoaded();}else{$(this).one('load',function(){singleImageLoaded();});}});function singleImageLoaded(){unloaded--;if(unloaded===0){callback();}}}Foundation.Timer=Timer;Foundation.onImagesLoaded=onImagesLoaded;}(jQuery);
'use strict';//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function($){$.spotSwipe={version:'1.0.0',enabled:'ontouchstart'in document.documentElement,preventDefault:false,moveThreshold:75,timeThreshold:200};var startPosX,startPosY,startTime,elapsedTime,isMoving=false;function onTouchEnd(){//  alert(this);
this.removeEventListener('touchmove',onTouchMove);this.removeEventListener('touchend',onTouchEnd);isMoving=false;}function onTouchMove(e){if($.spotSwipe.preventDefault){e.preventDefault();}if(isMoving){var x=e.touches[0].pageX;var y=e.touches[0].pageY;var dx=startPosX-x;var dy=startPosY-y;var dir;elapsedTime=new Date().getTime()-startTime;if(Math.abs(dx)>=$.spotSwipe.moveThreshold&&elapsedTime<=$.spotSwipe.timeThreshold){dir=dx>0?'left':'right';}// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
//   dir = dy > 0 ? 'down' : 'up';
// }
if(dir){e.preventDefault();onTouchEnd.call(this);$(this).trigger('swipe',dir).trigger('swipe'+dir);}}}function onTouchStart(e){if(e.touches.length==1){startPosX=e.touches[0].pageX;startPosY=e.touches[0].pageY;isMoving=true;startTime=new Date().getTime();this.addEventListener('touchmove',onTouchMove,false);this.addEventListener('touchend',onTouchEnd,false);}}function init(){this.addEventListener&&this.addEventListener('touchstart',onTouchStart,false);}function teardown(){this.removeEventListener('touchstart',onTouchStart);}$.event.special.swipe={setup:init};$.each(['left','up','down','right'],function(){$.event.special['swipe'+this]={setup:function setup(){$(this).on('swipe',$.noop);}};});})(jQuery);/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/!function($){$.fn.addTouch=function(){this.each(function(i,el){$(el).bind('touchstart touchmove touchend touchcancel',function(){//we pass the original event object because the jQuery event
//object is normalized to w3c specs and does not provide the TouchList
handleTouch(event);});});var handleTouch=function handleTouch(event){var touches=event.changedTouches,first=touches[0],eventTypes={touchstart:'mousedown',touchmove:'mousemove',touchend:'mouseup'},type=eventTypes[event.type],simulatedEvent;if('MouseEvent'in window&&typeof window.MouseEvent==='function'){simulatedEvent=new window.MouseEvent(type,{'bubbles':true,'cancelable':true,'screenX':first.screenX,'screenY':first.screenY,'clientX':first.clientX,'clientY':first.clientY});}else{simulatedEvent=document.createEvent('MouseEvent');simulatedEvent.initMouseEvent(type,true,true,window,1,first.screenX,first.screenY,first.clientX,first.clientY,false,false,false,false,0/*left*/,null);}first.target.dispatchEvent(simulatedEvent);};};}(jQuery);//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************
/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};!function($){var MutationObserver=function(){var prefixes=['WebKit','Moz','O','Ms',''];for(var i=0;i<prefixes.length;i++){if(prefixes[i]+'MutationObserver'in window){return window[prefixes[i]+'MutationObserver'];}}return false;}();var triggers=function triggers(el,type){el.data(type).split(' ').forEach(function(id){$('#'+id)[type==='close'?'trigger':'triggerHandler'](type+'.zf.trigger',[el]);});};// Elements with [data-open] will reveal a plugin that supports it when clicked.
$(document).on('click.zf.trigger','[data-open]',function(){triggers($(this),'open');});// Elements with [data-close] will close a plugin that supports it when clicked.
// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
$(document).on('click.zf.trigger','[data-close]',function(){var id=$(this).data('close');if(id){triggers($(this),'close');}else{$(this).trigger('close.zf.trigger');}});// Elements with [data-toggle] will toggle a plugin that supports it when clicked.
$(document).on('click.zf.trigger','[data-toggle]',function(){triggers($(this),'toggle');});// Elements with [data-closable] will respond to close.zf.trigger events.
$(document).on('close.zf.trigger','[data-closable]',function(e){e.stopPropagation();var animation=$(this).data('closable');if(animation!==''){Foundation.Motion.animateOut($(this),animation,function(){$(this).trigger('closed.zf');});}else{$(this).fadeOut().trigger('closed.zf');}});$(document).on('focus.zf.trigger blur.zf.trigger','[data-toggle-focus]',function(){var id=$(this).data('toggle-focus');$('#'+id).triggerHandler('toggle.zf.trigger',[$(this)]);});/**
* Fires once after all other scripts have loaded
* @function
* @private
*/$(window).load(function(){checkListeners();});function checkListeners(){eventsListener();resizeListener();scrollListener();closemeListener();}//******** only fires this function once on load, if there's something to watch ********
function closemeListener(pluginName){var yetiBoxes=$('[data-yeti-box]'),plugNames=['dropdown','tooltip','reveal'];if(pluginName){if(typeof pluginName==='string'){plugNames.push(pluginName);}else if((typeof pluginName==='undefined'?'undefined':_typeof(pluginName))==='object'&&typeof pluginName[0]==='string'){plugNames.concat(pluginName);}else{console.error('Plugin names must be strings');}}if(yetiBoxes.length){var listeners=plugNames.map(function(name){return'closeme.zf.'+name;}).join(' ');$(window).off(listeners).on(listeners,function(e,pluginId){var plugin=e.namespace.split('.')[0];var plugins=$('[data-'+plugin+']').not('[data-yeti-box="'+pluginId+'"]');plugins.each(function(){var _this=$(this);_this.triggerHandler('close.zf.trigger',[_this]);});});}}function resizeListener(debounce){var timer=void 0,$nodes=$('[data-resize]');if($nodes.length){$(window).off('resize.zf.trigger').on('resize.zf.trigger',function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){$(this).triggerHandler('resizeme.zf.trigger');});}//trigger all listening elements and signal a resize event
$nodes.attr('data-events',"resize");},debounce||10);//default time to emit resize event
});}}function scrollListener(debounce){var timer=void 0,$nodes=$('[data-scroll]');if($nodes.length){$(window).off('scroll.zf.trigger').on('scroll.zf.trigger',function(e){if(timer){clearTimeout(timer);}timer=setTimeout(function(){if(!MutationObserver){//fallback for IE 9
$nodes.each(function(){$(this).triggerHandler('scrollme.zf.trigger');});}//trigger all listening elements and signal a scroll event
$nodes.attr('data-events',"scroll");},debounce||10);//default time to emit scroll event
});}}function eventsListener(){if(!MutationObserver){return false;}var nodes=document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');//element callback
var listeningElementsMutation=function listeningElementsMutation(mutationRecordsList){var $target=$(mutationRecordsList[0].target);//trigger the event handler for the element depending on type
switch($target.attr("data-events")){case"resize":$target.triggerHandler('resizeme.zf.trigger',[$target]);break;case"scroll":$target.triggerHandler('scrollme.zf.trigger',[$target,window.pageYOffset]);break;// case "mutate" :
// console.log('mutate', $target);
// $target.triggerHandler('mutate.zf.trigger');
//
// //make sure we don't get stuck in an infinite loop from sloppy codeing
// if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {
//   domMutationObserver();
// }
// break;
default:return false;//nothing
}};if(nodes.length){//for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
for(var i=0;i<=nodes.length-1;i++){var elementObserver=new MutationObserver(listeningElementsMutation);elementObserver.observe(nodes[i],{attributes:true,childList:false,characterData:false,subtree:false,attributeFilter:["data-events"]});}}}// ------------------------------------
// [PH]
// Foundation.CheckWatchers = checkWatchers;
Foundation.IHearYou=checkListeners;// Foundation.ISeeYou = scrollListener;
// Foundation.IFeelYou = closemeListener;
}(jQuery);// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// }
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Abide module.
 * @module foundation.abide
 */var Abide=function(){/**
   * Creates a new instance of Abide.
   * @class
   * @fires Abide#init
   * @param {Object} element - jQuery object to add the trigger to.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Abide(element){var options=arguments.length<=1||arguments[1]===undefined?{}:arguments[1];_classCallCheck(this,Abide);this.$element=element;this.options=$.extend({},Abide.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Abide');}/**
   * Initializes the Abide plugin and calls functions to get Abide functioning on load.
   * @private
   */_createClass(Abide,[{key:'_init',value:function _init(){this.$inputs=this.$element.find('input, textarea, select');this._events();}/**
   * Initializes events for Abide.
   * @private
   */},{key:'_events',value:function _events(){var _this2=this;this.$element.off('.abide').on('reset.zf.abide',function(){_this2.resetForm();}).on('submit.zf.abide',function(){return _this2.validateForm();});if(this.options.validateOn==='fieldChange'){this.$inputs.off('change.zf.abide').on('change.zf.abide',function(e){_this2.validateInput($(e.target));});}if(this.options.liveValidate){this.$inputs.off('input.zf.abide').on('input.zf.abide',function(e){_this2.validateInput($(e.target));});}}/**
   * Calls necessary functions to update Abide upon DOM change
   * @private
   */},{key:'_reflow',value:function _reflow(){this._init();}/**
   * Checks whether or not a form element has the required attribute and if it's checked or not
   * @param {Object} element - jQuery object to check for required attribute
   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
   */},{key:'requiredCheck',value:function requiredCheck($el){if(!$el.attr('required'))return true;var isGood=true;switch($el[0].type){case'checkbox':isGood=$el[0].checked;break;case'select':case'select-one':case'select-multiple':var opt=$el.find('option:selected');if(!opt.length||!opt.val())isGood=false;break;default:if(!$el.val()||!$el.val().length)isGood=false;}return isGood;}/**
   * Based on $el, get the first element with selector in this order:
   * 1. The element's direct sibling('s).
   * 3. The element's parent's children.
   *
   * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
   *
   * @param {Object} $el - jQuery object to use as reference to find the form error selector.
   * @returns {Object} jQuery object with the selector.
   */},{key:'findFormError',value:function findFormError($el){var $error=$el.siblings(this.options.formErrorSelector);if(!$error.length){$error=$el.parent().find(this.options.formErrorSelector);}return $error;}/**
   * Get the first element in this order:
   * 2. The <label> with the attribute `[for="someInputId"]`
   * 3. The `.closest()` <label>
   *
   * @param {Object} $el - jQuery object to check for required attribute
   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
   */},{key:'findLabel',value:function findLabel($el){var id=$el[0].id;var $label=this.$element.find('label[for="'+id+'"]');if(!$label.length){return $el.closest('label');}return $label;}/**
   * Get the set of labels associated with a set of radio els in this order
   * 2. The <label> with the attribute `[for="someInputId"]`
   * 3. The `.closest()` <label>
   *
   * @param {Object} $el - jQuery object to check for required attribute
   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
   */},{key:'findRadioLabels',value:function findRadioLabels($els){var _this3=this;var labels=$els.map(function(i,el){var id=el.id;var $label=_this3.$element.find('label[for="'+id+'"]');if(!$label.length){$label=$(el).closest('label');}return $label[0];});return $(labels);}/**
   * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
   * @param {Object} $el - jQuery object to add the class to
   */},{key:'addErrorClasses',value:function addErrorClasses($el){var $label=this.findLabel($el);var $formError=this.findFormError($el);if($label.length){$label.addClass(this.options.labelErrorClass);}if($formError.length){$formError.addClass(this.options.formErrorClass);}$el.addClass(this.options.inputErrorClass).attr('data-invalid','');}/**
   * Remove CSS error classes etc from an entire radio button group
   * @param {String} groupName - A string that specifies the name of a radio button group
   *
   */},{key:'removeRadioErrorClasses',value:function removeRadioErrorClasses(groupName){var $els=this.$element.find(':radio[name="'+groupName+'"]');var $labels=this.findRadioLabels($els);var $formErrors=this.findFormError($els);if($labels.length){$labels.removeClass(this.options.labelErrorClass);}if($formErrors.length){$formErrors.removeClass(this.options.formErrorClass);}$els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');}/**
   * Removes CSS error class as specified by the Abide settings from the label, input, and the form
   * @param {Object} $el - jQuery object to remove the class from
   */},{key:'removeErrorClasses',value:function removeErrorClasses($el){// radios need to clear all of the els
if($el[0].type=='radio'){return this.removeRadioErrorClasses($el.attr('name'));}var $label=this.findLabel($el);var $formError=this.findFormError($el);if($label.length){$label.removeClass(this.options.labelErrorClass);}if($formError.length){$formError.removeClass(this.options.formErrorClass);}$el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');}/**
   * Goes through a form to find inputs and proceeds to validate them in ways specific to their type
   * @fires Abide#invalid
   * @fires Abide#valid
   * @param {Object} element - jQuery object to validate, should be an HTML input
   * @returns {Boolean} goodToGo - If the input is valid or not.
   */},{key:'validateInput',value:function validateInput($el){var clearRequire=this.requiredCheck($el),validated=false,customValidator=true,validator=$el.attr('data-validator'),equalTo=true;// don't validate ignored inputs or hidden inputs
if($el.is('[data-abide-ignore]')||$el.is('[type="hidden"]')){return true;}switch($el[0].type){case'radio':validated=this.validateRadio($el.attr('name'));break;case'checkbox':validated=clearRequire;break;case'select':case'select-one':case'select-multiple':validated=clearRequire;break;default:validated=this.validateText($el);}if(validator){customValidator=this.matchValidation($el,validator,$el.attr('required'));}if($el.attr('data-equalto')){equalTo=this.options.validators.equalTo($el);}var goodToGo=[clearRequire,validated,customValidator,equalTo].indexOf(false)===-1;var message=(goodToGo?'valid':'invalid')+'.zf.abide';this[goodToGo?'removeErrorClasses':'addErrorClasses']($el);/**
     * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
     * Trigger includes the DOM element of the input.
     * @event Abide#valid
     * @event Abide#invalid
     */$el.trigger(message,[$el]);return goodToGo;}/**
   * Goes through a form and if there are any invalid inputs, it will display the form error element
   * @returns {Boolean} noError - true if no errors were detected...
   * @fires Abide#formvalid
   * @fires Abide#forminvalid
   */},{key:'validateForm',value:function validateForm(){var acc=[];var _this=this;this.$inputs.each(function(){acc.push(_this.validateInput($(this)));});var noError=acc.indexOf(false)===-1;this.$element.find('[data-abide-error]').css('display',noError?'none':'block');/**
     * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
     * Trigger includes the element of the form.
     * @event Abide#formvalid
     * @event Abide#forminvalid
     */this.$element.trigger((noError?'formvalid':'forminvalid')+'.zf.abide',[this.$element]);return noError;}/**
   * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
   * @param {Object} $el - jQuery object to validate, should be a text input HTML element
   * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
   * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
   */},{key:'validateText',value:function validateText($el,pattern){// A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
pattern=pattern||$el.attr('pattern')||$el.attr('type');var inputText=$el.val();var valid=false;if(inputText.length){// If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
if(this.options.patterns.hasOwnProperty(pattern)){valid=this.options.patterns[pattern].test(inputText);}// If the pattern name isn't also the type attribute of the field, then test it as a regexp
else if(pattern!==$el.attr('type')){valid=new RegExp(pattern).test(inputText);}else{valid=true;}}// An empty field is valid if it's not required
else if(!$el.prop('required')){valid=true;}return valid;}/**
   * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
   * @param {String} groupName - A string that specifies the name of a radio button group
   * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
   */},{key:'validateRadio',value:function validateRadio(groupName){// If at least one radio in the group has the `required` attribute, the group is considered required
// Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
var $group=this.$element.find(':radio[name="'+groupName+'"]');var valid=false,required=false;// For the group to be required, at least one radio needs to be required
$group.each(function(i,e){if($(e).attr('required')){required=true;}});if(!required)valid=true;if(!valid){// For the group to be valid, at least one radio needs to be checked
$group.each(function(i,e){if($(e).prop('checked')){valid=true;}});};return valid;}/**
   * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
   * @param {Object} $el - jQuery input element.
   * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
   * @param {Boolean} required - self explanatory?
   * @returns {Boolean} - true if validations passed.
   */},{key:'matchValidation',value:function matchValidation($el,validators,required){var _this4=this;required=required?true:false;var clear=validators.split(' ').map(function(v){return _this4.options.validators[v]($el,required,$el.parent());});return clear.indexOf(false)===-1;}/**
   * Resets form inputs and styles
   * @fires Abide#formreset
   */},{key:'resetForm',value:function resetForm(){var $form=this.$element,opts=this.options;$('.'+opts.labelErrorClass,$form).not('small').removeClass(opts.labelErrorClass);$('.'+opts.inputErrorClass,$form).not('small').removeClass(opts.inputErrorClass);$(opts.formErrorSelector+'.'+opts.formErrorClass).removeClass(opts.formErrorClass);$form.find('[data-abide-error]').css('display','none');$(':input',$form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');$(':input:radio',$form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');$(':input:checkbox',$form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');/**
     * Fires when the form has been reset.
     * @event Abide#formreset
     */$form.trigger('formreset.zf.abide',[$form]);}/**
   * Destroys an instance of Abide.
   * Removes error styles and classes from elements, without resetting their values.
   */},{key:'destroy',value:function destroy(){var _this=this;this.$element.off('.abide').find('[data-abide-error]').css('display','none');this.$inputs.off('.abide').each(function(){_this.removeErrorClasses($(this));});Foundation.unregisterPlugin(this);}}]);return Abide;}();/**
 * Default settings for plugin
 */Abide.defaults={/**
   * The default event to validate inputs. Checkboxes and radios validate immediately.
   * Remove or change this value for manual validation.
   * @option
   * @example 'fieldChange'
   */validateOn:'fieldChange',/**
   * Class to be applied to input labels on failed validation.
   * @option
   * @example 'is-invalid-label'
   */labelErrorClass:'is-invalid-label',/**
   * Class to be applied to inputs on failed validation.
   * @option
   * @example 'is-invalid-input'
   */inputErrorClass:'is-invalid-input',/**
   * Class selector to use to target Form Errors for show/hide.
   * @option
   * @example '.form-error'
   */formErrorSelector:'.form-error',/**
   * Class added to Form Errors on failed validation.
   * @option
   * @example 'is-visible'
   */formErrorClass:'is-visible',/**
   * Set to true to validate text inputs on any value change.
   * @option
   * @example false
   */liveValidate:false,patterns:{alpha:/^[a-zA-Z]+$/,alpha_numeric:/^[a-zA-Z0-9]+$/,integer:/^[-+]?\d+$/,number:/^[-+]?\d*(?:[\.\,]\d+)?$/,// amex, visa, diners
card:/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,cvv:/^([0-9]){3,4}$/,// http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
email:/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,url:/^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,// abc.de
domain:/^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,datetime:/^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,// YYYY-MM-DD
date:/(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,// HH:MM:SS
time:/^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,dateISO:/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,// MM/DD/YYYY
month_day_year:/^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,// DD/MM/YYYY
day_month_year:/^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,// #FFF or #FFFFFF
color:/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/},/**
   * Optional validation functions to be used. `equalTo` being the only default included function.
   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
   * el : The jQuery element to validate.
   * required : Boolean value of the required attribute be present or not.
   * parent : The direct parent of the input.
   * @option
   */validators:{equalTo:function equalTo(el,required,parent){return $('#'+el.attr('data-equalto')).val()===el.val();}}};// Window exports
Foundation.plugin(Abide,'Abide');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Accordion module.
 * @module foundation.accordion
 * @requires foundation.util.keyboard
 * @requires foundation.util.motion
 */var Accordion=function(){/**
   * Creates a new instance of an accordion.
   * @class
   * @fires Accordion#init
   * @param {jQuery} element - jQuery object to make into an accordion.
   * @param {Object} options - a plain object with settings to override the default options.
   */function Accordion(element,options){_classCallCheck(this,Accordion);this.$element=element;this.options=$.extend({},Accordion.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Accordion');Foundation.Keyboard.register('Accordion',{'ENTER':'toggle','SPACE':'toggle','ARROW_DOWN':'next','ARROW_UP':'previous'});}/**
   * Initializes the accordion by animating the preset active pane(s).
   * @private
   */_createClass(Accordion,[{key:'_init',value:function _init(){this.$element.attr('role','tablist');this.$tabs=this.$element.children('li, [data-accordion-item]');this.$tabs.each(function(idx,el){var $el=$(el),$content=$el.children('[data-tab-content]'),id=$content[0].id||Foundation.GetYoDigits(6,'accordion'),linkId=el.id||id+'-label';$el.find('a:first').attr({'aria-controls':id,'role':'tab','id':linkId,'aria-expanded':false,'aria-selected':false});$content.attr({'role':'tabpanel','aria-labelledby':linkId,'aria-hidden':true,'id':id});});var $initActive=this.$element.find('.is-active').children('[data-tab-content]');if($initActive.length){this.down($initActive,true);}this._events();}/**
   * Adds event handlers for items within the accordion.
   * @private
   */},{key:'_events',value:function _events(){var _this=this;this.$tabs.each(function(){var $elem=$(this);var $tabContent=$elem.children('[data-tab-content]');if($tabContent.length){$elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion',function(e){// $(this).children('a').on('click.zf.accordion', function(e) {
e.preventDefault();if($elem.hasClass('is-active')){if(_this.options.allowAllClosed||$elem.siblings().hasClass('is-active')){_this.up($tabContent);}}else{_this.down($tabContent);}}).on('keydown.zf.accordion',function(e){Foundation.Keyboard.handleKey(e,'Accordion',{toggle:function toggle(){_this.toggle($tabContent);},next:function next(){var $a=$elem.next().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},previous:function previous(){var $a=$elem.prev().find('a').focus();if(!_this.options.multiExpand){$a.trigger('click.zf.accordion');}},handled:function handled(){e.preventDefault();e.stopPropagation();}});});}});}/**
   * Toggles the selected content pane's open/close state.
   * @param {jQuery} $target - jQuery object of the pane to toggle.
   * @function
   */},{key:'toggle',value:function toggle($target){if($target.parent().hasClass('is-active')){if(this.options.allowAllClosed||$target.parent().siblings().hasClass('is-active')){this.up($target);}else{return;}}else{this.down($target);}}/**
   * Opens the accordion tab defined by `$target`.
   * @param {jQuery} $target - Accordion pane to open.
   * @param {Boolean} firstTime - flag to determine if reflow should happen.
   * @fires Accordion#down
   * @function
   */},{key:'down',value:function down($target,firstTime){var _this2=this;if(!this.options.multiExpand&&!firstTime){var $currentActive=this.$element.children('.is-active').children('[data-tab-content]');if($currentActive.length){this.up($currentActive);}}$target.attr('aria-hidden',false).parent('[data-tab-content]').addBack().parent().addClass('is-active');$target.slideDown(this.options.slideSpeed,function(){/**
       * Fires when the tab is done opening.
       * @event Accordion#down
       */_this2.$element.trigger('down.zf.accordion',[$target]);});$('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':true,'aria-selected':true});}/**
   * Closes the tab defined by `$target`.
   * @param {jQuery} $target - Accordion tab to close.
   * @fires Accordion#up
   * @function
   */},{key:'up',value:function up($target){var $aunts=$target.parent().siblings(),_this=this;var canClose=this.options.multiExpand?$aunts.hasClass('is-active'):$target.parent().hasClass('is-active');if(!this.options.allowAllClosed&&!canClose){return;}// Foundation.Move(this.options.slideSpeed, $target, function(){
$target.slideUp(_this.options.slideSpeed,function(){/**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */_this.$element.trigger('up.zf.accordion',[$target]);});// });
$target.attr('aria-hidden',true).parent().removeClass('is-active');$('#'+$target.attr('aria-labelledby')).attr({'aria-expanded':false,'aria-selected':false});}/**
   * Destroys an instance of an accordion.
   * @fires Accordion#destroyed
   * @function
   */},{key:'destroy',value:function destroy(){this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display','');this.$element.find('a').off('.zf.accordion');Foundation.unregisterPlugin(this);}}]);return Accordion;}();Accordion.defaults={/**
   * Amount of time to animate the opening of an accordion pane.
   * @option
   * @example 250
   */slideSpeed:250,/**
   * Allow the accordion to have multiple open panes.
   * @option
   * @example false
   */multiExpand:false,/**
   * Allow the accordion to close all panes.
   * @option
   * @example false
   */allowAllClosed:false};// Window exports
Foundation.plugin(Accordion,'Accordion');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * AccordionMenu module.
 * @module foundation.accordionMenu
 * @requires foundation.util.keyboard
 * @requires foundation.util.motion
 * @requires foundation.util.nest
 */var AccordionMenu=function(){/**
   * Creates a new instance of an accordion menu.
   * @class
   * @fires AccordionMenu#init
   * @param {jQuery} element - jQuery object to make into an accordion menu.
   * @param {Object} options - Overrides to the default plugin settings.
   */function AccordionMenu(element,options){_classCallCheck(this,AccordionMenu);this.$element=element;this.options=$.extend({},AccordionMenu.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'accordion');this._init();Foundation.registerPlugin(this,'AccordionMenu');Foundation.Keyboard.register('AccordionMenu',{'ENTER':'toggle','SPACE':'toggle','ARROW_RIGHT':'open','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'close','ESCAPE':'closeAll','TAB':'down','SHIFT_TAB':'up'});}/**
   * Initializes the accordion menu by hiding all nested menus.
   * @private
   */_createClass(AccordionMenu,[{key:'_init',value:function _init(){this.$element.find('[data-submenu]').not('.is-active').slideUp(0);//.find('a').css('padding-left', '1rem');
this.$element.attr({'role':'tablist','aria-multiselectable':this.options.multiOpen});this.$menuLinks=this.$element.find('.is-accordion-submenu-parent');this.$menuLinks.each(function(){var linkId=this.id||Foundation.GetYoDigits(6,'acc-menu-link'),$elem=$(this),$sub=$elem.children('[data-submenu]'),subId=$sub[0].id||Foundation.GetYoDigits(6,'acc-menu'),isActive=$sub.hasClass('is-active');$elem.attr({'aria-controls':subId,'aria-expanded':isActive,'role':'tab','id':linkId});$sub.attr({'aria-labelledby':linkId,'aria-hidden':!isActive,'role':'tabpanel','id':subId});});var initPanes=this.$element.find('.is-active');if(initPanes.length){var _this=this;initPanes.each(function(){_this.down($(this));});}this._events();}/**
   * Adds event handlers for items within the menu.
   * @private
   */},{key:'_events',value:function _events(){var _this=this;this.$element.find('li').each(function(){var $submenu=$(this).children('[data-submenu]');if($submenu.length){$(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu',function(e){e.preventDefault();_this.toggle($submenu);});}}).on('keydown.zf.accordionmenu',function(e){var $element=$(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement,$target=$element.children('[data-submenu]');$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1)).find('a').first();$nextElement=$elements.eq(Math.min(i+1,$elements.length-1)).find('a').first();if($(this).children('[data-submenu]:visible').length){// has open sub menu
$nextElement=$element.find('li:first-child').find('a').first();}if($(this).is(':first-child')){// is first element of sub menu
$prevElement=$element.parents('li').first().find('a').first();}else if($prevElement.children('[data-submenu]:visible').length){// if previous element has open sub menu
$prevElement=$prevElement.find('li:last-child').find('a').first();}if($(this).is(':last-child')){// is last element of sub menu
$nextElement=$element.parents('li').first().next('li').find('a').first();}return;}});Foundation.Keyboard.handleKey(e,'AccordionMenu',{open:function open(){if($target.is(':hidden')){_this.down($target);$target.find('li').first().find('a').first().focus();}},close:function close(){if($target.length&&!$target.is(':hidden')){// close active sub of this item
_this.up($target);}else if($element.parent('[data-submenu]').length){// close currently open sub
_this.up($element.parent('[data-submenu]'));$element.parents('li').first().find('a').first().focus();}},up:function up(){$prevElement.attr('tabindex',-1).focus();return true;},down:function down(){$nextElement.attr('tabindex',-1).focus();return true;},toggle:function toggle(){if($element.children('[data-submenu]').length){_this.toggle($element.children('[data-submenu]'));}},closeAll:function closeAll(){_this.hideAll();},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});//.attr('tabindex', 0);
}/**
   * Closes all panes of the menu.
   * @function
   */},{key:'hideAll',value:function hideAll(){this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);}/**
   * Toggles the open/close state of a submenu.
   * @function
   * @param {jQuery} $target - the submenu to toggle
   */},{key:'toggle',value:function toggle($target){if(!$target.is(':animated')){if(!$target.is(':hidden')){this.up($target);}else{this.down($target);}}}/**
   * Opens the sub-menu defined by `$target`.
   * @param {jQuery} $target - Sub-menu to open.
   * @fires AccordionMenu#down
   */},{key:'down',value:function down($target){var _this=this;if(!this.options.multiOpen){this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));}$target.addClass('is-active').attr({'aria-hidden':false}).parent('.is-accordion-submenu-parent').attr({'aria-expanded':true});//Foundation.Move(this.options.slideSpeed, $target, function() {
$target.slideDown(_this.options.slideSpeed,function(){/**
           * Fires when the menu is done opening.
           * @event AccordionMenu#down
           */_this.$element.trigger('down.zf.accordionMenu',[$target]);});//});
}/**
   * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
   * @param {jQuery} $target - Sub-menu to close.
   * @fires AccordionMenu#up
   */},{key:'up',value:function up($target){var _this=this;//Foundation.Move(this.options.slideSpeed, $target, function(){
$target.slideUp(_this.options.slideSpeed,function(){/**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */_this.$element.trigger('up.zf.accordionMenu',[$target]);});//});
var $menus=$target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden',true);$menus.parent('.is-accordion-submenu-parent').attr('aria-expanded',false);}/**
   * Destroys an instance of accordion menu.
   * @fires AccordionMenu#destroyed
   */},{key:'destroy',value:function destroy(){this.$element.find('[data-submenu]').slideDown(0).css('display','');this.$element.find('a').off('click.zf.accordionMenu');Foundation.Nest.Burn(this.$element,'accordion');Foundation.unregisterPlugin(this);}}]);return AccordionMenu;}();AccordionMenu.defaults={/**
   * Amount of time to animate the opening of a submenu in ms.
   * @option
   * @example 250
   */slideSpeed:250,/**
   * Allow the menu to have multiple open panes.
   * @option
   * @example true
   */multiOpen:true};// Window exports
Foundation.plugin(AccordionMenu,'AccordionMenu');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Drilldown module.
 * @module foundation.drilldown
 * @requires foundation.util.keyboard
 * @requires foundation.util.motion
 * @requires foundation.util.nest
 */var Drilldown=function(){/**
   * Creates a new instance of a drilldown menu.
   * @class
   * @param {jQuery} element - jQuery object to make into an accordion menu.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Drilldown(element,options){_classCallCheck(this,Drilldown);this.$element=element;this.options=$.extend({},Drilldown.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'drilldown');this._init();Foundation.registerPlugin(this,'Drilldown');Foundation.Keyboard.register('Drilldown',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close','TAB':'down','SHIFT_TAB':'up'});}/**
   * Initializes the drilldown by creating jQuery collections of elements
   * @private
   */_createClass(Drilldown,[{key:'_init',value:function _init(){this.$submenuAnchors=this.$element.find('li.is-drilldown-submenu-parent').children('a');this.$submenus=this.$submenuAnchors.parent('li').children('[data-submenu]');this.$menuItems=this.$element.find('li').not('.js-drilldown-back').attr('role','menuitem').find('a');this._prepareMenu();this._keyboardEvents();}/**
   * prepares drilldown menu by setting attributes to links and elements
   * sets a min height to prevent content jumping
   * wraps the element if not already wrapped
   * @private
   * @function
   */},{key:'_prepareMenu',value:function _prepareMenu(){var _this=this;// if(!this.options.holdOpen){
//   this._menuLinkEvents();
// }
this.$submenuAnchors.each(function(){var $link=$(this);var $sub=$link.parent();if(_this.options.parentLink){$link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');}$link.data('savedHref',$link.attr('href')).removeAttr('href');$link.children('[data-submenu]').attr({'aria-hidden':true,'tabindex':0,'role':'menu'});_this._events($link);});this.$submenus.each(function(){var $menu=$(this),$back=$menu.find('.js-drilldown-back');if(!$back.length){$menu.prepend(_this.options.backButton);}_this._back($menu);});if(!this.$element.parent().hasClass('is-drilldown')){this.$wrapper=$(this.options.wrapper).addClass('is-drilldown');this.$wrapper=this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());}}/**
   * Adds event handlers to elements in the menu.
   * @function
   * @private
   * @param {jQuery} $elem - the current menu item to add handlers to.
   */},{key:'_events',value:function _events($elem){var _this=this;$elem.off('click.zf.drilldown').on('click.zf.drilldown',function(e){if($(e.target).parentsUntil('ul','li').hasClass('is-drilldown-submenu-parent')){e.stopImmediatePropagation();e.preventDefault();}// if(e.target !== e.currentTarget.firstElementChild){
//   return false;
// }
_this._show($elem.parent('li'));if(_this.options.closeOnClick){var $body=$('body');$body.off('.zf.drilldown').on('click.zf.drilldown',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}e.preventDefault();_this._hideAll();$body.off('.zf.drilldown');});}});}/**
   * Adds keydown event listener to `li`'s in the menu.
   * @private
   */},{key:'_keyboardEvents',value:function _keyboardEvents(){var _this=this;this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown',function(e){var $element=$(this),$elements=$element.parent('li').parent('ul').children('li').children('a'),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));return;}});Foundation.Keyboard.handleKey(e,'Drilldown',{next:function next(){if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(Foundation.transitionend($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});return true;}},previous:function previous(){_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(Foundation.transitionend($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});return true;},up:function up(){$prevElement.focus();return true;},down:function down(){$nextElement.focus();return true;},close:function close(){_this._back();//_this.$menuItems.first().focus(); // focus to first element
},open:function open(){if(!$element.is(_this.$menuItems)){// not menu item means back button
_this._hide($element.parent('li').parent('ul'));$element.parent('li').parent('ul').one(Foundation.transitionend($element),function(){setTimeout(function(){$element.parent('li').parent('ul').parent('li').children('a').first().focus();},1);});}else if($element.is(_this.$submenuAnchors)){_this._show($element.parent('li'));$element.parent('li').one(Foundation.transitionend($element),function(){$element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();});}return true;},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}e.stopImmediatePropagation();}});});// end keyboardAccess
}/**
   * Closes all open elements, and returns to root menu.
   * @function
   * @fires Drilldown#closed
   */},{key:'_hideAll',value:function _hideAll(){var $elem=this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');$elem.one(Foundation.transitionend($elem),function(e){$elem.removeClass('is-active is-closing');});/**
         * Fires when the menu is fully closed.
         * @event Drilldown#closed
         */this.$element.trigger('closed.zf.drilldown');}/**
   * Adds event listener for each `back` button, and closes open menus.
   * @function
   * @fires Drilldown#back
   * @param {jQuery} $elem - the current sub-menu to add `back` event.
   */},{key:'_back',value:function _back($elem){var _this=this;$elem.off('click.zf.drilldown');$elem.children('.js-drilldown-back').on('click.zf.drilldown',function(e){e.stopImmediatePropagation();// console.log('mouseup on back');
_this._hide($elem);});}/**
   * Adds event listener to menu items w/o submenus to close open menus on click.
   * @function
   * @private
   */},{key:'_menuLinkEvents',value:function _menuLinkEvents(){var _this=this;this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown',function(e){// e.stopImmediatePropagation();
setTimeout(function(){_this._hideAll();},0);});}/**
   * Opens a submenu.
   * @function
   * @fires Drilldown#open
   * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
   */},{key:'_show',value:function _show($elem){$elem.children('[data-submenu]').addClass('is-active');/**
     * Fires when the submenu has opened.
     * @event Drilldown#open
     */this.$element.trigger('open.zf.drilldown',[$elem]);}},{key:'_hide',/**
   * Hides a submenu
   * @function
   * @fires Drilldown#hide
   * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
   */value:function _hide($elem){var _this=this;$elem.addClass('is-closing').one(Foundation.transitionend($elem),function(){$elem.removeClass('is-active is-closing');$elem.blur();});/**
     * Fires when the submenu has closed.
     * @event Drilldown#hide
     */$elem.trigger('hide.zf.drilldown',[$elem]);}/**
   * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
   * Prevents content jumping.
   * @function
   * @private
   */},{key:'_getMaxDims',value:function _getMaxDims(){var max=0,result={};this.$submenus.add(this.$element).each(function(){var numOfElems=$(this).children('li').length;max=numOfElems>max?numOfElems:max;});result['min-height']=max*this.$menuItems[0].getBoundingClientRect().height+'px';result['max-width']=this.$element[0].getBoundingClientRect().width+'px';return result;}/**
   * Destroys the Drilldown Menu
   * @function
   */},{key:'destroy',value:function destroy(){this._hideAll();Foundation.Nest.Burn(this.$element,'drilldown');this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');this.$submenuAnchors.each(function(){$(this).off('.zf.drilldown');});this.$element.find('a').each(function(){var $link=$(this);if($link.data('savedHref')){$link.attr('href',$link.data('savedHref')).removeData('savedHref');}else{return;}});Foundation.unregisterPlugin(this);}}]);return Drilldown;}();Drilldown.defaults={/**
   * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @example '<\li><\a>Back<\/a><\/li>'
   */backButton:'<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',/**
   * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
   * @option
   * @example '<\div class="is-drilldown"><\/div>'
   */wrapper:'<div></div>',/**
   * Adds the parent link to the submenu.
   * @option
   * @example false
   */parentLink:false,/**
   * Allow the menu to return to root list on body click.
   * @option
   * @example false
   */closeOnClick:false// holdOpen: false
};// Window exports
Foundation.plugin(Drilldown,'Drilldown');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Dropdown module.
 * @module foundation.dropdown
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.triggers
 */var Dropdown=function(){/**
   * Creates a new instance of a dropdown.
   * @class
   * @param {jQuery} element - jQuery object to make into a dropdown.
   *        Object should be of the dropdown panel, rather than its anchor.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Dropdown(element,options){_classCallCheck(this,Dropdown);this.$element=element;this.options=$.extend({},Dropdown.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Dropdown');Foundation.Keyboard.register('Dropdown',{'ENTER':'open','SPACE':'open','ESCAPE':'close','TAB':'tab_forward','SHIFT_TAB':'tab_backward'});}/**
   * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
   * @function
   * @private
   */_createClass(Dropdown,[{key:'_init',value:function _init(){var $id=this.$element.attr('id');this.$anchor=$('[data-toggle="'+$id+'"]')||$('[data-open="'+$id+'"]');this.$anchor.attr({'aria-controls':$id,'data-is-focus':false,'data-yeti-box':$id,'aria-haspopup':true,'aria-expanded':false});this.options.positionClass=this.getPositionClass();this.counter=4;this.usedPositions=[];this.$element.attr({'aria-hidden':'true','data-yeti-box':$id,'data-resize':$id,'aria-labelledby':this.$anchor[0].id||Foundation.GetYoDigits(6,'dd-anchor')});this._events();}/**
   * Helper function to determine current orientation of dropdown pane.
   * @function
   * @returns {String} position - string value of a position class.
   */},{key:'getPositionClass',value:function getPositionClass(){var verticalPosition=this.$element[0].className.match(/(top|left|right|bottom)/g);verticalPosition=verticalPosition?verticalPosition[0]:'';var horizontalPosition=/float-(\S+)\s/.exec(this.$anchor[0].className);horizontalPosition=horizontalPosition?horizontalPosition[1]:'';var position=horizontalPosition?horizontalPosition+' '+verticalPosition:verticalPosition;return position;}/**
   * Adjusts the dropdown panes orientation by adding/removing positioning classes.
   * @function
   * @private
   * @param {String} position - position class to remove.
   */},{key:'_reposition',value:function _reposition(position){this.usedPositions.push(position?position:'bottom');//default, try switching to opposite side
if(!position&&this.usedPositions.indexOf('top')<0){this.$element.addClass('top');}else if(position==='top'&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}else if(position==='left'&&this.usedPositions.indexOf('right')<0){this.$element.removeClass(position).addClass('right');}else if(position==='right'&&this.usedPositions.indexOf('left')<0){this.$element.removeClass(position).addClass('left');}//if default change didn't work, try bottom or left first
else if(!position&&this.usedPositions.indexOf('top')>-1&&this.usedPositions.indexOf('left')<0){this.$element.addClass('left');}else if(position==='top'&&this.usedPositions.indexOf('bottom')>-1&&this.usedPositions.indexOf('left')<0){this.$element.removeClass(position).addClass('left');}else if(position==='left'&&this.usedPositions.indexOf('right')>-1&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}else if(position==='right'&&this.usedPositions.indexOf('left')>-1&&this.usedPositions.indexOf('bottom')<0){this.$element.removeClass(position);}//if nothing cleared, set to bottom
else{this.$element.removeClass(position);}this.classChanged=true;this.counter--;}/**
   * Sets the position and orientation of the dropdown pane, checks for collisions.
   * Recursively calls itself if a collision is detected, with a new position class.
   * @function
   * @private
   */},{key:'_setPosition',value:function _setPosition(){if(this.$anchor.attr('aria-expanded')==='false'){return false;}var position=this.getPositionClass(),$eleDims=Foundation.Box.GetDimensions(this.$element),$anchorDims=Foundation.Box.GetDimensions(this.$anchor),_this=this,direction=position==='left'?'left':position==='right'?'left':'top',param=direction==='top'?'height':'width',offset=param==='height'?this.options.vOffset:this.options.hOffset;if($eleDims.width>=$eleDims.windowDims.width||!this.counter&&!Foundation.Box.ImNotTouchingYou(this.$element)){this.$element.offset(Foundation.Box.GetOffsets(this.$element,this.$anchor,'center bottom',this.options.vOffset,this.options.hOffset,true)).css({'width':$eleDims.windowDims.width-this.options.hOffset*2,'height':'auto'});this.classChanged=true;return false;}this.$element.offset(Foundation.Box.GetOffsets(this.$element,this.$anchor,position,this.options.vOffset,this.options.hOffset));while(!Foundation.Box.ImNotTouchingYou(this.$element,false,true)&&this.counter){this._reposition(position);this._setPosition();}}/**
   * Adds event listeners to the element utilizing the triggers utility library.
   * @function
   * @private
   */},{key:'_events',value:function _events(){var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':this._setPosition.bind(this)});if(this.options.hover){this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.open();_this.$anchor.data('hover',true);},_this.options.hoverDelay);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchor.data('hover',false);},_this.options.hoverDelay);});if(this.options.hoverPane){this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown',function(){clearTimeout(_this.timeout);}).on('mouseleave.zf.dropdown',function(){clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.close();_this.$anchor.data('hover',false);},_this.options.hoverDelay);});}}this.$anchor.add(this.$element).on('keydown.zf.dropdown',function(e){var $target=$(this),visibleFocusableElements=Foundation.Keyboard.findFocusable(_this.$element);Foundation.Keyboard.handleKey(e,'Dropdown',{tab_forward:function tab_forward(){if(_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))){// left modal downwards, setting focus to first element
if(_this.options.trapFocus){// if focus shall be trapped
visibleFocusableElements.eq(0).focus();e.preventDefault();}else{// if focus is not trapped, close dropdown on focus out
_this.close();}}},tab_backward:function tab_backward(){if(_this.$element.find(':focus').is(visibleFocusableElements.eq(0))||_this.$element.is(':focus')){// left modal upwards, setting focus to last element
if(_this.options.trapFocus){// if focus shall be trapped
visibleFocusableElements.eq(-1).focus();e.preventDefault();}else{// if focus is not trapped, close dropdown on focus out
_this.close();}}},open:function open(){if($target.is(_this.$anchor)){_this.open();_this.$element.attr('tabindex',-1).focus();e.preventDefault();}},close:function close(){_this.close();_this.$anchor.focus();}});});}/**
   * Adds an event handler to the body to close any dropdowns on a click.
   * @function
   * @private
   */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=$(document.body).not(this.$element),_this=this;$body.off('click.zf.dropdown').on('click.zf.dropdown',function(e){if(_this.$anchor.is(e.target)||_this.$anchor.find(e.target).length){return;}if(_this.$element.find(e.target).length){return;}_this.close();$body.off('click.zf.dropdown');});}/**
   * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
   * @function
   * @fires Dropdown#closeme
   * @fires Dropdown#show
   */},{key:'open',value:function open(){// var _this = this;
/**
     * Fires to close other open dropdowns
     * @event Dropdown#closeme
     */this.$element.trigger('closeme.zf.dropdown',this.$element.attr('id'));this.$anchor.addClass('hover').attr({'aria-expanded':true});// this.$element/*.show()*/;
this._setPosition();this.$element.addClass('is-open').attr({'aria-hidden':false});if(this.options.autoFocus){var $focusable=Foundation.Keyboard.findFocusable(this.$element);if($focusable.length){$focusable.eq(0).focus();}}if(this.options.closeOnClick){this._addBodyHandler();}/**
     * Fires once the dropdown is visible.
     * @event Dropdown#show
     */this.$element.trigger('show.zf.dropdown',[this.$element]);}/**
   * Closes the open dropdown pane.
   * @function
   * @fires Dropdown#hide
   */},{key:'close',value:function close(){if(!this.$element.hasClass('is-open')){return false;}this.$element.removeClass('is-open').attr({'aria-hidden':true});this.$anchor.removeClass('hover').attr('aria-expanded',false);if(this.classChanged){var curPositionClass=this.getPositionClass();if(curPositionClass){this.$element.removeClass(curPositionClass);}this.$element.addClass(this.options.positionClass)/*.hide()*/.css({height:'',width:''});this.classChanged=false;this.counter=4;this.usedPositions.length=0;}this.$element.trigger('hide.zf.dropdown',[this.$element]);}/**
   * Toggles the dropdown pane's visibility.
   * @function
   */},{key:'toggle',value:function toggle(){if(this.$element.hasClass('is-open')){if(this.$anchor.data('hover'))return;this.close();}else{this.open();}}/**
   * Destroys the dropdown.
   * @function
   */},{key:'destroy',value:function destroy(){this.$element.off('.zf.trigger').hide();this.$anchor.off('.zf.dropdown');Foundation.unregisterPlugin(this);}}]);return Dropdown;}();Dropdown.defaults={/**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @example 250
   */hoverDelay:250,/**
   * Allow submenus to open on hover events
   * @option
   * @example false
   */hover:false,/**
   * Don't close dropdown when hovering over dropdown pane
   * @option
   * @example true
   */hoverPane:false,/**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @example 1
   */vOffset:1,/**
   * Number of pixels between the dropdown pane and the triggering element on open.
   * @option
   * @example 1
   */hOffset:1,/**
   * Class applied to adjust open position. JS will test and fill this in.
   * @option
   * @example 'top'
   */positionClass:'',/**
   * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
   * @option
   * @example false
   */trapFocus:false,/**
   * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
   * @option
   * @example true
   */autoFocus:false,/**
   * Allows a click on the body to close the dropdown.
   * @option
   * @example false
   */closeOnClick:false};// Window exports
Foundation.plugin(Dropdown,'Dropdown');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * DropdownMenu module.
 * @module foundation.dropdown-menu
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.nest
 */var DropdownMenu=function(){/**
   * Creates a new instance of DropdownMenu.
   * @class
   * @fires DropdownMenu#init
   * @param {jQuery} element - jQuery object to make into a dropdown menu.
   * @param {Object} options - Overrides to the default plugin settings.
   */function DropdownMenu(element,options){_classCallCheck(this,DropdownMenu);this.$element=element;this.options=$.extend({},DropdownMenu.defaults,this.$element.data(),options);Foundation.Nest.Feather(this.$element,'dropdown');this._init();Foundation.registerPlugin(this,'DropdownMenu');Foundation.Keyboard.register('DropdownMenu',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'up','ARROW_DOWN':'down','ARROW_LEFT':'previous','ESCAPE':'close'});}/**
   * Initializes the plugin, and calls _prepareMenu
   * @private
   * @function
   */_createClass(DropdownMenu,[{key:'_init',value:function _init(){var subs=this.$element.find('li.is-dropdown-submenu-parent');this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');this.$menuItems=this.$element.find('[role="menuitem"]');this.$tabs=this.$element.children('[role="menuitem"]');this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);if(this.$element.hasClass(this.options.rightClass)||this.options.alignment==='right'||Foundation.rtl()||this.$element.parents('.top-bar-right').is('*')){this.options.alignment='right';subs.addClass('opens-left');}else{subs.addClass('opens-right');}this.changed=false;this._events();}},{key:'_events',/**
   * Adds event listeners to elements within the menu
   * @private
   * @function
   */value:function _events(){var _this=this,hasTouch='ontouchstart'in window||typeof window.ontouchstart!=='undefined',parClass='is-dropdown-submenu-parent';// used for onClick and in the keyboard handlers
var handleClickFn=function handleClickFn(e){var $elem=$(e.target).parentsUntil('ul','.'+parClass),hasSub=$elem.hasClass(parClass),hasClicked=$elem.attr('data-is-click')==='true',$sub=$elem.children('.is-dropdown-submenu');if(hasSub){if(hasClicked){if(!_this.options.closeOnClick||!_this.options.clickOpen&&!hasTouch||_this.options.forceFollow&&hasTouch){return;}else{e.stopImmediatePropagation();e.preventDefault();_this._hide($elem);}}else{e.preventDefault();e.stopImmediatePropagation();_this._show($elem.children('.is-dropdown-submenu'));$elem.add($elem.parentsUntil(_this.$element,'.'+parClass)).attr('data-is-click',true);}}else{return;}};if(this.options.clickOpen||hasTouch){this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu',handleClickFn);}if(!this.options.disableHover){this.$menuItems.on('mouseenter.zf.dropdownmenu',function(e){var $elem=$(this),hasSub=$elem.hasClass(parClass);if(hasSub){clearTimeout(_this.delay);_this.delay=setTimeout(function(){_this._show($elem.children('.is-dropdown-submenu'));},_this.options.hoverDelay);}}).on('mouseleave.zf.dropdownmenu',function(e){var $elem=$(this),hasSub=$elem.hasClass(parClass);if(hasSub&&_this.options.autoclose){if($elem.attr('data-is-click')==='true'&&_this.options.clickOpen){return false;}clearTimeout(_this.delay);_this.delay=setTimeout(function(){_this._hide($elem);},_this.options.closingTime);}});}this.$menuItems.on('keydown.zf.dropdownmenu',function(e){var $element=$(e.target).parentsUntil('ul','[role="menuitem"]'),isTab=_this.$tabs.index($element)>-1,$elements=isTab?_this.$tabs:$element.siblings('li').add($element),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){$prevElement=$elements.eq(i-1);$nextElement=$elements.eq(i+1);return;}});var nextSibling=function nextSibling(){if(!$element.is(':last-child')){$nextElement.children('a:first').focus();e.preventDefault();}},prevSibling=function prevSibling(){$prevElement.children('a:first').focus();e.preventDefault();},openSub=function openSub(){var $sub=$element.children('ul.is-dropdown-submenu');if($sub.length){_this._show($sub);$element.find('li > a:first').focus();e.preventDefault();}else{return;}},closeSub=function closeSub(){//if ($element.is(':first-child')) {
var close=$element.parent('ul').parent('li');close.children('a:first').focus();_this._hide(close);e.preventDefault();//}
};var functions={open:openSub,close:function close(){_this._hide(_this.$element);_this.$menuItems.find('a:first').focus();// focus to first element
e.preventDefault();},handled:function handled(){e.stopImmediatePropagation();}};if(isTab){if(_this.$element.hasClass(_this.options.verticalClass)){// vertical menu
if(_this.options.alignment==='left'){// left aligned
$.extend(functions,{down:nextSibling,up:prevSibling,next:openSub,previous:closeSub});}else{// right aligned
$.extend(functions,{down:nextSibling,up:prevSibling,next:closeSub,previous:openSub});}}else{// horizontal menu
$.extend(functions,{next:nextSibling,previous:prevSibling,down:openSub,up:closeSub});}}else{// not tabs -> one sub
if(_this.options.alignment==='left'){// left aligned
$.extend(functions,{next:openSub,previous:closeSub,down:nextSibling,up:prevSibling});}else{// right aligned
$.extend(functions,{next:closeSub,previous:openSub,down:nextSibling,up:prevSibling});}}Foundation.Keyboard.handleKey(e,'DropdownMenu',functions);});}/**
   * Adds an event handler to the body to close any dropdowns on a click.
   * @function
   * @private
   */},{key:'_addBodyHandler',value:function _addBodyHandler(){var $body=$(document.body),_this=this;$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu',function(e){var $link=_this.$element.find(e.target);if($link.length){return;}_this._hide();$body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');});}/**
   * Opens a dropdown pane, and checks for collisions first.
   * @param {jQuery} $sub - ul element that is a submenu to show
   * @function
   * @private
   * @fires DropdownMenu#show
   */},{key:'_show',value:function _show($sub){var idx=this.$tabs.index(this.$tabs.filter(function(i,el){return $(el).find($sub).length>0;}));var $sibs=$sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');this._hide($sibs,idx);$sub.css('visibility','hidden').addClass('js-dropdown-active').attr({'aria-hidden':false}).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({'aria-expanded':true});var clear=Foundation.Box.ImNotTouchingYou($sub,null,true);if(!clear){var oldClass=this.options.alignment==='left'?'-right':'-left',$parentLi=$sub.parent('.is-dropdown-submenu-parent');$parentLi.removeClass('opens'+oldClass).addClass('opens-'+this.options.alignment);clear=Foundation.Box.ImNotTouchingYou($sub,null,true);if(!clear){$parentLi.removeClass('opens-'+this.options.alignment).addClass('opens-inner');}this.changed=true;}$sub.css('visibility','');if(this.options.closeOnClick){this._addBodyHandler();}/**
     * Fires when the new dropdown pane is visible.
     * @event DropdownMenu#show
     */this.$element.trigger('show.zf.dropdownmenu',[$sub]);}/**
   * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
   * @function
   * @param {jQuery} $elem - element with a submenu to hide
   * @param {Number} idx - index of the $tabs collection to hide
   * @private
   */},{key:'_hide',value:function _hide($elem,idx){var $toClose;if($elem&&$elem.length){$toClose=$elem;}else if(idx!==undefined){$toClose=this.$tabs.not(function(i,el){return i===idx;});}else{$toClose=this.$element;}var somethingToClose=$toClose.hasClass('is-active')||$toClose.find('.is-active').length>0;if(somethingToClose){$toClose.find('li.is-active').add($toClose).attr({'aria-expanded':false,'data-is-click':false}).removeClass('is-active');$toClose.find('ul.js-dropdown-active').attr({'aria-hidden':true}).removeClass('js-dropdown-active');if(this.changed||$toClose.find('opens-inner').length){var oldClass=this.options.alignment==='left'?'right':'left';$toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-'+this.options.alignment).addClass('opens-'+oldClass);this.changed=false;}/**
       * Fires when the open menus are closed.
       * @event DropdownMenu#hide
       */this.$element.trigger('hide.zf.dropdownmenu',[$toClose]);}}/**
   * Destroys the plugin.
   * @function
   */},{key:'destroy',value:function destroy(){this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');$(document.body).off('.zf.dropdownmenu');Foundation.Nest.Burn(this.$element,'dropdown');Foundation.unregisterPlugin(this);}}]);return DropdownMenu;}();/**
 * Default settings for plugin
 */DropdownMenu.defaults={/**
   * Disallows hover events from opening submenus
   * @option
   * @example false
   */disableHover:false,/**
   * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
   * @option
   * @example true
   */autoclose:true,/**
   * Amount of time to delay opening a submenu on hover event.
   * @option
   * @example 50
   */hoverDelay:50,/**
   * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
   * @option
   * @example true
   */clickOpen:false,/**
   * Amount of time to delay closing a submenu on a mouseleave event.
   * @option
   * @example 500
   */closingTime:500,/**
   * Position of the menu relative to what direction the submenus should open. Handled by JS.
   * @option
   * @example 'left'
   */alignment:'left',/**
   * Allow clicks on the body to close any open submenus.
   * @option
   * @example true
   */closeOnClick:true,/**
   * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
   * @option
   * @example 'vertical'
   */verticalClass:'vertical',/**
   * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
   * @option
   * @example 'align-right'
   */rightClass:'align-right',/**
   * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
   * @option
   * @example false
   */forceFollow:true};// Window exports
Foundation.plugin(DropdownMenu,'DropdownMenu');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Equalizer module.
 * @module foundation.equalizer
 */var Equalizer=function(){/**
   * Creates a new instance of Equalizer.
   * @class
   * @fires Equalizer#init
   * @param {Object} element - jQuery object to add the trigger to.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Equalizer(element,options){_classCallCheck(this,Equalizer);this.$element=element;this.options=$.extend({},Equalizer.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Equalizer');}/**
   * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
   * @private
   */_createClass(Equalizer,[{key:'_init',value:function _init(){var eqId=this.$element.attr('data-equalizer')||'';var $watched=this.$element.find('[data-equalizer-watch="'+eqId+'"]');this.$watched=$watched.length?$watched:this.$element.find('[data-equalizer-watch]');this.$element.attr('data-resize',eqId||Foundation.GetYoDigits(6,'eq'));this.hasNested=this.$element.find('[data-equalizer]').length>0;this.isNested=this.$element.parentsUntil(document.body,'[data-equalizer]').length>0;this.isOn=false;this._bindHandler={onResizeMeBound:this._onResizeMe.bind(this),onPostEqualizedBound:this._onPostEqualized.bind(this)};var imgs=this.$element.find('img');var tooSmall;if(this.options.equalizeOn){tooSmall=this._checkMQ();$(window).on('changed.zf.mediaquery',this._checkMQ.bind(this));}else{this._events();}if(tooSmall!==undefined&&tooSmall===false||tooSmall===undefined){if(imgs.length){Foundation.onImagesLoaded(imgs,this._reflow.bind(this));}else{this._reflow();}}}/**
   * Removes event listeners if the breakpoint is too small.
   * @private
   */},{key:'_pauseEvents',value:function _pauseEvents(){this.isOn=false;this.$element.off({'.zf.equalizer':this._bindHandler.onPostEqualizedBound,'resizeme.zf.trigger':this._bindHandler.onResizeMeBound});}/**
   * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
   * @private
   */},{key:'_onResizeMe',value:function _onResizeMe(e){this._reflow();}/**
   * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
   * @private
   */},{key:'_onPostEqualized',value:function _onPostEqualized(e){if(e.target!==this.$element[0]){this._reflow();}}/**
   * Initializes events for Equalizer.
   * @private
   */},{key:'_events',value:function _events(){var _this=this;this._pauseEvents();if(this.hasNested){this.$element.on('postequalized.zf.equalizer',this._bindHandler.onPostEqualizedBound);}else{this.$element.on('resizeme.zf.trigger',this._bindHandler.onResizeMeBound);}this.isOn=true;}/**
   * Checks the current breakpoint to the minimum required size.
   * @private
   */},{key:'_checkMQ',value:function _checkMQ(){var tooSmall=!Foundation.MediaQuery.atLeast(this.options.equalizeOn);if(tooSmall){if(this.isOn){this._pauseEvents();this.$watched.css('height','auto');}}else{if(!this.isOn){this._events();}}return tooSmall;}/**
   * A noop version for the plugin
   * @private
   */},{key:'_killswitch',value:function _killswitch(){return;}/**
   * Calls necessary functions to update Equalizer upon DOM change
   * @private
   */},{key:'_reflow',value:function _reflow(){if(!this.options.equalizeOnStack){if(this._isStacked()){this.$watched.css('height','auto');return false;}}if(this.options.equalizeByRow){this.getHeightsByRow(this.applyHeightByRow.bind(this));}else{this.getHeights(this.applyHeight.bind(this));}}/**
   * Manually determines if the first 2 elements are *NOT* stacked.
   * @private
   */},{key:'_isStacked',value:function _isStacked(){return this.$watched[0].getBoundingClientRect().top!==this.$watched[1].getBoundingClientRect().top;}/**
   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
   * @param {Function} cb - A non-optional callback to return the heights array to.
   * @returns {Array} heights - An array of heights of children within Equalizer container
   */},{key:'getHeights',value:function getHeights(cb){var heights=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';heights.push(this.$watched[i].offsetHeight);}cb(heights);}/**
   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
   * @param {Function} cb - A non-optional callback to return the heights array to.
   * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
   */},{key:'getHeightsByRow',value:function getHeightsByRow(cb){var lastElTopOffset=this.$watched.length?this.$watched.first().offset().top:0,groups=[],group=0;//group by Row
groups[group]=[];for(var i=0,len=this.$watched.length;i<len;i++){this.$watched[i].style.height='auto';//maybe could use this.$watched[i].offsetTop
var elOffsetTop=$(this.$watched[i]).offset().top;if(elOffsetTop!=lastElTopOffset){group++;groups[group]=[];lastElTopOffset=elOffsetTop;}groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);}for(var j=0,ln=groups.length;j<ln;j++){var heights=$(groups[j]).map(function(){return this[1];}).get();var max=Math.max.apply(null,heights);groups[j].push(max);}cb(groups);}/**
   * Changes the CSS height property of each child in an Equalizer parent to match the tallest
   * @param {array} heights - An array of heights of children within Equalizer container
   * @fires Equalizer#preequalized
   * @fires Equalizer#postequalized
   */},{key:'applyHeight',value:function applyHeight(heights){var max=Math.max.apply(null,heights);/**
     * Fires before the heights are applied
     * @event Equalizer#preequalized
     */this.$element.trigger('preequalized.zf.equalizer');this.$watched.css('height',max);/**
     * Fires when the heights have been applied
     * @event Equalizer#postequalized
     */this.$element.trigger('postequalized.zf.equalizer');}/**
   * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
   * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
   * @fires Equalizer#preequalized
   * @fires Equalizer#preequalizedRow
   * @fires Equalizer#postequalizedRow
   * @fires Equalizer#postequalized
   */},{key:'applyHeightByRow',value:function applyHeightByRow(groups){/**
     * Fires before the heights are applied
     */this.$element.trigger('preequalized.zf.equalizer');for(var i=0,len=groups.length;i<len;i++){var groupsILength=groups[i].length,max=groups[i][groupsILength-1];if(groupsILength<=2){$(groups[i][0][0]).css({'height':'auto'});continue;}/**
        * Fires before the heights per row are applied
        * @event Equalizer#preequalizedRow
        */this.$element.trigger('preequalizedrow.zf.equalizer');for(var j=0,lenJ=groupsILength-1;j<lenJ;j++){$(groups[i][j][0]).css({'height':max});}/**
        * Fires when the heights per row have been applied
        * @event Equalizer#postequalizedRow
        */this.$element.trigger('postequalizedrow.zf.equalizer');}/**
     * Fires when the heights have been applied
     */this.$element.trigger('postequalized.zf.equalizer');}/**
   * Destroys an instance of Equalizer.
   * @function
   */},{key:'destroy',value:function destroy(){this._pauseEvents();this.$watched.css('height','auto');Foundation.unregisterPlugin(this);}}]);return Equalizer;}();/**
 * Default settings for plugin
 */Equalizer.defaults={/**
   * Enable height equalization when stacked on smaller screens.
   * @option
   * @example true
   */equalizeOnStack:true,/**
   * Enable height equalization row by row.
   * @option
   * @example false
   */equalizeByRow:false,/**
   * String representing the minimum breakpoint size the plugin should equalize heights on.
   * @option
   * @example 'medium'
   */equalizeOn:''};// Window exports
Foundation.plugin(Equalizer,'Equalizer');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Interchange module.
 * @module foundation.interchange
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.timerAndImageLoader
 */var Interchange=function(){/**
   * Creates a new instance of Interchange.
   * @class
   * @fires Interchange#init
   * @param {Object} element - jQuery object to add the trigger to.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Interchange(element,options){_classCallCheck(this,Interchange);this.$element=element;this.options=$.extend({},Interchange.defaults,options);this.rules=[];this.currentPath='';this._init();this._events();Foundation.registerPlugin(this,'Interchange');}/**
   * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
   * @function
   * @private
   */_createClass(Interchange,[{key:'_init',value:function _init(){this._addBreakpoints();this._generateRules();this._reflow();}/**
   * Initializes events for Interchange.
   * @function
   * @private
   */},{key:'_events',value:function _events(){$(window).on('resize.zf.interchange',Foundation.util.throttle(this._reflow.bind(this),50));}/**
   * Calls necessary functions to update Interchange upon DOM change
   * @function
   * @private
   */},{key:'_reflow',value:function _reflow(){var match;// Iterate through each rule, but only save the last match
for(var i in this.rules){if(this.rules.hasOwnProperty(i)){var rule=this.rules[i];if(window.matchMedia(rule.query).matches){match=rule;}}}if(match){this.replace(match.path);}}/**
   * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
   * @function
   * @private
   */},{key:'_addBreakpoints',value:function _addBreakpoints(){for(var i in Foundation.MediaQuery.queries){if(Foundation.MediaQuery.queries.hasOwnProperty(i)){var query=Foundation.MediaQuery.queries[i];Interchange.SPECIAL_QUERIES[query.name]=query.value;}}}/**
   * Checks the Interchange element for the provided media query + content pairings
   * @function
   * @private
   * @param {Object} element - jQuery object that is an Interchange instance
   * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
   */},{key:'_generateRules',value:function _generateRules(element){var rulesList=[];var rules;if(this.options.rules){rules=this.options.rules;}else{rules=this.$element.data('interchange').match(/\[.*?\]/g);}for(var i in rules){if(rules.hasOwnProperty(i)){var rule=rules[i].slice(1,-1).split(', ');var path=rule.slice(0,-1).join('');var query=rule[rule.length-1];if(Interchange.SPECIAL_QUERIES[query]){query=Interchange.SPECIAL_QUERIES[query];}rulesList.push({path:path,query:query});}}this.rules=rulesList;}/**
   * Update the `src` property of an image, or change the HTML of a container, to the specified path.
   * @function
   * @param {String} path - Path to the image or HTML partial.
   * @fires Interchange#replaced
   */},{key:'replace',value:function replace(path){if(this.currentPath===path)return;var _this=this,trigger='replaced.zf.interchange';// Replacing images
if(this.$element[0].nodeName==='IMG'){this.$element.attr('src',path).load(function(){_this.currentPath=path;}).trigger(trigger);}// Replacing background images
else if(path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)){this.$element.css({'background-image':'url('+path+')'}).trigger(trigger);}// Replacing HTML
else{$.get(path,function(response){_this.$element.html(response).trigger(trigger);$(response).foundation();_this.currentPath=path;});}/**
     * Fires when content in an Interchange element is done being loaded.
     * @event Interchange#replaced
     */// this.$element.trigger('replaced.zf.interchange');
}/**
   * Destroys an instance of interchange.
   * @function
   */},{key:'destroy',value:function destroy(){//TODO this.
}}]);return Interchange;}();/**
 * Default settings for plugin
 */Interchange.defaults={/**
   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
   * @option
   */rules:null};Interchange.SPECIAL_QUERIES={'landscape':'screen and (orientation: landscape)','portrait':'screen and (orientation: portrait)','retina':'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'};// Window exports
Foundation.plugin(Interchange,'Interchange');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Magellan module.
 * @module foundation.magellan
 */var Magellan=function(){/**
   * Creates a new instance of Magellan.
   * @class
   * @fires Magellan#init
   * @param {Object} element - jQuery object to add the trigger to.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Magellan(element,options){_classCallCheck(this,Magellan);this.$element=element;this.options=$.extend({},Magellan.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Magellan');}/**
   * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
   * @private
   */_createClass(Magellan,[{key:'_init',value:function _init(){var id=this.$element[0].id||Foundation.GetYoDigits(6,'magellan');var _this=this;this.$targets=$('[data-magellan-target]');this.$links=this.$element.find('a');this.$element.attr({'data-resize':id,'data-scroll':id,'id':id});this.$active=$();this.scrollPos=parseInt(window.pageYOffset,10);this._events();}/**
   * Calculates an array of pixel values that are the demarcation lines between locations on the page.
   * Can be invoked if new elements are added or the size of a location changes.
   * @function
   */},{key:'calcPoints',value:function calcPoints(){var _this=this,body=document.body,html=document.documentElement;this.points=[];this.winHeight=Math.round(Math.max(window.innerHeight,html.clientHeight));this.docHeight=Math.round(Math.max(body.scrollHeight,body.offsetHeight,html.clientHeight,html.scrollHeight,html.offsetHeight));this.$targets.each(function(){var $tar=$(this),pt=Math.round($tar.offset().top-_this.options.threshold);$tar.targetPoint=pt;_this.points.push(pt);});}/**
   * Initializes events for Magellan.
   * @private
   */},{key:'_events',value:function _events(){var _this=this,$body=$('html, body'),opts={duration:_this.options.animationDuration,easing:_this.options.animationEasing};$(window).one('load',function(){if(_this.options.deepLinking){if(location.hash){_this.scrollToLoc(location.hash);}}_this.calcPoints();_this._updateActive();});this.$element.on({'resizeme.zf.trigger':this.reflow.bind(this),'scrollme.zf.trigger':this._updateActive.bind(this)}).on('click.zf.magellan','a[href^="#"]',function(e){e.preventDefault();var arrival=this.getAttribute('href');_this.scrollToLoc(arrival);});}/**
   * Function to scroll to a given location on the page.
   * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
   * @function
   */},{key:'scrollToLoc',value:function scrollToLoc(loc){var scrollPos=Math.round($(loc).offset().top-this.options.threshold/2-this.options.barOffset);$('html, body').stop(true).animate({scrollTop:scrollPos},this.options.animationDuration,this.options.animationEasing);}/**
   * Calls necessary functions to update Magellan upon DOM change
   * @function
   */},{key:'reflow',value:function reflow(){this.calcPoints();this._updateActive();}/**
   * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
   * @private
   * @function
   * @fires Magellan#update
   */},{key:'_updateActive',value:function _updateActive()/*evt, elem, scrollPos*/{var winPos=/*scrollPos ||*/parseInt(window.pageYOffset,10),curIdx;if(winPos+this.winHeight===this.docHeight){curIdx=this.points.length-1;}else if(winPos<this.points[0]){curIdx=0;}else{var isDown=this.scrollPos<winPos,_this=this,curVisible=this.points.filter(function(p,i){return isDown?p-_this.options.barOffset<=winPos:p-_this.options.barOffset-_this.options.threshold<=winPos;});curIdx=curVisible.length?curVisible.length-1:0;}this.$active.removeClass(this.options.activeClass);this.$active=this.$links.eq(curIdx).addClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}this.scrollPos=winPos;/**
     * Fires when magellan is finished updating to the new active element.
     * @event Magellan#update
     */this.$element.trigger('update.zf.magellan',[this.$active]);}/**
   * Destroys an instance of Magellan and resets the url of the window.
   * @function
   */},{key:'destroy',value:function destroy(){this.$element.off('.zf.trigger .zf.magellan').find('.'+this.options.activeClass).removeClass(this.options.activeClass);if(this.options.deepLinking){var hash=this.$active[0].getAttribute('href');window.location.hash.replace(hash,'');}Foundation.unregisterPlugin(this);}}]);return Magellan;}();/**
 * Default settings for plugin
 */Magellan.defaults={/**
   * Amount of time, in ms, the animated scrolling should take between locations.
   * @option
   * @example 500
   */animationDuration:500,/**
   * Animation style to use when scrolling between locations.
   * @option
   * @example 'ease-in-out'
   */animationEasing:'linear',/**
   * Number of pixels to use as a marker for location changes.
   * @option
   * @example 50
   */threshold:50,/**
   * Class applied to the active locations link on the magellan container.
   * @option
   * @example 'active'
   */activeClass:'active',/**
   * Allows the script to manipulate the url of the current page, and if supported, alter the history.
   * @option
   * @example true
   */deepLinking:false,/**
   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
   * @option
   * @example 25
   */barOffset:0};// Window exports
Foundation.plugin(Magellan,'Magellan');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * OffCanvas module.
 * @module foundation.offcanvas
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.triggers
 * @requires foundation.util.motion
 */var OffCanvas=function(){/**
   * Creates a new instance of an off-canvas wrapper.
   * @class
   * @fires OffCanvas#init
   * @param {Object} element - jQuery object to initialize.
   * @param {Object} options - Overrides to the default plugin settings.
   */function OffCanvas(element,options){_classCallCheck(this,OffCanvas);this.$element=element;this.options=$.extend({},OffCanvas.defaults,this.$element.data(),options);this.$lastTrigger=$();this.$triggers=$();this._init();this._events();Foundation.registerPlugin(this,'OffCanvas');}/**
   * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
   * @function
   * @private
   */_createClass(OffCanvas,[{key:'_init',value:function _init(){var id=this.$element.attr('id');this.$element.attr('aria-hidden','true');// Find triggers that affect this element and add aria-expanded to them
this.$triggers=$(document).find('[data-open="'+id+'"], [data-close="'+id+'"], [data-toggle="'+id+'"]').attr('aria-expanded','false').attr('aria-controls',id);// Add a close trigger over the body if necessary
if(this.options.closeOnClick){if($('.js-off-canvas-exit').length){this.$exiter=$('.js-off-canvas-exit');}else{var exiter=document.createElement('div');exiter.setAttribute('class','js-off-canvas-exit');$('[data-off-canvas-content]').append(exiter);this.$exiter=$(exiter);}}this.options.isRevealed=this.options.isRevealed||new RegExp(this.options.revealClass,'g').test(this.$element[0].className);if(this.options.isRevealed){this.options.revealOn=this.options.revealOn||this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];this._setMQChecker();}if(!this.options.transitionTime){this.options.transitionTime=parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration)*1000;}}/**
   * Adds event handlers to the off-canvas wrapper and the exit overlay.
   * @function
   * @private
   */},{key:'_events',value:function _events(){this.$element.off('.zf.trigger .zf.offcanvas').on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':this.close.bind(this),'toggle.zf.trigger':this.toggle.bind(this),'keydown.zf.offcanvas':this._handleKeyboard.bind(this)});if(this.options.closeOnClick&&this.$exiter.length){this.$exiter.on({'click.zf.offcanvas':this.close.bind(this)});}}/**
   * Applies event listener for elements that will reveal at certain breakpoints.
   * @private
   */},{key:'_setMQChecker',value:function _setMQChecker(){var _this=this;$(window).on('changed.zf.mediaquery',function(){if(Foundation.MediaQuery.atLeast(_this.options.revealOn)){_this.reveal(true);}else{_this.reveal(false);}}).one('load.zf.offcanvas',function(){if(Foundation.MediaQuery.atLeast(_this.options.revealOn)){_this.reveal(true);}});}/**
   * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
   * @param {Boolean} isRevealed - true if element should be revealed.
   * @function
   */},{key:'reveal',value:function reveal(isRevealed){var $closer=this.$element.find('[data-close]');if(isRevealed){this.close();this.isRevealed=true;// if (!this.options.forceTop) {
//   var scrollPos = parseInt(window.pageYOffset);
//   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
// }
// if (this.options.isSticky) { this._stick(); }
this.$element.off('open.zf.trigger toggle.zf.trigger');if($closer.length){$closer.hide();}}else{this.isRevealed=false;// if (this.options.isSticky || !this.options.forceTop) {
//   this.$element[0].style.transform = '';
//   $(window).off('scroll.zf.offcanvas');
// }
this.$element.on({'open.zf.trigger':this.open.bind(this),'toggle.zf.trigger':this.toggle.bind(this)});if($closer.length){$closer.show();}}}/**
   * Opens the off-canvas menu.
   * @function
   * @param {Object} event - Event object passed from listener.
   * @param {jQuery} trigger - element that triggered the off-canvas to open.
   * @fires OffCanvas#opened
   */},{key:'open',value:function open(event,trigger){if(this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this,$body=$(document.body);if(this.options.forceTop){$('body').scrollTop(0);}// window.pageYOffset = 0;
// if (!this.options.forceTop) {
//   var scrollPos = parseInt(window.pageYOffset);
//   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
//   if (this.$exiter.length) {
//     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';
//   }
// }
/**
     * Fires when the off-canvas menu opens.
     * @event OffCanvas#opened
     */Foundation.Move(this.options.transitionTime,this.$element,function(){$('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-'+_this.options.position);_this.$element.addClass('is-open');// if (_this.options.isSticky) {
//   _this._stick();
// }
});this.$triggers.attr('aria-expanded','true');this.$element.attr('aria-hidden','false').trigger('opened.zf.offcanvas');if(this.options.closeOnClick){this.$exiter.addClass('is-visible');}if(trigger){this.$lastTrigger=trigger;}if(this.options.autoFocus){this.$element.one(Foundation.transitionend(this.$element),function(){_this.$element.find('a, button').eq(0).focus();});}if(this.options.trapFocus){$('[data-off-canvas-content]').attr('tabindex','-1');this._trapFocus();}}/**
   * Traps focus within the offcanvas on open.
   * @private
   */},{key:'_trapFocus',value:function _trapFocus(){var focusable=Foundation.Keyboard.findFocusable(this.$element),first=focusable.eq(0),last=focusable.eq(-1);focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas',function(e){if(e.which===9||e.keycode===9){if(e.target===last[0]&&!e.shiftKey){e.preventDefault();first.focus();}if(e.target===first[0]&&e.shiftKey){e.preventDefault();last.focus();}}});}/**
   * Allows the offcanvas to appear sticky utilizing translate properties.
   * @private
   */// OffCanvas.prototype._stick = function() {
//   var elStyle = this.$element[0].style;
//
//   if (this.options.closeOnClick) {
//     var exitStyle = this.$exiter[0].style;
//   }
//
//   $(window).on('scroll.zf.offcanvas', function(e) {
//     console.log(e);
//     var pageY = window.pageYOffset;
//     elStyle.transform = 'translate(0,' + pageY + 'px)';
//     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }
//   });
//   // this.$element.trigger('stuck.zf.offcanvas');
// };
/**
   * Closes the off-canvas menu.
   * @function
   * @param {Function} cb - optional cb to fire after closure.
   * @fires OffCanvas#closed
   */},{key:'close',value:function close(cb){if(!this.$element.hasClass('is-open')||this.isRevealed){return;}var _this=this;//  Foundation.Move(this.options.transitionTime, this.$element, function() {
$('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-'+_this.options.position);_this.$element.removeClass('is-open');// Foundation._reflow();
// });
this.$element.attr('aria-hidden','true')/**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */.trigger('closed.zf.offcanvas');// if (_this.options.isSticky || !_this.options.forceTop) {
//   setTimeout(function() {
//     _this.$element[0].style.transform = '';
//     $(window).off('scroll.zf.offcanvas');
//   }, this.options.transitionTime);
// }
if(this.options.closeOnClick){this.$exiter.removeClass('is-visible');}this.$triggers.attr('aria-expanded','false');if(this.options.trapFocus){$('[data-off-canvas-content]').removeAttr('tabindex');}}/**
   * Toggles the off-canvas menu open or closed.
   * @function
   * @param {Object} event - Event object passed from listener.
   * @param {jQuery} trigger - element that triggered the off-canvas to open.
   */},{key:'toggle',value:function toggle(event,trigger){if(this.$element.hasClass('is-open')){this.close(event,trigger);}else{this.open(event,trigger);}}/**
   * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
   * @function
   * @private
   */},{key:'_handleKeyboard',value:function _handleKeyboard(event){if(event.which!==27)return;event.stopPropagation();event.preventDefault();this.close();this.$lastTrigger.focus();}/**
   * Destroys the offcanvas plugin.
   * @function
   */},{key:'destroy',value:function destroy(){this.close();this.$element.off('.zf.trigger .zf.offcanvas');this.$exiter.off('.zf.offcanvas');Foundation.unregisterPlugin(this);}}]);return OffCanvas;}();OffCanvas.defaults={/**
   * Allow the user to click outside of the menu to close it.
   * @option
   * @example true
   */closeOnClick:true,/**
   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
   * @option
   * @example 500
   */transitionTime:0,/**
   * Direction the offcanvas opens from. Determines class applied to body.
   * @option
   * @example left
   */position:'left',/**
   * Force the page to scroll to top on open.
   * @option
   * @example true
   */forceTop:true,/**
   * Allow the offcanvas to remain open for certain breakpoints.
   * @option
   * @example false
   */isRevealed:false,/**
   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
   * @option
   * @example reveal-for-large
   */revealOn:null,/**
   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
   * @option
   * @example true
   */autoFocus:true,/**
   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
   * @option
   * TODO improve the regex testing for this.
   * @example reveal-for-large
   */revealClass:'reveal-for-',/**
   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
   * @option
   * @example true
   */trapFocus:false};// Window exports
Foundation.plugin(OffCanvas,'OffCanvas');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Orbit module.
 * @module foundation.orbit
 * @requires foundation.util.keyboard
 * @requires foundation.util.motion
 * @requires foundation.util.timerAndImageLoader
 * @requires foundation.util.touch
 */var Orbit=function(){/**
  * Creates a new instance of an orbit carousel.
  * @class
  * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
  * @param {Object} options - Overrides to the default plugin settings.
  */function Orbit(element,options){_classCallCheck(this,Orbit);this.$element=element;this.options=$.extend({},Orbit.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Orbit');Foundation.Keyboard.register('Orbit',{'ltr':{'ARROW_RIGHT':'next','ARROW_LEFT':'previous'},'rtl':{'ARROW_LEFT':'next','ARROW_RIGHT':'previous'}});}/**
  * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
  * @function
  * @private
  */_createClass(Orbit,[{key:'_init',value:function _init(){this.$wrapper=this.$element.find('.'+this.options.containerClass);this.$slides=this.$element.find('.'+this.options.slideClass);var $images=this.$element.find('img'),initActive=this.$slides.filter('.is-active');if(!initActive.length){this.$slides.eq(0).addClass('is-active');}if(!this.options.useMUI){this.$slides.addClass('no-motionui');}if($images.length){Foundation.onImagesLoaded($images,this._prepareForOrbit.bind(this));}else{this._prepareForOrbit();//hehe
}if(this.options.bullets){this._loadBullets();}this._events();if(this.options.autoPlay&&this.$slides.length>1){this.geoSync();}if(this.options.accessible){// allow wrapper to be focusable to enable arrow navigation
this.$wrapper.attr('tabindex',0);}}/**
  * Creates a jQuery collection of bullets, if they are being used.
  * @function
  * @private
  */},{key:'_loadBullets',value:function _loadBullets(){this.$bullets=this.$element.find('.'+this.options.boxOfBullets).find('button');}/**
  * Sets a `timer` object on the orbit, and starts the counter for the next slide.
  * @function
  */},{key:'geoSync',value:function geoSync(){var _this=this;this.timer=new Foundation.Timer(this.$element,{duration:this.options.timerDelay,infinite:false},function(){_this.changeSlide(true);});this.timer.start();}/**
  * Sets wrapper and slide heights for the orbit.
  * @function
  * @private
  */},{key:'_prepareForOrbit',value:function _prepareForOrbit(){var _this=this;this._setWrapperHeight(function(max){_this._setSlideHeight(max);});}/**
  * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
  * @function
  * @private
  * @param {Function} cb - a callback function to fire when complete.
  */},{key:'_setWrapperHeight',value:function _setWrapperHeight(cb){//rewrite this to `for` loop
var max=0,temp,counter=0;this.$slides.each(function(){temp=this.getBoundingClientRect().height;$(this).attr('data-slide',counter);if(counter){//if not the first slide, set css position and display property
$(this).css({'position':'relative','display':'none'});}max=temp>max?temp:max;counter++;});if(counter===this.$slides.length){this.$wrapper.css({'height':max});//only change the wrapper height property once.
cb(max);//fire callback with max height dimension.
}}/**
  * Sets the max-height of each slide.
  * @function
  * @private
  */},{key:'_setSlideHeight',value:function _setSlideHeight(height){this.$slides.each(function(){$(this).css('max-height',height);});}/**
  * Adds event listeners to basically everything within the element.
  * @function
  * @private
  */},{key:'_events',value:function _events(){var _this=this;//***************************************
//**Now using custom event - thanks to:**
//**      Yohai Ararat of Toronto      **
//***************************************
if(this.$slides.length>1){if(this.options.swipe){this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit',function(e){e.preventDefault();_this.changeSlide(true);}).on('swiperight.zf.orbit',function(e){e.preventDefault();_this.changeSlide(false);});}//***************************************
if(this.options.autoPlay){this.$slides.on('click.zf.orbit',function(){_this.$element.data('clickedOn',_this.$element.data('clickedOn')?false:true);_this.timer[_this.$element.data('clickedOn')?'pause':'start']();});if(this.options.pauseOnHover){this.$element.on('mouseenter.zf.orbit',function(){_this.timer.pause();}).on('mouseleave.zf.orbit',function(){if(!_this.$element.data('clickedOn')){_this.timer.start();}});}}if(this.options.navButtons){var $controls=this.$element.find('.'+this.options.nextClass+', .'+this.options.prevClass);$controls.attr('tabindex',0)//also need to handle enter/return and spacebar key presses
.on('click.zf.orbit touchend.zf.orbit',function(e){e.preventDefault();_this.changeSlide($(this).hasClass(_this.options.nextClass));});}if(this.options.bullets){this.$bullets.on('click.zf.orbit touchend.zf.orbit',function(){if(/is-active/g.test(this.className)){return false;}//if this is active, kick out of function.
var idx=$(this).data('slide'),ltr=idx>_this.$slides.filter('.is-active').data('slide'),$slide=_this.$slides.eq(idx);_this.changeSlide(ltr,$slide,idx);});}this.$wrapper.add(this.$bullets).on('keydown.zf.orbit',function(e){// handle keyboard event with keyboard util
Foundation.Keyboard.handleKey(e,'Orbit',{next:function next(){_this.changeSlide(true);},previous:function previous(){_this.changeSlide(false);},handled:function handled(){// if bullet is focused, make sure focus moves
if($(e.target).is(_this.$bullets)){_this.$bullets.filter('.is-active').focus();}}});});}}/**
  * Changes the current slide to a new one.
  * @function
  * @param {Boolean} isLTR - flag if the slide should move left to right.
  * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
  * @param {Number} idx - the index of the new slide in its collection, if one chosen.
  * @fires Orbit#slidechange
  */},{key:'changeSlide',value:function changeSlide(isLTR,chosenSlide,idx){var $curSlide=this.$slides.filter('.is-active').eq(0);if(/mui/g.test($curSlide[0].className)){return false;}//if the slide is currently animating, kick out of the function
var $firstSlide=this.$slides.first(),$lastSlide=this.$slides.last(),dirIn=isLTR?'Right':'Left',dirOut=isLTR?'Left':'Right',_this=this,$newSlide;if(!chosenSlide){//most of the time, this will be auto played or clicked from the navButtons.
$newSlide=isLTR?//if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
this.options.infiniteWrap?$curSlide.next('.'+this.options.slideClass).length?$curSlide.next('.'+this.options.slideClass):$firstSlide:$curSlide.next('.'+this.options.slideClass)://pick next slide if moving left to right
this.options.infiniteWrap?$curSlide.prev('.'+this.options.slideClass).length?$curSlide.prev('.'+this.options.slideClass):$lastSlide:$curSlide.prev('.'+this.options.slideClass);//pick prev slide if moving right to left
}else{$newSlide=chosenSlide;}if($newSlide.length){if(this.options.bullets){idx=idx||this.$slides.index($newSlide);//grab index to update bullets
this._updateBullets(idx);}if(this.options.useMUI){Foundation.Motion.animateIn($newSlide.addClass('is-active').css({'position':'absolute','top':0}),this.options['animInFrom'+dirIn],function(){$newSlide.css({'position':'relative','display':'block'}).attr('aria-live','polite');});Foundation.Motion.animateOut($curSlide.removeClass('is-active'),this.options['animOutTo'+dirOut],function(){$curSlide.removeAttr('aria-live');if(_this.options.autoPlay&&!_this.timer.isPaused){_this.timer.restart();}//do stuff?
});}else{$curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();$newSlide.addClass('is-active is-in').attr('aria-live','polite').show();if(this.options.autoPlay&&!this.timer.isPaused){this.timer.restart();}}/**
    * Triggers when the slide has finished animating in.
    * @event Orbit#slidechange
    */this.$element.trigger('slidechange.zf.orbit',[$newSlide]);}}/**
  * Updates the active state of the bullets, if displayed.
  * @function
  * @private
  * @param {Number} idx - the index of the current slide.
  */},{key:'_updateBullets',value:function _updateBullets(idx){var $oldBullet=this.$element.find('.'+this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),span=$oldBullet.find('span:last').detach(),$newBullet=this.$bullets.eq(idx).addClass('is-active').append(span);}/**
  * Destroys the carousel and hides the element.
  * @function
  */},{key:'destroy',value:function destroy(){this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();Foundation.unregisterPlugin(this);}}]);return Orbit;}();Orbit.defaults={/**
  * Tells the JS to look for and loadBullets.
  * @option
  * @example true
  */bullets:true,/**
  * Tells the JS to apply event listeners to nav buttons
  * @option
  * @example true
  */navButtons:true,/**
  * motion-ui animation class to apply
  * @option
  * @example 'slide-in-right'
  */animInFromRight:'slide-in-right',/**
  * motion-ui animation class to apply
  * @option
  * @example 'slide-out-right'
  */animOutToRight:'slide-out-right',/**
  * motion-ui animation class to apply
  * @option
  * @example 'slide-in-left'
  *
  */animInFromLeft:'slide-in-left',/**
  * motion-ui animation class to apply
  * @option
  * @example 'slide-out-left'
  */animOutToLeft:'slide-out-left',/**
  * Allows Orbit to automatically animate on page load.
  * @option
  * @example true
  */autoPlay:true,/**
  * Amount of time, in ms, between slide transitions
  * @option
  * @example 5000
  */timerDelay:5000,/**
  * Allows Orbit to infinitely loop through the slides
  * @option
  * @example true
  */infiniteWrap:true,/**
  * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
  * @option
  * @example true
  */swipe:true,/**
  * Allows the timing function to pause animation on hover.
  * @option
  * @example true
  */pauseOnHover:true,/**
  * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
  * @option
  * @example true
  */accessible:true,/**
  * Class applied to the container of Orbit
  * @option
  * @example 'orbit-container'
  */containerClass:'orbit-container',/**
  * Class applied to individual slides.
  * @option
  * @example 'orbit-slide'
  */slideClass:'orbit-slide',/**
  * Class applied to the bullet container. You're welcome.
  * @option
  * @example 'orbit-bullets'
  */boxOfBullets:'orbit-bullets',/**
  * Class applied to the `next` navigation button.
  * @option
  * @example 'orbit-next'
  */nextClass:'orbit-next',/**
  * Class applied to the `previous` navigation button.
  * @option
  * @example 'orbit-previous'
  */prevClass:'orbit-previous',/**
  * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
  * @option
  * @example true
  */useMUI:true};// Window exports
Foundation.plugin(Orbit,'Orbit');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * ResponsiveMenu module.
 * @module foundation.responsiveMenu
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.accordionMenu
 * @requires foundation.util.drilldown
 * @requires foundation.util.dropdown-menu
 */var ResponsiveMenu=function(){/**
   * Creates a new instance of a responsive menu.
   * @class
   * @fires ResponsiveMenu#init
   * @param {jQuery} element - jQuery object to make into a dropdown menu.
   * @param {Object} options - Overrides to the default plugin settings.
   */function ResponsiveMenu(element,options){_classCallCheck(this,ResponsiveMenu);this.$element=$(element);this.rules=this.$element.data('responsive-menu');this.currentMq=null;this.currentPlugin=null;this._init();this._events();Foundation.registerPlugin(this,'ResponsiveMenu');}/**
   * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
   * @function
   * @private
   */_createClass(ResponsiveMenu,[{key:'_init',value:function _init(){// The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
if(typeof this.rules==='string'){var rulesTree={};// Parse rules from "classes" pulled from data attribute
var rules=this.rules.split(' ');// Iterate through every rule found
for(var i=0;i<rules.length;i++){var rule=rules[i].split('-');var ruleSize=rule.length>1?rule[0]:'small';var rulePlugin=rule.length>1?rule[1]:rule[0];if(MenuPlugins[rulePlugin]!==null){rulesTree[ruleSize]=MenuPlugins[rulePlugin];}}this.rules=rulesTree;}if(!$.isEmptyObject(this.rules)){this._checkMediaQueries();}}/**
   * Initializes events for the Menu.
   * @function
   * @private
   */},{key:'_events',value:function _events(){var _this=this;$(window).on('changed.zf.mediaquery',function(){_this._checkMediaQueries();});// $(window).on('resize.zf.ResponsiveMenu', function() {
//   _this._checkMediaQueries();
// });
}/**
   * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
   * @function
   * @private
   */},{key:'_checkMediaQueries',value:function _checkMediaQueries(){var matchedMq,_this=this;// Iterate through each rule and find the last matching rule
$.each(this.rules,function(key){if(Foundation.MediaQuery.atLeast(key)){matchedMq=key;}});// No match? No dice
if(!matchedMq)return;// Plugin already initialized? We good
if(this.currentPlugin instanceof this.rules[matchedMq].plugin)return;// Remove existing plugin-specific CSS classes
$.each(MenuPlugins,function(key,value){_this.$element.removeClass(value.cssClass);});// Add the CSS class for the new plugin
this.$element.addClass(this.rules[matchedMq].cssClass);// Create an instance of the new plugin
if(this.currentPlugin)this.currentPlugin.destroy();this.currentPlugin=new this.rules[matchedMq].plugin(this.$element,{});}/**
   * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
   * @function
   */},{key:'destroy',value:function destroy(){this.currentPlugin.destroy();$(window).off('.zf.ResponsiveMenu');Foundation.unregisterPlugin(this);}}]);return ResponsiveMenu;}();ResponsiveMenu.defaults={};// The plugin matches the plugin classes with these plugin instances.
var MenuPlugins={dropdown:{cssClass:'dropdown',plugin:Foundation._plugins['dropdown-menu']||null},drilldown:{cssClass:'drilldown',plugin:Foundation._plugins['drilldown']||null},accordion:{cssClass:'accordion-menu',plugin:Foundation._plugins['accordion-menu']||null}};// Window exports
Foundation.plugin(ResponsiveMenu,'ResponsiveMenu');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * ResponsiveToggle module.
 * @module foundation.responsiveToggle
 * @requires foundation.util.mediaQuery
 */var ResponsiveToggle=function(){/**
   * Creates a new instance of Tab Bar.
   * @class
   * @fires ResponsiveToggle#init
   * @param {jQuery} element - jQuery object to attach tab bar functionality to.
   * @param {Object} options - Overrides to the default plugin settings.
   */function ResponsiveToggle(element,options){_classCallCheck(this,ResponsiveToggle);this.$element=$(element);this.options=$.extend({},ResponsiveToggle.defaults,this.$element.data(),options);this._init();this._events();Foundation.registerPlugin(this,'ResponsiveToggle');}/**
   * Initializes the tab bar by finding the target element, toggling element, and running update().
   * @function
   * @private
   */_createClass(ResponsiveToggle,[{key:'_init',value:function _init(){var targetID=this.$element.data('responsive-toggle');if(!targetID){console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');}this.$targetMenu=$('#'+targetID);this.$toggler=this.$element.find('[data-toggle]');this._update();}/**
   * Adds necessary event handlers for the tab bar to work.
   * @function
   * @private
   */},{key:'_events',value:function _events(){var _this=this;this._updateMqHandler=this._update.bind(this);$(window).on('changed.zf.mediaquery',this._updateMqHandler);this.$toggler.on('click.zf.responsiveToggle',this.toggleMenu.bind(this));}/**
   * Checks the current media query to determine if the tab bar should be visible or hidden.
   * @function
   * @private
   */},{key:'_update',value:function _update(){// Mobile
if(!Foundation.MediaQuery.atLeast(this.options.hideFor)){this.$element.show();this.$targetMenu.hide();}// Desktop
else{this.$element.hide();this.$targetMenu.show();}}/**
   * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
   * @function
   * @fires ResponsiveToggle#toggled
   */},{key:'toggleMenu',value:function toggleMenu(){if(!Foundation.MediaQuery.atLeast(this.options.hideFor)){this.$targetMenu.toggle(0);/**
       * Fires when the element attached to the tab bar toggles.
       * @event ResponsiveToggle#toggled
       */this.$element.trigger('toggled.zf.responsiveToggle');}}},{key:'destroy',value:function destroy(){this.$element.off('.zf.responsiveToggle');this.$toggler.off('.zf.responsiveToggle');$(window).off('changed.zf.mediaquery',this._updateMqHandler);Foundation.unregisterPlugin(this);}}]);return ResponsiveToggle;}();ResponsiveToggle.defaults={/**
   * The breakpoint after which the menu is always shown, and the tab bar is hidden.
   * @option
   * @example 'medium'
   */hideFor:'medium'};// Window exports
Foundation.plugin(ResponsiveToggle,'ResponsiveToggle');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Reveal module.
 * @module foundation.reveal
 * @requires foundation.util.keyboard
 * @requires foundation.util.box
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 * @requires foundation.util.motion if using animations
 */var Reveal=function(){/**
   * Creates a new instance of Reveal.
   * @class
   * @param {jQuery} element - jQuery object to use for the modal.
   * @param {Object} options - optional parameters.
   */function Reveal(element,options){_classCallCheck(this,Reveal);this.$element=element;this.options=$.extend({},Reveal.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Reveal');Foundation.Keyboard.register('Reveal',{'ENTER':'open','SPACE':'open','ESCAPE':'close','TAB':'tab_forward','SHIFT_TAB':'tab_backward'});}/**
   * Initializes the modal by adding the overlay and close buttons, (if selected).
   * @private
   */_createClass(Reveal,[{key:'_init',value:function _init(){this.id=this.$element.attr('id');this.isActive=false;this.cached={mq:Foundation.MediaQuery.current};this.isMobile=mobileSniff();this.$anchor=$('[data-open="'+this.id+'"]').length?$('[data-open="'+this.id+'"]'):$('[data-toggle="'+this.id+'"]');this.$anchor.attr({'aria-controls':this.id,'aria-haspopup':true,'tabindex':0});if(this.options.fullScreen||this.$element.hasClass('full')){this.options.fullScreen=true;this.options.overlay=false;}if(this.options.overlay&&!this.$overlay){this.$overlay=this._makeOverlay(this.id);}this.$element.attr({'role':'dialog','aria-hidden':true,'data-yeti-box':this.id,'data-resize':this.id});if(this.$overlay){this.$element.detach().appendTo(this.$overlay);}else{this.$element.detach().appendTo($('body'));this.$element.addClass('without-overlay');}this._events();if(this.options.deepLink&&window.location.hash==='#'+this.id){$(window).one('load.zf.reveal',this.open.bind(this));}}/**
   * Creates an overlay div to display behind the modal.
   * @private
   */},{key:'_makeOverlay',value:function _makeOverlay(id){var $overlay=$('<div></div>').addClass('reveal-overlay').appendTo('body');return $overlay;}/**
   * Updates position of modal
   * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
   * @private
   */},{key:'_updatePosition',value:function _updatePosition(){var width=this.$element.outerWidth();var outerWidth=$(window).width();var height=this.$element.outerHeight();var outerHeight=$(window).height();var left,top;if(this.options.hOffset==='auto'){left=parseInt((outerWidth-width)/2,10);}else{left=parseInt(this.options.hOffset,10);}if(this.options.vOffset==='auto'){if(height>outerHeight){top=parseInt(Math.min(100,outerHeight/10),10);}else{top=parseInt((outerHeight-height)/4,10);}}else{top=parseInt(this.options.vOffset,10);}this.$element.css({top:top+'px'});// only worry about left if we don't have an overlay or we havea  horizontal offset,
// otherwise we're perfectly in the middle
if(!this.$overlay||this.options.hOffset!=='auto'){this.$element.css({left:left+'px'});this.$element.css({margin:'0px'});}}/**
   * Adds event handlers for the modal.
   * @private
   */},{key:'_events',value:function _events(){var _this2=this;var _this=this;this.$element.on({'open.zf.trigger':this.open.bind(this),'close.zf.trigger':function closeZfTrigger(event,$element){if(event.target===_this.$element[0]||$(event.target).parents('[data-closable]')[0]===$element){// only close reveal when it's explicitly called
return _this2.close.apply(_this2);}},'toggle.zf.trigger':this.toggle.bind(this),'resizeme.zf.trigger':function resizemeZfTrigger(){_this._updatePosition();}});if(this.$anchor.length){this.$anchor.on('keydown.zf.reveal',function(e){if(e.which===13||e.which===32){e.stopPropagation();e.preventDefault();_this.open();}});}if(this.options.closeOnClick&&this.options.overlay){this.$overlay.off('.zf.reveal').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}_this.close();});}if(this.options.deepLink){$(window).on('popstate.zf.reveal:'+this.id,this._handleState.bind(this));}}/**
   * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
   * @private
   */},{key:'_handleState',value:function _handleState(e){if(window.location.hash==='#'+this.id&&!this.isActive){this.open();}else{this.close();}}/**
   * Opens the modal controlled by `this.$anchor`, and closes all others by default.
   * @function
   * @fires Reveal#closeme
   * @fires Reveal#open
   */},{key:'open',value:function open(){var _this3=this;if(this.options.deepLink){var hash='#'+this.id;if(window.history.pushState){window.history.pushState(null,null,hash);}else{window.location.hash=hash;}}this.isActive=true;// Make elements invisible, but remove display: none so we can get size and positioning
this.$element.css({'visibility':'hidden'}).show().scrollTop(0);if(this.options.overlay){this.$overlay.css({'visibility':'hidden'}).show();}this._updatePosition();this.$element.hide().css({'visibility':''});if(this.$overlay){this.$overlay.css({'visibility':''}).hide();if(this.$element.hasClass('fast')){this.$overlay.addClass('fast');}else if(this.$element.hasClass('slow')){this.$overlay.addClass('slow');}}if(!this.options.multipleOpened){/**
       * Fires immediately before the modal opens.
       * Closes any other modals that are currently open
       * @event Reveal#closeme
       */this.$element.trigger('closeme.zf.reveal',this.id);}// Motion UI method of reveal
if(this.options.animationIn){var _this;(function(){var afterAnimationFocus=function afterAnimationFocus(){_this.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();console.log('focus');};_this=_this3;if(_this3.options.overlay){Foundation.Motion.animateIn(_this3.$overlay,'fade-in');}Foundation.Motion.animateIn(_this3.$element,_this3.options.animationIn,function(){_this3.focusableElements=Foundation.Keyboard.findFocusable(_this3.$element);afterAnimationFocus();});})();}// jQuery method of reveal
else{if(this.options.overlay){this.$overlay.show(0);}this.$element.show(this.options.showDelay);}// handle accessibility
this.$element.attr({'aria-hidden':false,'tabindex':-1}).focus();/**
     * Fires when the modal has successfully opened.
     * @event Reveal#open
     */this.$element.trigger('open.zf.reveal');if(this.isMobile){this.originalScrollPos=window.pageYOffset;$('html, body').addClass('is-reveal-open');}else{$('body').addClass('is-reveal-open');}setTimeout(function(){_this3._extraHandlers();},0);}/**
   * Adds extra event handlers for the body and window if necessary.
   * @private
   */},{key:'_extraHandlers',value:function _extraHandlers(){var _this=this;this.focusableElements=Foundation.Keyboard.findFocusable(this.$element);if(!this.options.overlay&&this.options.closeOnClick&&!this.options.fullScreen){$('body').on('click.zf.reveal',function(e){if(e.target===_this.$element[0]||$.contains(_this.$element[0],e.target)){return;}_this.close();});}if(this.options.closeOnEsc){$(window).on('keydown.zf.reveal',function(e){Foundation.Keyboard.handleKey(e,'Reveal',{close:function close(){if(_this.options.closeOnEsc){_this.close();_this.$anchor.focus();}}});});}// lock focus within modal while tabbing
this.$element.on('keydown.zf.reveal',function(e){var $target=$(this);// handle keyboard event with keyboard util
Foundation.Keyboard.handleKey(e,'Reveal',{tab_forward:function tab_forward(){if(_this.$element.find(':focus').is(_this.focusableElements.eq(-1))){// left modal downwards, setting focus to first element
_this.focusableElements.eq(0).focus();return true;}if(_this.focusableElements.length===0){// no focusable elements inside the modal at all, prevent tabbing in general
return true;}},tab_backward:function tab_backward(){if(_this.$element.find(':focus').is(_this.focusableElements.eq(0))||_this.$element.is(':focus')){// left modal upwards, setting focus to last element
_this.focusableElements.eq(-1).focus();return true;}if(_this.focusableElements.length===0){// no focusable elements inside the modal at all, prevent tabbing in general
return true;}},open:function open(){if(_this.$element.find(':focus').is(_this.$element.find('[data-close]'))){setTimeout(function(){// set focus back to anchor if close button has been activated
_this.$anchor.focus();},1);}else if($target.is(_this.focusableElements)){// dont't trigger if acual element has focus (i.e. inputs, links, ...)
_this.open();}},close:function close(){if(_this.options.closeOnEsc){_this.close();_this.$anchor.focus();}},handled:function handled(preventDefault){if(preventDefault){e.preventDefault();}}});});}/**
   * Closes the modal.
   * @function
   * @fires Reveal#closed
   */},{key:'close',value:function close(){if(!this.isActive||!this.$element.is(':visible')){return false;}var _this=this;// Motion UI method of hiding
if(this.options.animationOut){if(this.options.overlay){Foundation.Motion.animateOut(this.$overlay,'fade-out',finishUp);}else{finishUp();}Foundation.Motion.animateOut(this.$element,this.options.animationOut);}// jQuery method of hiding
else{if(this.options.overlay){this.$overlay.hide(0,finishUp);}else{finishUp();}this.$element.hide(this.options.hideDelay);}// Conditionals to remove extra event listeners added on open
if(this.options.closeOnEsc){$(window).off('keydown.zf.reveal');}if(!this.options.overlay&&this.options.closeOnClick){$('body').off('click.zf.reveal');}this.$element.off('keydown.zf.reveal');function finishUp(){if(_this.isMobile){$('html, body').removeClass('is-reveal-open');if(_this.originalScrollPos){$('body').scrollTop(_this.originalScrollPos);_this.originalScrollPos=null;}}else{$('body').removeClass('is-reveal-open');}_this.$element.attr('aria-hidden',true);/**
      * Fires when the modal is done closing.
      * @event Reveal#closed
      */_this.$element.trigger('closed.zf.reveal');}/**
    * Resets the modal content
    * This prevents a running video to keep going in the background
    */if(this.options.resetOnClose){this.$element.html(this.$element.html());}this.isActive=false;if(_this.options.deepLink){if(window.history.replaceState){window.history.replaceState("",document.title,window.location.pathname);}else{window.location.hash='';}}}/**
   * Toggles the open/closed state of a modal.
   * @function
   */},{key:'toggle',value:function toggle(){if(this.isActive){this.close();}else{this.open();}}},{key:'destroy',/**
   * Destroys an instance of a modal.
   * @function
   */value:function destroy(){if(this.options.overlay){this.$element.appendTo($('body'));// move $element outside of $overlay to prevent error unregisterPlugin()
this.$overlay.hide().off().remove();}this.$element.hide().off();this.$anchor.off('.zf');$(window).off('.zf.reveal:'+this.id);Foundation.unregisterPlugin(this);}}]);return Reveal;}();Reveal.defaults={/**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @example 'slide-in-left'
   */animationIn:'',/**
   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
   * @option
   * @example 'slide-out-right'
   */animationOut:'',/**
   * Time, in ms, to delay the opening of a modal after a click if no animation used.
   * @option
   * @example 10
   */showDelay:0,/**
   * Time, in ms, to delay the closing of a modal after a click if no animation used.
   * @option
   * @example 10
   */hideDelay:0,/**
   * Allows a click on the body/overlay to close the modal.
   * @option
   * @example true
   */closeOnClick:true,/**
   * Allows the modal to close if the user presses the `ESCAPE` key.
   * @option
   * @example true
   */closeOnEsc:true,/**
   * If true, allows multiple modals to be displayed at once.
   * @option
   * @example false
   */multipleOpened:false,/**
   * Distance, in pixels, the modal should push down from the top of the screen.
   * @option
   * @example auto
   */vOffset:'auto',/**
   * Distance, in pixels, the modal should push in from the side of the screen.
   * @option
   * @example auto
   */hOffset:'auto',/**
   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
   * @option
   * @example false
   */fullScreen:false,/**
   * Percentage of screen height the modal should push up from the bottom of the view.
   * @option
   * @example 10
   */btmOffsetPct:10,/**
   * Allows the modal to generate an overlay div, which will cover the view when modal opens.
   * @option
   * @example true
   */overlay:true,/**
   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
   * @option
   * @example false
   */resetOnClose:false,/**
   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
   * @option
   * @example false
   */deepLink:false};// Window exports
Foundation.plugin(Reveal,'Reveal');function iPhoneSniff(){return /iP(ad|hone|od).*OS/.test(window.navigator.userAgent);}function androidSniff(){return /Android/.test(window.navigator.userAgent);}function mobileSniff(){return iPhoneSniff()||androidSniff();}}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Slider module.
 * @module foundation.slider
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 * @requires foundation.util.keyboard
 * @requires foundation.util.touch
 */var Slider=function(){/**
   * Creates a new instance of a drilldown menu.
   * @class
   * @param {jQuery} element - jQuery object to make into an accordion menu.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Slider(element,options){_classCallCheck(this,Slider);this.$element=element;this.options=$.extend({},Slider.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Slider');Foundation.Keyboard.register('Slider',{'ltr':{'ARROW_RIGHT':'increase','ARROW_UP':'increase','ARROW_DOWN':'decrease','ARROW_LEFT':'decrease','SHIFT_ARROW_RIGHT':'increase_fast','SHIFT_ARROW_UP':'increase_fast','SHIFT_ARROW_DOWN':'decrease_fast','SHIFT_ARROW_LEFT':'decrease_fast'},'rtl':{'ARROW_LEFT':'increase','ARROW_RIGHT':'decrease','SHIFT_ARROW_LEFT':'increase_fast','SHIFT_ARROW_RIGHT':'decrease_fast'}});}/**
   * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
   * @function
   * @private
   */_createClass(Slider,[{key:'_init',value:function _init(){this.inputs=this.$element.find('input');this.handles=this.$element.find('[data-slider-handle]');this.$handle=this.handles.eq(0);this.$input=this.inputs.length?this.inputs.eq(0):$('#'+this.$handle.attr('aria-controls'));this.$fill=this.$element.find('[data-slider-fill]').css(this.options.vertical?'height':'width',0);var isDbl=false,_this=this;if(this.options.disabled||this.$element.hasClass(this.options.disabledClass)){this.options.disabled=true;this.$element.addClass(this.options.disabledClass);}if(!this.inputs.length){this.inputs=$().add(this.$input);this.options.binding=true;}this._setInitAttr(0);this._events(this.$handle);if(this.handles[1]){this.options.doubleSided=true;this.$handle2=this.handles.eq(1);this.$input2=this.inputs.length>1?this.inputs.eq(1):$('#'+this.$handle2.attr('aria-controls'));if(!this.inputs[1]){this.inputs=this.inputs.add(this.$input2);}isDbl=true;this._setHandlePos(this.$handle,this.options.initialStart,true,function(){_this._setHandlePos(_this.$handle2,_this.options.initialEnd,true);});// this.$handle.triggerHandler('click.zf.slider');
this._setInitAttr(1);this._events(this.$handle2);}if(!isDbl){this._setHandlePos(this.$handle,this.options.initialStart,true);}}/**
   * Sets the position of the selected handle and fill bar.
   * @function
   * @private
   * @param {jQuery} $hndl - the selected handle to move.
   * @param {Number} location - floating point between the start and end values of the slider bar.
   * @param {Function} cb - callback function to fire on completion.
   * @fires Slider#moved
   * @fires Slider#changed
   */},{key:'_setHandlePos',value:function _setHandlePos($hndl,location,noInvert,cb){// don't move if the slider has been disabled since its initialization
if(this.$element.hasClass(this.options.disabledClass)){return;}//might need to alter that slightly for bars that will have odd number selections.
location=parseFloat(location);//on input change events, convert string to number...grumble.
// prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
if(location<this.options.start){location=this.options.start;}else if(location>this.options.end){location=this.options.end;}var isDbl=this.options.doubleSided;if(isDbl){//this block is to prevent 2 handles from crossing eachother. Could/should be improved.
if(this.handles.index($hndl)===0){var h2Val=parseFloat(this.$handle2.attr('aria-valuenow'));location=location>=h2Val?h2Val-this.options.step:location;}else{var h1Val=parseFloat(this.$handle.attr('aria-valuenow'));location=location<=h1Val?h1Val+this.options.step:location;}}//this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
//for click and drag events, it's weird due to the scale(-1, 1) css property
if(this.options.vertical&&!noInvert){location=this.options.end-location;}var _this=this,vert=this.options.vertical,hOrW=vert?'height':'width',lOrT=vert?'top':'left',handleDim=$hndl[0].getBoundingClientRect()[hOrW],elemDim=this.$element[0].getBoundingClientRect()[hOrW],//percentage of bar min/max value based on click or drag point
pctOfBar=percent(location-this.options.start,this.options.end-this.options.start).toFixed(2),//number of actual pixels to shift the handle, based on the percentage obtained above
pxToMove=(elemDim-handleDim)*pctOfBar,//percentage of bar to shift the handle
movement=(percent(pxToMove,elemDim)*100).toFixed(this.options.decimal);//fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
location=parseFloat(location.toFixed(this.options.decimal));// declare empty object for css adjustments, only used with 2 handled-sliders
var css={};this._setValues($hndl,location);// TODO update to calculate based on values set to respective inputs??
if(isDbl){var isLeftHndl=this.handles.index($hndl)===0,//empty variable, will be used for min-height/width for fill bar
dim,//percentage w/h of the handle compared to the slider bar
handlePct=~~(percent(handleDim,elemDim)*100);//if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
if(isLeftHndl){//left or top percentage value to apply to the fill bar.
css[lOrT]=movement+'%';//calculate the new min-height/width for the fill bar.
dim=parseFloat(this.$handle2[0].style[lOrT])-movement+handlePct;//this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
//plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
if(cb&&typeof cb==='function'){cb();}//this is only needed for the initialization of 2 handled sliders
}else{//just caching the value of the left/bottom handle's left/top property
var handlePos=parseFloat(this.$handle[0].style[lOrT]);//calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
//based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
dim=movement-(isNaN(handlePos)?this.options.initialStart/((this.options.end-this.options.start)/100):handlePos)+handlePct;}// assign the min-height/width to our css object
css['min-'+hOrW]=dim+'%';}this.$element.one('finished.zf.animate',function(){/**
                     * Fires when the handle is done moving.
                     * @event Slider#moved
                     */_this.$element.trigger('moved.zf.slider',[$hndl]);});//because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
var moveTime=this.$element.data('dragging')?1000/60:this.options.moveTime;Foundation.Move(moveTime,$hndl,function(){//adjusting the left/top property of the handle, based on the percentage calculated above
$hndl.css(lOrT,movement+'%');if(!_this.options.doubleSided){//if single-handled, a simple method to expand the fill bar
_this.$fill.css(hOrW,pctOfBar*100+'%');}else{//otherwise, use the css object we created above
_this.$fill.css(css);}});/**
     * Fires when the value has not been change for a given time.
     * @event Slider#changed
     */clearTimeout(_this.timeout);_this.timeout=setTimeout(function(){_this.$element.trigger('changed.zf.slider',[$hndl]);},_this.options.changedDelay);}/**
   * Sets the initial attribute for the slider element.
   * @function
   * @private
   * @param {Number} idx - index of the current handle/input to use.
   */},{key:'_setInitAttr',value:function _setInitAttr(idx){var id=this.inputs.eq(idx).attr('id')||Foundation.GetYoDigits(6,'slider');this.inputs.eq(idx).attr({'id':id,'max':this.options.end,'min':this.options.start,'step':this.options.step});this.handles.eq(idx).attr({'role':'slider','aria-controls':id,'aria-valuemax':this.options.end,'aria-valuemin':this.options.start,'aria-valuenow':idx===0?this.options.initialStart:this.options.initialEnd,'aria-orientation':this.options.vertical?'vertical':'horizontal','tabindex':0});}/**
   * Sets the input and `aria-valuenow` values for the slider element.
   * @function
   * @private
   * @param {jQuery} $handle - the currently selected handle.
   * @param {Number} val - floating point of the new value.
   */},{key:'_setValues',value:function _setValues($handle,val){var idx=this.options.doubleSided?this.handles.index($handle):0;this.inputs.eq(idx).val(val);$handle.attr('aria-valuenow',val);}/**
   * Handles events on the slider element.
   * Calculates the new location of the current handle.
   * If there are two handles and the bar was clicked, it determines which handle to move.
   * @function
   * @private
   * @param {Object} e - the `event` object passed from the listener.
   * @param {jQuery} $handle - the current handle to calculate for, if selected.
   * @param {Number} val - floating point number for the new value of the slider.
   * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
   */},{key:'_handleEvent',value:function _handleEvent(e,$handle,val){var value,hasVal;if(!val){//click or drag events
e.preventDefault();var _this=this,vertical=this.options.vertical,param=vertical?'height':'width',direction=vertical?'top':'left',eventOffset=vertical?e.pageY:e.pageX,halfOfHandle=this.$handle[0].getBoundingClientRect()[param]/2,barDim=this.$element[0].getBoundingClientRect()[param],windowScroll=vertical?$(window).scrollTop():$(window).scrollLeft();var elemOffset=this.$element.offset()[direction];// touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
// best way to guess this is simulated is if clientY == pageY
if(e.clientY===e.pageY){eventOffset=eventOffset+windowScroll;}var eventFromBar=eventOffset-elemOffset;var barXY;if(eventFromBar<0){barXY=0;}else if(eventFromBar>barDim){barXY=barDim;}else{barXY=eventFromBar;}offsetPct=percent(barXY,barDim);value=(this.options.end-this.options.start)*offsetPct+this.options.start;// turn everything around for RTL, yay math!
if(Foundation.rtl()&&!this.options.vertical){value=this.options.end-value;}value=_this._adjustValue(null,value);//boolean flag for the setHandlePos fn, specifically for vertical sliders
hasVal=false;if(!$handle){//figure out which handle it is, pass it to the next function.
var firstHndlPos=absPosition(this.$handle,direction,barXY,param),secndHndlPos=absPosition(this.$handle2,direction,barXY,param);$handle=firstHndlPos<=secndHndlPos?this.$handle:this.$handle2;}}else{//change event on input
value=this._adjustValue(null,val);hasVal=true;}this._setHandlePos($handle,value,hasVal);}/**
   * Adjustes value for handle in regard to step value. returns adjusted value
   * @function
   * @private
   * @param {jQuery} $handle - the selected handle.
   * @param {Number} value - value to adjust. used if $handle is falsy
   */},{key:'_adjustValue',value:function _adjustValue($handle,value){var val,step=this.options.step,div=parseFloat(step/2),left,prev_val,next_val;if(!!$handle){val=parseFloat($handle.attr('aria-valuenow'));}else{val=value;}left=val%step;prev_val=val-left;next_val=prev_val+step;if(left===0){return val;}val=val>=prev_val+div?next_val:prev_val;return val;}/**
   * Adds event listeners to the slider elements.
   * @function
   * @private
   * @param {jQuery} $handle - the current handle to apply listeners to.
   */},{key:'_events',value:function _events($handle){var _this=this,curHandle,timer;this.inputs.off('change.zf.slider').on('change.zf.slider',function(e){var idx=_this.inputs.index($(this));_this._handleEvent(e,_this.handles.eq(idx),$(this).val());});if(this.options.clickSelect){this.$element.off('click.zf.slider').on('click.zf.slider',function(e){if(_this.$element.data('dragging')){return false;}if(!$(e.target).is('[data-slider-handle]')){if(_this.options.doubleSided){_this._handleEvent(e);}else{_this._handleEvent(e,_this.$handle);}}});}if(this.options.draggable){this.handles.addTouch();var $body=$('body');$handle.off('mousedown.zf.slider').on('mousedown.zf.slider',function(e){$handle.addClass('is-dragging');_this.$fill.addClass('is-dragging');//
_this.$element.data('dragging',true);curHandle=$(e.currentTarget);$body.on('mousemove.zf.slider',function(e){e.preventDefault();_this._handleEvent(e,curHandle);}).on('mouseup.zf.slider',function(e){_this._handleEvent(e,curHandle);$handle.removeClass('is-dragging');_this.$fill.removeClass('is-dragging');_this.$element.data('dragging',false);$body.off('mousemove.zf.slider mouseup.zf.slider');});})// prevent events triggered by touch
.on('selectstart.zf.slider touchmove.zf.slider',function(e){e.preventDefault();});}$handle.off('keydown.zf.slider').on('keydown.zf.slider',function(e){var _$handle=$(this),idx=_this.options.doubleSided?_this.handles.index(_$handle):0,oldValue=parseFloat(_this.inputs.eq(idx).val()),newValue;// handle keyboard event with keyboard util
Foundation.Keyboard.handleKey(e,'Slider',{decrease:function decrease(){newValue=oldValue-_this.options.step;},increase:function increase(){newValue=oldValue+_this.options.step;},decrease_fast:function decrease_fast(){newValue=oldValue-_this.options.step*10;},increase_fast:function increase_fast(){newValue=oldValue+_this.options.step*10;},handled:function handled(){// only set handle pos when event was handled specially
e.preventDefault();_this._setHandlePos(_$handle,newValue,true);}});/*if (newValue) { // if pressed key has special function, update value
        e.preventDefault();
        _this._setHandlePos(_$handle, newValue);
      }*/});}/**
   * Destroys the slider plugin.
   */},{key:'destroy',value:function destroy(){this.handles.off('.zf.slider');this.inputs.off('.zf.slider');this.$element.off('.zf.slider');Foundation.unregisterPlugin(this);}}]);return Slider;}();Slider.defaults={/**
   * Minimum value for the slider scale.
   * @option
   * @example 0
   */start:0,/**
   * Maximum value for the slider scale.
   * @option
   * @example 100
   */end:100,/**
   * Minimum value change per change event.
   * @option
   * @example 1
   */step:1,/**
   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
   * @option
   * @example 0
   */initialStart:0,/**
   * Value at which the right handle/second input should be set to on initialization.
   * @option
   * @example 100
   */initialEnd:100,/**
   * Allows the input to be located outside the container and visible. Set to by the JS
   * @option
   * @example false
   */binding:false,/**
   * Allows the user to click/tap on the slider bar to select a value.
   * @option
   * @example true
   */clickSelect:true,/**
   * Set to true and use the `vertical` class to change alignment to vertical.
   * @option
   * @example false
   */vertical:false,/**
   * Allows the user to drag the slider handle(s) to select a value.
   * @option
   * @example true
   */draggable:true,/**
   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
   * @option
   * @example false
   */disabled:false,/**
   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
   * @option
   * @example false
   */doubleSided:false,/**
   * Potential future feature.
   */// steps: 100,
/**
   * Number of decimal places the plugin should go to for floating point precision.
   * @option
   * @example 2
   */decimal:2,/**
   * Time delay for dragged elements.
   */// dragDelay: 0,
/**
   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
   * @option
   * @example 200
   */moveTime:200,//update this if changing the transition time in the sass
/**
   * Class applied to disabled sliders.
   * @option
   * @example 'disabled'
   */disabledClass:'disabled',/**
   * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
   * @option
   * @example false
   */invertVertical:false,/**
   * Milliseconds before the `changed.zf-slider` event is triggered after value change.
   * @option
   * @example 500
   */changedDelay:500};function percent(frac,num){return frac/num;}function absPosition($handle,dir,clickPos,param){return Math.abs($handle.position()[dir]+$handle[param]()/2-clickPos);}// Window exports
Foundation.plugin(Slider,'Slider');}(jQuery);//*********this is in case we go to static, absolute positions instead of dynamic positioning********
// this.setSteps(function() {
//   _this._events();
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;
//   if (initStart || initEnd) {
//     _this._handleEvent(initStart, initEnd);
//   }
// });
//***********the other part of absolute positions*************
// Slider.prototype.setSteps = function(cb) {
//   var posChange = this.$element.outerWidth() / this.options.steps;
//   var counter = 0
//   while(counter < this.options.steps) {
//     if (counter) {
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);
//     } else {
//       this.options.positions.push(posChange);
//     }
//     counter++;
//   }
//   cb();
// };
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Sticky module.
 * @module foundation.sticky
 * @requires foundation.util.triggers
 * @requires foundation.util.mediaQuery
 */var Sticky=function(){/**
   * Creates a new instance of a sticky thing.
   * @class
   * @param {jQuery} element - jQuery object to make sticky.
   * @param {Object} options - options object passed when creating the element programmatically.
   */function Sticky(element,options){_classCallCheck(this,Sticky);this.$element=element;this.options=$.extend({},Sticky.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Sticky');}/**
   * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
   * @function
   * @private
   */_createClass(Sticky,[{key:'_init',value:function _init(){var $parent=this.$element.parent('[data-sticky-container]'),id=this.$element[0].id||Foundation.GetYoDigits(6,'sticky'),_this=this;if(!$parent.length){this.wasWrapped=true;}this.$container=$parent.length?$parent:$(this.options.container).wrapInner(this.$element);this.$container.addClass(this.options.containerClass);this.$element.addClass(this.options.stickyClass).attr({'data-resize':id});this.scrollCount=this.options.checkEvery;this.isStuck=false;$(window).one('load.zf.sticky',function(){if(_this.options.anchor!==''){_this.$anchor=$('#'+_this.options.anchor);}else{_this._parsePoints();}_this._setSizes(function(){_this._calc(false);});_this._events(id.split('-').reverse().join('-'));});}/**
   * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
   * @function
   * @private
   */},{key:'_parsePoints',value:function _parsePoints(){var top=this.options.topAnchor==""?1:this.options.topAnchor,btm=this.options.btmAnchor==""?document.documentElement.scrollHeight:this.options.btmAnchor,pts=[top,btm],breaks={};for(var i=0,len=pts.length;i<len&&pts[i];i++){var pt;if(typeof pts[i]==='number'){pt=pts[i];}else{var place=pts[i].split(':'),anchor=$('#'+place[0]);pt=anchor.offset().top;if(place[1]&&place[1].toLowerCase()==='bottom'){pt+=anchor[0].getBoundingClientRect().height;}}breaks[i]=pt;}this.points=breaks;return;}/**
   * Adds event handlers for the scrolling element.
   * @private
   * @param {String} id - psuedo-random id for unique scroll event listener.
   */},{key:'_events',value:function _events(id){var _this=this,scrollListener=this.scrollListener='scroll.zf.'+id;if(this.isOn){return;}if(this.canStick){this.isOn=true;$(window).off(scrollListener).on(scrollListener,function(e){if(_this.scrollCount===0){_this.scrollCount=_this.options.checkEvery;_this._setSizes(function(){_this._calc(false,window.pageYOffset);});}else{_this.scrollCount--;_this._calc(false,window.pageYOffset);}});}this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger',function(e,el){_this._setSizes(function(){_this._calc(false);if(_this.canStick){if(!_this.isOn){_this._events(id);}}else if(_this.isOn){_this._pauseListeners(scrollListener);}});});}/**
   * Removes event handlers for scroll and change events on anchor.
   * @fires Sticky#pause
   * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
   */},{key:'_pauseListeners',value:function _pauseListeners(scrollListener){this.isOn=false;$(window).off(scrollListener);/**
     * Fires when the plugin is paused due to resize event shrinking the view.
     * @event Sticky#pause
     * @private
     */this.$element.trigger('pause.zf.sticky');}/**
   * Called on every `scroll` event and on `_init`
   * fires functions based on booleans and cached values
   * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
   * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
   */},{key:'_calc',value:function _calc(checkSizes,scroll){if(checkSizes){this._setSizes();}if(!this.canStick){if(this.isStuck){this._removeSticky(true);}return false;}if(!scroll){scroll=window.pageYOffset;}if(scroll>=this.topPoint){if(scroll<=this.bottomPoint){if(!this.isStuck){this._setSticky();}}else{if(this.isStuck){this._removeSticky(false);}}}else{if(this.isStuck){this._removeSticky(true);}}}/**
   * Causes the $element to become stuck.
   * Adds `position: fixed;`, and helper classes.
   * @fires Sticky#stuckto
   * @function
   * @private
   */},{key:'_setSticky',value:function _setSticky(){var _this=this,stickTo=this.options.stickTo,mrgn=stickTo==='top'?'marginTop':'marginBottom',notStuckTo=stickTo==='top'?'bottom':'top',css={};css[mrgn]=this.options[mrgn]+'em';css[stickTo]=0;css[notStuckTo]='auto';css['left']=this.$container.offset().left+parseInt(window.getComputedStyle(this.$container[0])["padding-left"],10);this.isStuck=true;this.$element.removeClass('is-anchored is-at-'+notStuckTo).addClass('is-stuck is-at-'+stickTo).css(css)/**
                  * Fires when the $element has become `position: fixed;`
                  * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
                  * @event Sticky#stuckto
                  */.trigger('sticky.zf.stuckto:'+stickTo);this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",function(){_this._setSizes();});}/**
   * Causes the $element to become unstuck.
   * Removes `position: fixed;`, and helper classes.
   * Adds other helper classes.
   * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
   * @fires Sticky#unstuckfrom
   * @private
   */},{key:'_removeSticky',value:function _removeSticky(isTop){var stickTo=this.options.stickTo,stickToTop=stickTo==='top',css={},anchorPt=(this.points?this.points[1]-this.points[0]:this.anchorHeight)-this.elemHeight,mrgn=stickToTop?'marginTop':'marginBottom',notStuckTo=stickToTop?'bottom':'top',topOrBottom=isTop?'top':'bottom';css[mrgn]=0;css['bottom']='auto';if(isTop){css['top']=0;}else{css['top']=anchorPt;}css['left']='';this.isStuck=false;this.$element.removeClass('is-stuck is-at-'+stickTo).addClass('is-anchored is-at-'+topOrBottom).css(css)/**
                  * Fires when the $element has become anchored.
                  * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
                  * @event Sticky#unstuckfrom
                  */.trigger('sticky.zf.unstuckfrom:'+topOrBottom);}/**
   * Sets the $element and $container sizes for plugin.
   * Calls `_setBreakPoints`.
   * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
   * @private
   */},{key:'_setSizes',value:function _setSizes(cb){this.canStick=Foundation.MediaQuery.atLeast(this.options.stickyOn);if(!this.canStick){cb();}var _this=this,newElemWidth=this.$container[0].getBoundingClientRect().width,comp=window.getComputedStyle(this.$container[0]),pdng=parseInt(comp['padding-right'],10);if(this.$anchor&&this.$anchor.length){this.anchorHeight=this.$anchor[0].getBoundingClientRect().height;}else{this._parsePoints();}this.$element.css({'max-width':newElemWidth-pdng+'px'});var newContainerHeight=this.$element[0].getBoundingClientRect().height||this.containerHeight;if(this.$element.css("display")=="none"){newContainerHeight=0;}this.containerHeight=newContainerHeight;this.$container.css({height:newContainerHeight});this.elemHeight=newContainerHeight;if(this.isStuck){this.$element.css({"left":this.$container.offset().left+parseInt(comp['padding-left'],10)});}this._setBreakPoints(newContainerHeight,function(){if(cb){cb();}});}/**
   * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
   * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
   * @param {Function} cb - optional callback function to be called on completion.
   * @private
   */},{key:'_setBreakPoints',value:function _setBreakPoints(elemHeight,cb){if(!this.canStick){if(cb){cb();}else{return false;}}var mTop=emCalc(this.options.marginTop),mBtm=emCalc(this.options.marginBottom),topPoint=this.points?this.points[0]:this.$anchor.offset().top,bottomPoint=this.points?this.points[1]:topPoint+this.anchorHeight,// topPoint = this.$anchor.offset().top || this.points[0],
// bottomPoint = topPoint + this.anchorHeight || this.points[1],
winHeight=window.innerHeight;if(this.options.stickTo==='top'){topPoint-=mTop;bottomPoint-=elemHeight+mTop;}else if(this.options.stickTo==='bottom'){topPoint-=winHeight-(elemHeight+mBtm);bottomPoint-=winHeight-mBtm;}else{//this would be the stickTo: both option... tricky
}this.topPoint=topPoint;this.bottomPoint=bottomPoint;if(cb){cb();}}/**
   * Destroys the current sticky element.
   * Resets the element to the top position first.
   * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
   * @function
   */},{key:'destroy',value:function destroy(){this._removeSticky(true);this.$element.removeClass(this.options.stickyClass+' is-anchored is-at-top').css({height:'',top:'',bottom:'','max-width':''}).off('resizeme.zf.trigger');if(this.$anchor&&this.$anchor.length){this.$anchor.off('change.zf.sticky');}$(window).off(this.scrollListener);if(this.wasWrapped){this.$element.unwrap();}else{this.$container.removeClass(this.options.containerClass).css({height:''});}Foundation.unregisterPlugin(this);}}]);return Sticky;}();Sticky.defaults={/**
   * Customizable container template. Add your own classes for styling and sizing.
   * @option
   * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'
   */container:'<div data-sticky-container></div>',/**
   * Location in the view the element sticks to.
   * @option
   * @example 'top'
   */stickTo:'top',/**
   * If anchored to a single element, the id of that element.
   * @option
   * @example 'exampleId'
   */anchor:'',/**
   * If using more than one element as anchor points, the id of the top anchor.
   * @option
   * @example 'exampleId:top'
   */topAnchor:'',/**
   * If using more than one element as anchor points, the id of the bottom anchor.
   * @option
   * @example 'exampleId:bottom'
   */btmAnchor:'',/**
   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
   * @option
   * @example 1
   */marginTop:1,/**
   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
   * @option
   * @example 1
   */marginBottom:1,/**
   * Breakpoint string that is the minimum screen size an element should become sticky.
   * @option
   * @example 'medium'
   */stickyOn:'medium',/**
   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
   * @option
   * @example 'sticky'
   */stickyClass:'sticky',/**
   * Class applied to sticky container. Foundation defaults to `sticky-container`.
   * @option
   * @example 'sticky-container'
   */containerClass:'sticky-container',/**
   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
   * @option
   * @example 50
   */checkEvery:-1};/**
 * Helper function to calculate em values
 * @param Number {em} - number of em's to calculate into pixels
 */function emCalc(em){return parseInt(window.getComputedStyle(document.body,null).fontSize,10)*em;}// Window exports
Foundation.plugin(Sticky,'Sticky');}(jQuery);
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Tabs module.
 * @module foundation.tabs
 * @requires foundation.util.keyboard
 * @requires foundation.util.timerAndImageLoader if tabs contain images
 */var Tabs=function(){/**
   * Creates a new instance of tabs.
   * @class
   * @fires Tabs#init
   * @param {jQuery} element - jQuery object to make into tabs.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Tabs(element,options){_classCallCheck(this,Tabs);this.$element=element;this.options=$.extend({},Tabs.defaults,this.$element.data(),options);this._init();Foundation.registerPlugin(this,'Tabs');Foundation.Keyboard.register('Tabs',{'ENTER':'open','SPACE':'open','ARROW_RIGHT':'next','ARROW_UP':'previous','ARROW_DOWN':'next','ARROW_LEFT':'previous'// 'TAB': 'next',
// 'SHIFT_TAB': 'previous'
});}/**
   * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
   * @private
   */_createClass(Tabs,[{key:'_init',value:function _init(){var _this=this;this.$tabTitles=this.$element.find('.'+this.options.linkClass);this.$tabContent=$('[data-tabs-content="'+this.$element[0].id+'"]');this.$tabTitles.each(function(){var $elem=$(this),$link=$elem.find('a'),isActive=$elem.hasClass('is-active'),hash=$link[0].hash.slice(1),linkId=$link[0].id?$link[0].id:hash+'-label',$tabContent=$('#'+hash);$elem.attr({'role':'presentation'});$link.attr({'role':'tab','aria-controls':hash,'aria-selected':isActive,'id':linkId});$tabContent.attr({'role':'tabpanel','aria-hidden':!isActive,'aria-labelledby':linkId});if(isActive&&_this.options.autoFocus){$link.focus();}});if(this.options.matchHeight){var $images=this.$tabContent.find('img');if($images.length){Foundation.onImagesLoaded($images,this._setHeight.bind(this));}else{this._setHeight();}}this._events();}/**
   * Adds event handlers for items within the tabs.
   * @private
   */},{key:'_events',value:function _events(){this._addKeyHandler();this._addClickHandler();this._setHeightMqHandler=null;if(this.options.matchHeight){this._setHeightMqHandler=this._setHeight.bind(this);$(window).on('changed.zf.mediaquery',this._setHeightMqHandler);}}/**
   * Adds click handlers for items within the tabs.
   * @private
   */},{key:'_addClickHandler',value:function _addClickHandler(){var _this=this;this.$element.off('click.zf.tabs').on('click.zf.tabs','.'+this.options.linkClass,function(e){e.preventDefault();e.stopPropagation();if($(this).hasClass('is-active')){return;}_this._handleTabChange($(this));});}/**
   * Adds keyboard event handlers for items within the tabs.
   * @private
   */},{key:'_addKeyHandler',value:function _addKeyHandler(){var _this=this;var $firstTab=_this.$element.find('li:first-of-type');var $lastTab=_this.$element.find('li:last-of-type');this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs',function(e){if(e.which===9)return;var $element=$(this),$elements=$element.parent('ul').children('li'),$prevElement,$nextElement;$elements.each(function(i){if($(this).is($element)){if(_this.options.wrapOnKeys){$prevElement=i===0?$elements.last():$elements.eq(i-1);$nextElement=i===$elements.length-1?$elements.first():$elements.eq(i+1);}else{$prevElement=$elements.eq(Math.max(0,i-1));$nextElement=$elements.eq(Math.min(i+1,$elements.length-1));}return;}});// handle keyboard event with keyboard util
Foundation.Keyboard.handleKey(e,'Tabs',{open:function open(){$element.find('[role="tab"]').focus();_this._handleTabChange($element);},previous:function previous(){$prevElement.find('[role="tab"]').focus();_this._handleTabChange($prevElement);},next:function next(){$nextElement.find('[role="tab"]').focus();_this._handleTabChange($nextElement);},handled:function handled(){e.stopPropagation();e.preventDefault();}});});}/**
   * Opens the tab `$targetContent` defined by `$target`.
   * @param {jQuery} $target - Tab to open.
   * @fires Tabs#change
   * @function
   */},{key:'_handleTabChange',value:function _handleTabChange($target){var $tabLink=$target.find('[role="tab"]'),hash=$tabLink[0].hash,$targetContent=this.$tabContent.find(hash),$oldTab=this.$element.find('.'+this.options.linkClass+'.is-active').removeClass('is-active').find('[role="tab"]').attr({'aria-selected':'false'});$('#'+$oldTab.attr('aria-controls')).removeClass('is-active').attr({'aria-hidden':'true'});$target.addClass('is-active');$tabLink.attr({'aria-selected':'true'});$targetContent.addClass('is-active').attr({'aria-hidden':'false'});/**
     * Fires when the plugin has successfully changed tabs.
     * @event Tabs#change
     */this.$element.trigger('change.zf.tabs',[$target]);}/**
   * Public method for selecting a content pane to display.
   * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
   * @function
   */},{key:'selectTab',value:function selectTab(elem){var idStr;if((typeof elem==='undefined'?'undefined':_typeof(elem))==='object'){idStr=elem[0].id;}else{idStr=elem;}if(idStr.indexOf('#')<0){idStr='#'+idStr;}var $target=this.$tabTitles.find('[href="'+idStr+'"]').parent('.'+this.options.linkClass);this._handleTabChange($target);}},{key:'_setHeight',/**
   * Sets the height of each panel to the height of the tallest panel.
   * If enabled in options, gets called on media query change.
   * If loading content via external source, can be called directly or with _reflow.
   * @function
   * @private
   */value:function _setHeight(){var max=0;this.$tabContent.find('.'+this.options.panelClass).css('height','').each(function(){var panel=$(this),isActive=panel.hasClass('is-active');if(!isActive){panel.css({'visibility':'hidden','display':'block'});}var temp=this.getBoundingClientRect().height;if(!isActive){panel.css({'visibility':'','display':''});}max=temp>max?temp:max;}).css('height',max+'px');}/**
   * Destroys an instance of an tabs.
   * @fires Tabs#destroyed
   */},{key:'destroy',value:function destroy(){this.$element.find('.'+this.options.linkClass).off('.zf.tabs').hide().end().find('.'+this.options.panelClass).hide();if(this.options.matchHeight){if(this._setHeightMqHandler!=null){$(window).off('changed.zf.mediaquery',this._setHeightMqHandler);}}Foundation.unregisterPlugin(this);}}]);return Tabs;}();Tabs.defaults={/**
   * Allows the window to scroll to content of active pane on load if set to true.
   * @option
   * @example false
   */autoFocus:false,/**
   * Allows keyboard input to 'wrap' around the tab links.
   * @option
   * @example true
   */wrapOnKeys:true,/**
   * Allows the tab content panes to match heights if set to true.
   * @option
   * @example false
   */matchHeight:false,/**
   * Class applied to `li`'s in tab link list.
   * @option
   * @example 'tabs-title'
   */linkClass:'tabs-title',/**
   * Class applied to the content containers.
   * @option
   * @example 'tabs-panel'
   */panelClass:'tabs-panel'};function checkClass($elem){return $elem.hasClass('is-active');}// Window exports
Foundation.plugin(Tabs,'Tabs');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Toggler module.
 * @module foundation.toggler
 * @requires foundation.util.motion
 * @requires foundation.util.triggers
 */var Toggler=function(){/**
   * Creates a new instance of Toggler.
   * @class
   * @fires Toggler#init
   * @param {Object} element - jQuery object to add the trigger to.
   * @param {Object} options - Overrides to the default plugin settings.
   */function Toggler(element,options){_classCallCheck(this,Toggler);this.$element=element;this.options=$.extend({},Toggler.defaults,element.data(),options);this.className='';this._init();this._events();Foundation.registerPlugin(this,'Toggler');}/**
   * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
   * @function
   * @private
   */_createClass(Toggler,[{key:'_init',value:function _init(){var input;// Parse animation classes if they were set
if(this.options.animate){input=this.options.animate.split(' ');this.animationIn=input[0];this.animationOut=input[1]||null;}// Otherwise, parse toggle class
else{input=this.$element.data('toggler');// Allow for a . at the beginning of the string
this.className=input[0]==='.'?input.slice(1):input;}// Add ARIA attributes to triggers
var id=this.$element[0].id;$('[data-open="'+id+'"], [data-close="'+id+'"], [data-toggle="'+id+'"]').attr('aria-controls',id);// If the target is hidden, add aria-hidden
this.$element.attr('aria-expanded',this.$element.is(':hidden')?false:true);}/**
   * Initializes events for the toggle trigger.
   * @function
   * @private
   */},{key:'_events',value:function _events(){this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger',this.toggle.bind(this));}/**
   * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
   * @function
   * @fires Toggler#on
   * @fires Toggler#off
   */},{key:'toggle',value:function toggle(){this[this.options.animate?'_toggleAnimate':'_toggleClass']();}},{key:'_toggleClass',value:function _toggleClass(){this.$element.toggleClass(this.className);var isOn=this.$element.hasClass(this.className);if(isOn){/**
       * Fires if the target element has the class after a toggle.
       * @event Toggler#on
       */this.$element.trigger('on.zf.toggler');}else{/**
       * Fires if the target element does not have the class after a toggle.
       * @event Toggler#off
       */this.$element.trigger('off.zf.toggler');}this._updateARIA(isOn);}},{key:'_toggleAnimate',value:function _toggleAnimate(){var _this=this;if(this.$element.is(':hidden')){Foundation.Motion.animateIn(this.$element,this.animationIn,function(){_this._updateARIA(true);this.trigger('on.zf.toggler');});}else{Foundation.Motion.animateOut(this.$element,this.animationOut,function(){_this._updateARIA(false);this.trigger('off.zf.toggler');});}}},{key:'_updateARIA',value:function _updateARIA(isOn){this.$element.attr('aria-expanded',isOn?true:false);}/**
   * Destroys the instance of Toggler on the element.
   * @function
   */},{key:'destroy',value:function destroy(){this.$element.off('.zf.toggler');Foundation.unregisterPlugin(this);}}]);return Toggler;}();Toggler.defaults={/**
   * Tells the plugin if the element should animated when toggled.
   * @option
   * @example false
   */animate:false};// Window exports
Foundation.plugin(Toggler,'Toggler');}(jQuery);
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}!function($){/**
 * Tooltip module.
 * @module foundation.tooltip
 * @requires foundation.util.box
 * @requires foundation.util.triggers
 */var Tooltip=function(){/**
   * Creates a new instance of a Tooltip.
   * @class
   * @fires Tooltip#init
   * @param {jQuery} element - jQuery object to attach a tooltip to.
   * @param {Object} options - object to extend the default configuration.
   */function Tooltip(element,options){_classCallCheck(this,Tooltip);this.$element=element;this.options=$.extend({},Tooltip.defaults,this.$element.data(),options);this.isActive=false;this.isClick=false;this._init();Foundation.registerPlugin(this,'Tooltip');}/**
   * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
   * @private
   */_createClass(Tooltip,[{key:'_init',value:function _init(){var elemId=this.$element.attr('aria-describedby')||Foundation.GetYoDigits(6,'tooltip');this.options.positionClass=this.options.positionClass||this._getPositionClass(this.$element);this.options.tipText=this.options.tipText||this.$element.attr('title');this.template=this.options.template?$(this.options.template):this._buildTemplate(elemId);this.template.appendTo(document.body).text(this.options.tipText).hide();this.$element.attr({'title':'','aria-describedby':elemId,'data-yeti-box':elemId,'data-toggle':elemId,'data-resize':elemId}).addClass(this.triggerClass);//helper variables to track movement on collisions
this.usedPositions=[];this.counter=4;this.classChanged=false;this._events();}/**
   * Grabs the current positioning class, if present, and returns the value or an empty string.
   * @private
   */},{key:'_getPositionClass',value:function _getPositionClass(element){if(!element){return'';}// var position = element.attr('class').match(/top|left|right/g);
var position=element[0].className.match(/\b(top|left|right)\b/g);position=position?position[0]:'';return position;}},{key:'_buildTemplate',/**
   * builds the tooltip element, adds attributes, and returns the template.
   * @private
   */value:function _buildTemplate(id){var templateClasses=(this.options.tooltipClass+' '+this.options.positionClass+' '+this.options.templateClasses).trim();var $template=$('<div></div>').addClass(templateClasses).attr({'role':'tooltip','aria-hidden':true,'data-is-active':false,'data-is-focus':false,'id':id});return $template;}/**
   * Function that gets called if a collision event is detected.
   * @param {String} position - positioning class to try
   * @private
   */},{key:'_reposition',value:function _reposition(position){this.usedPositions.push(position?position:'bottom');//default, try switching to opposite side
if(!position&&this.usedPositions.indexOf('top')<0){this.template.addClass('top');}else if(position==='top'&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}else if(position==='left'&&this.usedPositions.indexOf('right')<0){this.template.removeClass(position).addClass('right');}else if(position==='right'&&this.usedPositions.indexOf('left')<0){this.template.removeClass(position).addClass('left');}//if default change didn't work, try bottom or left first
else if(!position&&this.usedPositions.indexOf('top')>-1&&this.usedPositions.indexOf('left')<0){this.template.addClass('left');}else if(position==='top'&&this.usedPositions.indexOf('bottom')>-1&&this.usedPositions.indexOf('left')<0){this.template.removeClass(position).addClass('left');}else if(position==='left'&&this.usedPositions.indexOf('right')>-1&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}else if(position==='right'&&this.usedPositions.indexOf('left')>-1&&this.usedPositions.indexOf('bottom')<0){this.template.removeClass(position);}//if nothing cleared, set to bottom
else{this.template.removeClass(position);}this.classChanged=true;this.counter--;}/**
   * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
   * if the tooltip is larger than the screen width, default to full width - any user selected margin
   * @private
   */},{key:'_setPosition',value:function _setPosition(){var position=this._getPositionClass(this.template),$tipDims=Foundation.Box.GetDimensions(this.template),$anchorDims=Foundation.Box.GetDimensions(this.$element),direction=position==='left'?'left':position==='right'?'left':'top',param=direction==='top'?'height':'width',offset=param==='height'?this.options.vOffset:this.options.hOffset,_this=this;if($tipDims.width>=$tipDims.windowDims.width||!this.counter&&!Foundation.Box.ImNotTouchingYou(this.template)){this.template.offset(Foundation.Box.GetOffsets(this.template,this.$element,'center bottom',this.options.vOffset,this.options.hOffset,true)).css({// this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
'width':$anchorDims.windowDims.width-this.options.hOffset*2,'height':'auto'});return false;}this.template.offset(Foundation.Box.GetOffsets(this.template,this.$element,'center '+(position||'bottom'),this.options.vOffset,this.options.hOffset));while(!Foundation.Box.ImNotTouchingYou(this.template)&&this.counter){this._reposition(position);this._setPosition();}}/**
   * reveals the tooltip, and fires an event to close any other open tooltips on the page
   * @fires Tooltip#closeme
   * @fires Tooltip#show
   * @function
   */},{key:'show',value:function show(){if(this.options.showOn!=='all'&&!Foundation.MediaQuery.atLeast(this.options.showOn)){// console.error('The screen is too small to display this tooltip');
return false;}var _this=this;this.template.css('visibility','hidden').show();this._setPosition();/**
     * Fires to close all other open tooltips on the page
     * @event Closeme#tooltip
     */this.$element.trigger('closeme.zf.tooltip',this.template.attr('id'));this.template.attr({'data-is-active':true,'aria-hidden':false});_this.isActive=true;// console.log(this.template);
this.template.stop().hide().css('visibility','').fadeIn(this.options.fadeInDuration,function(){//maybe do stuff?
});/**
     * Fires when the tooltip is shown
     * @event Tooltip#show
     */this.$element.trigger('show.zf.tooltip');}/**
   * Hides the current tooltip, and resets the positioning class if it was changed due to collision
   * @fires Tooltip#hide
   * @function
   */},{key:'hide',value:function hide(){// console.log('hiding', this.$element.data('yeti-box'));
var _this=this;this.template.stop().attr({'aria-hidden':true,'data-is-active':false}).fadeOut(this.options.fadeOutDuration,function(){_this.isActive=false;_this.isClick=false;if(_this.classChanged){_this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);_this.usedPositions=[];_this.counter=4;_this.classChanged=false;}});/**
     * fires when the tooltip is hidden
     * @event Tooltip#hide
     */this.$element.trigger('hide.zf.tooltip');}/**
   * adds event listeners for the tooltip and its anchor
   * TODO combine some of the listeners like focus and mouseenter, etc.
   * @private
   */},{key:'_events',value:function _events(){var _this=this;var $template=this.template;var isFocus=false;if(!this.options.disableHover){this.$element.on('mouseenter.zf.tooltip',function(e){if(!_this.isActive){_this.timeout=setTimeout(function(){_this.show();},_this.options.hoverDelay);}}).on('mouseleave.zf.tooltip',function(e){clearTimeout(_this.timeout);if(!isFocus||_this.isClick&&!_this.options.clickOpen){_this.hide();}});}if(this.options.clickOpen){this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();if(_this.isClick){//_this.hide();
// _this.isClick = false;
}else{_this.isClick=true;if((_this.options.disableHover||!_this.$element.attr('tabindex'))&&!_this.isActive){_this.show();}}});}else{this.$element.on('mousedown.zf.tooltip',function(e){e.stopImmediatePropagation();_this.isClick=true;});}if(!this.options.disableForTouch){this.$element.on('tap.zf.tooltip touchend.zf.tooltip',function(e){_this.isActive?_this.hide():_this.show();});}this.$element.on({// 'toggle.zf.trigger': this.toggle.bind(this),
// 'close.zf.trigger': this.hide.bind(this)
'close.zf.trigger':this.hide.bind(this)});this.$element.on('focus.zf.tooltip',function(e){isFocus=true;if(_this.isClick){// If we're not showing open on clicks, we need to pretend a click-launched focus isn't
// a real focus, otherwise on hover and come back we get bad behavior
if(!_this.options.clickOpen){isFocus=false;}return false;}else{_this.show();}}).on('focusout.zf.tooltip',function(e){isFocus=false;_this.isClick=false;_this.hide();}).on('resizeme.zf.trigger',function(){if(_this.isActive){_this._setPosition();}});}/**
   * adds a toggle method, in addition to the static show() & hide() functions
   * @function
   */},{key:'toggle',value:function toggle(){if(this.isActive){this.hide();}else{this.show();}}/**
   * Destroys an instance of tooltip, removes template element from the view.
   * @function
   */},{key:'destroy',value:function destroy(){this.$element.attr('title',this.template.text()).off('.zf.trigger .zf.tootip')//  .removeClass('has-tip')
.removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');this.template.remove();Foundation.unregisterPlugin(this);}}]);return Tooltip;}();Tooltip.defaults={disableForTouch:false,/**
   * Time, in ms, before a tooltip should open on hover.
   * @option
   * @example 200
   */hoverDelay:200,/**
   * Time, in ms, a tooltip should take to fade into view.
   * @option
   * @example 150
   */fadeInDuration:150,/**
   * Time, in ms, a tooltip should take to fade out of view.
   * @option
   * @example 150
   */fadeOutDuration:150,/**
   * Disables hover events from opening the tooltip if set to true
   * @option
   * @example false
   */disableHover:false,/**
   * Optional addtional classes to apply to the tooltip template on init.
   * @option
   * @example 'my-cool-tip-class'
   */templateClasses:'',/**
   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
   * @option
   * @example 'tooltip'
   */tooltipClass:'tooltip',/**
   * Class applied to the tooltip anchor element.
   * @option
   * @example 'has-tip'
   */triggerClass:'has-tip',/**
   * Minimum breakpoint size at which to open the tooltip.
   * @option
   * @example 'small'
   */showOn:'small',/**
   * Custom template to be used to generate markup for tooltip.
   * @option
   * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'
   */template:'',/**
   * Text displayed in the tooltip template on open.
   * @option
   * @example 'Some cool space fact here.'
   */tipText:'',touchCloseText:'Tap to close.',/**
   * Allows the tooltip to remain open if triggered with a click or touch event.
   * @option
   * @example true
   */clickOpen:true,/**
   * Additional positioning classes, set by the JS
   * @option
   * @example 'top'
   */positionClass:'',/**
   * Distance, in pixels, the template should push away from the anchor on the Y axis.
   * @option
   * @example 10
   */vOffset:10,/**
   * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.
   * @option
   * @example 12
   */hOffset:12};/**
 * TODO utilize resize event trigger
 */// Window exports
Foundation.plugin(Tooltip,'Tooltip');}(jQuery);
'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */;(function(factory){if(typeof define==='function'&&define.amd){// AMD. Register as an anonymous module. 
define(['jquery'],factory);}else if((typeof exports==='undefined'?'undefined':_typeof(exports))==='object'){// Node/CommonJS 
factory(require('jquery'));}else{// Browser globals 
factory(window.jQuery||window.Zepto);}})(function($){/*>>core*//**
 * 
 * Magnific Popup Core JS file
 * 
 *//**
 * Private static constants
 */var CLOSE_EVENT='Close',BEFORE_CLOSE_EVENT='BeforeClose',AFTER_CLOSE_EVENT='AfterClose',BEFORE_APPEND_EVENT='BeforeAppend',MARKUP_PARSE_EVENT='MarkupParse',OPEN_EVENT='Open',CHANGE_EVENT='Change',NS='mfp',EVENT_NS='.'+NS,READY_CLASS='mfp-ready',REMOVING_CLASS='mfp-removing',PREVENT_CLOSE_CLASS='mfp-prevent-close';/**
 * Private vars 
 *//*jshint -W079 */var mfp,// As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
MagnificPopup=function MagnificPopup(){},_isJQ=!!window.jQuery,_prevStatus,_window=$(window),_document,_prevContentType,_wrapClasses,_currPopupType;/**
 * Private functions
 */var _mfpOn=function _mfpOn(name,f){mfp.ev.on(NS+name+EVENT_NS,f);},_getEl=function _getEl(className,appendTo,html,raw){var el=document.createElement('div');el.className='mfp-'+className;if(html){el.innerHTML=html;}if(!raw){el=$(el);if(appendTo){el.appendTo(appendTo);}}else if(appendTo){appendTo.appendChild(el);}return el;},_mfpTrigger=function _mfpTrigger(e,data){mfp.ev.triggerHandler(NS+e,data);if(mfp.st.callbacks){// converts "mfpEventName" to "eventName" callback and triggers it if it's present
e=e.charAt(0).toLowerCase()+e.slice(1);if(mfp.st.callbacks[e]){mfp.st.callbacks[e].apply(mfp,$.isArray(data)?data:[data]);}}},_getCloseBtn=function _getCloseBtn(type){if(type!==_currPopupType||!mfp.currTemplate.closeBtn){mfp.currTemplate.closeBtn=$(mfp.st.closeMarkup.replace('%title%',mfp.st.tClose));_currPopupType=type;}return mfp.currTemplate.closeBtn;},// Initialize Magnific Popup only when called at least once
_checkInstance=function _checkInstance(){if(!$.magnificPopup.instance){/*jshint -W020 */mfp=new MagnificPopup();mfp.init();$.magnificPopup.instance=mfp;}},// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
supportsTransitions=function supportsTransitions(){var s=document.createElement('p').style,// 's' for style. better to create an element if body yet to exist
v=['ms','O','Moz','Webkit'];// 'v' for vendor
if(s['transition']!==undefined){return true;}while(v.length){if(v.pop()+'Transition'in s){return true;}}return false;};/**
 * Public functions
 */MagnificPopup.prototype={constructor:MagnificPopup,/**
	 * Initializes Magnific Popup plugin. 
	 * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
	 */init:function init(){var appVersion=navigator.appVersion;mfp.isLowIE=mfp.isIE8=document.all&&!document.addEventListener;mfp.isAndroid=/android/gi.test(appVersion);mfp.isIOS=/iphone|ipad|ipod/gi.test(appVersion);mfp.supportsTransition=supportsTransitions();// We disable fixed positioned lightbox on devices that don't handle it nicely.
// If you know a better way of detecting this - let me know.
mfp.probablyMobile=mfp.isAndroid||mfp.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);_document=$(document);mfp.popupsCache={};},/**
	 * Opens popup
	 * @param  data [description]
	 */open:function open(data){var i;if(data.isObj===false){// convert jQuery collection to array to avoid conflicts later
mfp.items=data.items.toArray();mfp.index=0;var items=data.items,item;for(i=0;i<items.length;i++){item=items[i];if(item.parsed){item=item.el[0];}if(item===data.el[0]){mfp.index=i;break;}}}else{mfp.items=$.isArray(data.items)?data.items:[data.items];mfp.index=data.index||0;}// if popup is already opened - we just update the content
if(mfp.isOpen){mfp.updateItemHTML();return;}mfp.types=[];_wrapClasses='';if(data.mainEl&&data.mainEl.length){mfp.ev=data.mainEl.eq(0);}else{mfp.ev=_document;}if(data.key){if(!mfp.popupsCache[data.key]){mfp.popupsCache[data.key]={};}mfp.currTemplate=mfp.popupsCache[data.key];}else{mfp.currTemplate={};}mfp.st=$.extend(true,{},$.magnificPopup.defaults,data);mfp.fixedContentPos=mfp.st.fixedContentPos==='auto'?!mfp.probablyMobile:mfp.st.fixedContentPos;if(mfp.st.modal){mfp.st.closeOnContentClick=false;mfp.st.closeOnBgClick=false;mfp.st.showCloseBtn=false;mfp.st.enableEscapeKey=false;}// Building markup
// main containers are created only once
if(!mfp.bgOverlay){// Dark overlay
mfp.bgOverlay=_getEl('bg').on('click'+EVENT_NS,function(){mfp.close();});mfp.wrap=_getEl('wrap').attr('tabindex',-1).on('click'+EVENT_NS,function(e){if(mfp._checkIfClose(e.target)){mfp.close();}});mfp.container=_getEl('container',mfp.wrap);}mfp.contentContainer=_getEl('content');if(mfp.st.preloader){mfp.preloader=_getEl('preloader',mfp.container,mfp.st.tLoading);}// Initializing modules
var modules=$.magnificPopup.modules;for(i=0;i<modules.length;i++){var n=modules[i];n=n.charAt(0).toUpperCase()+n.slice(1);mfp['init'+n].call(mfp);}_mfpTrigger('BeforeOpen');if(mfp.st.showCloseBtn){// Close button
if(!mfp.st.closeBtnInside){mfp.wrap.append(_getCloseBtn());}else{_mfpOn(MARKUP_PARSE_EVENT,function(e,template,values,item){values.close_replaceWith=_getCloseBtn(item.type);});_wrapClasses+=' mfp-close-btn-in';}}if(mfp.st.alignTop){_wrapClasses+=' mfp-align-top';}if(mfp.fixedContentPos){mfp.wrap.css({overflow:mfp.st.overflowY,overflowX:'hidden',overflowY:mfp.st.overflowY});}else{mfp.wrap.css({top:_window.scrollTop(),position:'absolute'});}if(mfp.st.fixedBgPos===false||mfp.st.fixedBgPos==='auto'&&!mfp.fixedContentPos){mfp.bgOverlay.css({height:_document.height(),position:'absolute'});}if(mfp.st.enableEscapeKey){// Close on ESC key
_document.on('keyup'+EVENT_NS,function(e){if(e.keyCode===27){mfp.close();}});}_window.on('resize'+EVENT_NS,function(){mfp.updateSize();});if(!mfp.st.closeOnContentClick){_wrapClasses+=' mfp-auto-cursor';}if(_wrapClasses)mfp.wrap.addClass(_wrapClasses);// this triggers recalculation of layout, so we get it once to not to trigger twice
var windowHeight=mfp.wH=_window.height();var windowStyles={};if(mfp.fixedContentPos){if(mfp._hasScrollBar(windowHeight)){var s=mfp._getScrollbarSize();if(s){windowStyles.marginRight=s;}}}if(mfp.fixedContentPos){if(!mfp.isIE7){windowStyles.overflow='hidden';}else{// ie7 double-scroll bug
$('body, html').css('overflow','hidden');}}var classesToadd=mfp.st.mainClass;if(mfp.isIE7){classesToadd+=' mfp-ie7';}if(classesToadd){mfp._addClassToMFP(classesToadd);}// add content
mfp.updateItemHTML();_mfpTrigger('BuildControls');// remove scrollbar, add margin e.t.c
$('html').css(windowStyles);// add everything to DOM
mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo||$(document.body));// Save last focused element
mfp._lastFocusedEl=document.activeElement;// Wait for next cycle to allow CSS transition
setTimeout(function(){if(mfp.content){mfp._addClassToMFP(READY_CLASS);mfp._setFocus();}else{// if content is not defined (not loaded e.t.c) we add class only for BG
mfp.bgOverlay.addClass(READY_CLASS);}// Trap the focus in popup
_document.on('focusin'+EVENT_NS,mfp._onFocusIn);},16);mfp.isOpen=true;mfp.updateSize(windowHeight);_mfpTrigger(OPEN_EVENT);return data;},/**
	 * Closes the popup
	 */close:function close(){if(!mfp.isOpen)return;_mfpTrigger(BEFORE_CLOSE_EVENT);mfp.isOpen=false;// for CSS3 animation
if(mfp.st.removalDelay&&!mfp.isLowIE&&mfp.supportsTransition){mfp._addClassToMFP(REMOVING_CLASS);setTimeout(function(){mfp._close();},mfp.st.removalDelay);}else{mfp._close();}},/**
	 * Helper for close() function
	 */_close:function _close(){_mfpTrigger(CLOSE_EVENT);var classesToRemove=REMOVING_CLASS+' '+READY_CLASS+' ';mfp.bgOverlay.detach();mfp.wrap.detach();mfp.container.empty();if(mfp.st.mainClass){classesToRemove+=mfp.st.mainClass+' ';}mfp._removeClassFromMFP(classesToRemove);if(mfp.fixedContentPos){var windowStyles={marginRight:''};if(mfp.isIE7){$('body, html').css('overflow','');}else{windowStyles.overflow='';}$('html').css(windowStyles);}_document.off('keyup'+EVENT_NS+' focusin'+EVENT_NS);mfp.ev.off(EVENT_NS);// clean up DOM elements that aren't removed
mfp.wrap.attr('class','mfp-wrap').removeAttr('style');mfp.bgOverlay.attr('class','mfp-bg');mfp.container.attr('class','mfp-container');// remove close button from target element
if(mfp.st.showCloseBtn&&(!mfp.st.closeBtnInside||mfp.currTemplate[mfp.currItem.type]===true)){if(mfp.currTemplate.closeBtn)mfp.currTemplate.closeBtn.detach();}if(mfp.st.autoFocusLast&&mfp._lastFocusedEl){$(mfp._lastFocusedEl).focus();// put tab focus back
}mfp.currItem=null;mfp.content=null;mfp.currTemplate=null;mfp.prevHeight=0;_mfpTrigger(AFTER_CLOSE_EVENT);},updateSize:function updateSize(winHeight){if(mfp.isIOS){// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
var zoomLevel=document.documentElement.clientWidth/window.innerWidth;var height=window.innerHeight*zoomLevel;mfp.wrap.css('height',height);mfp.wH=height;}else{mfp.wH=winHeight||_window.height();}// Fixes #84: popup incorrectly positioned with position:relative on body
if(!mfp.fixedContentPos){mfp.wrap.css('height',mfp.wH);}_mfpTrigger('Resize');},/**
	 * Set content of popup based on current index
	 */updateItemHTML:function updateItemHTML(){var item=mfp.items[mfp.index];// Detach and perform modifications
mfp.contentContainer.detach();if(mfp.content)mfp.content.detach();if(!item.parsed){item=mfp.parseEl(mfp.index);}var type=item.type;_mfpTrigger('BeforeChange',[mfp.currItem?mfp.currItem.type:'',type]);// BeforeChange event works like so:
// _mfpOn('BeforeChange', function(e, prevType, newType) { });
mfp.currItem=item;if(!mfp.currTemplate[type]){var markup=mfp.st[type]?mfp.st[type].markup:false;// allows to modify markup
_mfpTrigger('FirstMarkupParse',markup);if(markup){mfp.currTemplate[type]=$(markup);}else{// if there is no markup found we just define that template is parsed
mfp.currTemplate[type]=true;}}if(_prevContentType&&_prevContentType!==item.type){mfp.container.removeClass('mfp-'+_prevContentType+'-holder');}var newContent=mfp['get'+type.charAt(0).toUpperCase()+type.slice(1)](item,mfp.currTemplate[type]);mfp.appendContent(newContent,type);item.preloaded=true;_mfpTrigger(CHANGE_EVENT,item);_prevContentType=item.type;// Append container back after its content changed
mfp.container.prepend(mfp.contentContainer);_mfpTrigger('AfterChange');},/**
	 * Set HTML content of popup
	 */appendContent:function appendContent(newContent,type){mfp.content=newContent;if(newContent){if(mfp.st.showCloseBtn&&mfp.st.closeBtnInside&&mfp.currTemplate[type]===true){// if there is no markup, we just append close button element inside
if(!mfp.content.find('.mfp-close').length){mfp.content.append(_getCloseBtn());}}else{mfp.content=newContent;}}else{mfp.content='';}_mfpTrigger(BEFORE_APPEND_EVENT);mfp.container.addClass('mfp-'+type+'-holder');mfp.contentContainer.append(mfp.content);},/**
	 * Creates Magnific Popup data object based on given data
	 * @param  {int} index Index of item to parse
	 */parseEl:function parseEl(index){var item=mfp.items[index],type;if(item.tagName){item={el:$(item)};}else{type=item.type;item={data:item,src:item.src};}if(item.el){var types=mfp.types;// check for 'mfp-TYPE' class
for(var i=0;i<types.length;i++){if(item.el.hasClass('mfp-'+types[i])){type=types[i];break;}}item.src=item.el.attr('data-mfp-src');if(!item.src){item.src=item.el.attr('href');}}item.type=type||mfp.st.type||'inline';item.index=index;item.parsed=true;mfp.items[index]=item;_mfpTrigger('ElementParse',item);return mfp.items[index];},/**
	 * Initializes single popup or a group of popups
	 */addGroup:function addGroup(el,options){var eHandler=function eHandler(e){e.mfpEl=this;mfp._openClick(e,el,options);};if(!options){options={};}var eName='click.magnificPopup';options.mainEl=el;if(options.items){options.isObj=true;el.off(eName).on(eName,eHandler);}else{options.isObj=false;if(options.delegate){el.off(eName).on(eName,options.delegate,eHandler);}else{options.items=el;el.off(eName).on(eName,eHandler);}}},_openClick:function _openClick(e,el,options){var midClick=options.midClick!==undefined?options.midClick:$.magnificPopup.defaults.midClick;if(!midClick&&(e.which===2||e.ctrlKey||e.metaKey||e.altKey||e.shiftKey)){return;}var disableOn=options.disableOn!==undefined?options.disableOn:$.magnificPopup.defaults.disableOn;if(disableOn){if($.isFunction(disableOn)){if(!disableOn.call(mfp)){return true;}}else{// else it's number
if(_window.width()<disableOn){return true;}}}if(e.type){e.preventDefault();// This will prevent popup from closing if element is inside and popup is already opened
if(mfp.isOpen){e.stopPropagation();}}options.el=$(e.mfpEl);if(options.delegate){options.items=el.find(options.delegate);}mfp.open(options);},/**
	 * Updates text on preloader
	 */updateStatus:function updateStatus(status,text){if(mfp.preloader){if(_prevStatus!==status){mfp.container.removeClass('mfp-s-'+_prevStatus);}if(!text&&status==='loading'){text=mfp.st.tLoading;}var data={status:status,text:text};// allows to modify status
_mfpTrigger('UpdateStatus',data);status=data.status;text=data.text;mfp.preloader.html(text);mfp.preloader.find('a').on('click',function(e){e.stopImmediatePropagation();});mfp.container.addClass('mfp-s-'+status);_prevStatus=status;}},/*
		"Private" helpers that aren't private at all
	 */// Check to close popup or not
// "target" is an element that was clicked
_checkIfClose:function _checkIfClose(target){if($(target).hasClass(PREVENT_CLOSE_CLASS)){return;}var closeOnContent=mfp.st.closeOnContentClick;var closeOnBg=mfp.st.closeOnBgClick;if(closeOnContent&&closeOnBg){return true;}else{// We close the popup if click is on close button or on preloader. Or if there is no content.
if(!mfp.content||$(target).hasClass('mfp-close')||mfp.preloader&&target===mfp.preloader[0]){return true;}// if click is outside the content
if(target!==mfp.content[0]&&!$.contains(mfp.content[0],target)){if(closeOnBg){// last check, if the clicked element is in DOM, (in case it's removed onclick)
if($.contains(document,target)){return true;}}}else if(closeOnContent){return true;}}return false;},_addClassToMFP:function _addClassToMFP(cName){mfp.bgOverlay.addClass(cName);mfp.wrap.addClass(cName);},_removeClassFromMFP:function _removeClassFromMFP(cName){this.bgOverlay.removeClass(cName);mfp.wrap.removeClass(cName);},_hasScrollBar:function _hasScrollBar(winHeight){return(mfp.isIE7?_document.height():document.body.scrollHeight)>(winHeight||_window.height());},_setFocus:function _setFocus(){(mfp.st.focus?mfp.content.find(mfp.st.focus).eq(0):mfp.wrap).focus();},_onFocusIn:function _onFocusIn(e){if(e.target!==mfp.wrap[0]&&!$.contains(mfp.wrap[0],e.target)){mfp._setFocus();return false;}},_parseMarkup:function _parseMarkup(template,values,item){var arr;if(item.data){values=$.extend(item.data,values);}_mfpTrigger(MARKUP_PARSE_EVENT,[template,values,item]);$.each(values,function(key,value){if(value===undefined||value===false){return true;}arr=key.split('_');if(arr.length>1){var el=template.find(EVENT_NS+'-'+arr[0]);if(el.length>0){var attr=arr[1];if(attr==='replaceWith'){if(el[0]!==value[0]){el.replaceWith(value);}}else if(attr==='img'){if(el.is('img')){el.attr('src',value);}else{el.replaceWith($('<img>').attr('src',value).attr('class',el.attr('class')));}}else{el.attr(arr[1],value);}}}else{template.find(EVENT_NS+'-'+key).html(value);}});},_getScrollbarSize:function _getScrollbarSize(){// thx David
if(mfp.scrollbarSize===undefined){var scrollDiv=document.createElement("div");scrollDiv.style.cssText='width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';document.body.appendChild(scrollDiv);mfp.scrollbarSize=scrollDiv.offsetWidth-scrollDiv.clientWidth;document.body.removeChild(scrollDiv);}return mfp.scrollbarSize;}};/* MagnificPopup core prototype end *//**
 * Public static functions
 */$.magnificPopup={instance:null,proto:MagnificPopup.prototype,modules:[],open:function open(options,index){_checkInstance();if(!options){options={};}else{options=$.extend(true,{},options);}options.isObj=true;options.index=index||0;return this.instance.open(options);},close:function close(){return $.magnificPopup.instance&&$.magnificPopup.instance.close();},registerModule:function registerModule(name,module){if(module.options){$.magnificPopup.defaults[name]=module.options;}$.extend(this.proto,module.proto);this.modules.push(name);},defaults:{// Info about options is in docs:
// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options
disableOn:0,key:null,midClick:false,mainClass:'',preloader:true,focus:'',// CSS selector of input to focus after popup is opened
closeOnContentClick:false,closeOnBgClick:true,closeBtnInside:true,showCloseBtn:true,enableEscapeKey:true,modal:false,alignTop:false,removalDelay:0,prependTo:null,fixedContentPos:'auto',fixedBgPos:'auto',overflowY:'auto',closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:'Close (Esc)',tLoading:'Loading...',autoFocusLast:true}};$.fn.magnificPopup=function(options){_checkInstance();var jqEl=$(this);// We call some API method of first param is a string
if(typeof options==="string"){if(options==='open'){var items,itemOpts=_isJQ?jqEl.data('magnificPopup'):jqEl[0].magnificPopup,index=parseInt(arguments[1],10)||0;if(itemOpts.items){items=itemOpts.items[index];}else{items=jqEl;if(itemOpts.delegate){items=items.find(itemOpts.delegate);}items=items.eq(index);}mfp._openClick({mfpEl:items},jqEl,itemOpts);}else{if(mfp.isOpen)mfp[options].apply(mfp,Array.prototype.slice.call(arguments,1));}}else{// clone options obj
options=$.extend(true,{},options);/*
		 * As Zepto doesn't support .data() method for objects
		 * and it works only in normal browsers
		 * we assign "options" object directly to the DOM element. FTW!
		 */if(_isJQ){jqEl.data('magnificPopup',options);}else{jqEl[0].magnificPopup=options;}mfp.addGroup(jqEl,options);}return jqEl;};/*>>core*//*>>inline*/var INLINE_NS='inline',_hiddenClass,_inlinePlaceholder,_lastInlineElement,_putInlineElementsBack=function _putInlineElementsBack(){if(_lastInlineElement){_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();_lastInlineElement=null;}};$.magnificPopup.registerModule(INLINE_NS,{options:{hiddenClass:'hide',// will be appended with `mfp-` prefix
markup:'',tNotFound:'Content not found'},proto:{initInline:function initInline(){mfp.types.push(INLINE_NS);_mfpOn(CLOSE_EVENT+'.'+INLINE_NS,function(){_putInlineElementsBack();});},getInline:function getInline(item,template){_putInlineElementsBack();if(item.src){var inlineSt=mfp.st.inline,el=$(item.src);if(el.length){// If target element has parent - we replace it with placeholder and put it back after popup is closed
var parent=el[0].parentNode;if(parent&&parent.tagName){if(!_inlinePlaceholder){_hiddenClass=inlineSt.hiddenClass;_inlinePlaceholder=_getEl(_hiddenClass);_hiddenClass='mfp-'+_hiddenClass;}// replace target inline element with placeholder
_lastInlineElement=el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);}mfp.updateStatus('ready');}else{mfp.updateStatus('error',inlineSt.tNotFound);el=$('<div>');}item.inlineElement=el;return el;}mfp.updateStatus('ready');mfp._parseMarkup(template,{},item);return template;}}});/*>>inline*//*>>ajax*/var AJAX_NS='ajax',_ajaxCur,_removeAjaxCursor=function _removeAjaxCursor(){if(_ajaxCur){$(document.body).removeClass(_ajaxCur);}},_destroyAjaxRequest=function _destroyAjaxRequest(){_removeAjaxCursor();if(mfp.req){mfp.req.abort();}};$.magnificPopup.registerModule(AJAX_NS,{options:{settings:null,cursor:'mfp-ajax-cur',tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function initAjax(){mfp.types.push(AJAX_NS);_ajaxCur=mfp.st.ajax.cursor;_mfpOn(CLOSE_EVENT+'.'+AJAX_NS,_destroyAjaxRequest);_mfpOn('BeforeChange.'+AJAX_NS,_destroyAjaxRequest);},getAjax:function getAjax(item){if(_ajaxCur){$(document.body).addClass(_ajaxCur);}mfp.updateStatus('loading');var opts=$.extend({url:item.src,success:function success(data,textStatus,jqXHR){var temp={data:data,xhr:jqXHR};_mfpTrigger('ParseAjax',temp);mfp.appendContent($(temp.data),AJAX_NS);item.finished=true;_removeAjaxCursor();mfp._setFocus();setTimeout(function(){mfp.wrap.addClass(READY_CLASS);},16);mfp.updateStatus('ready');_mfpTrigger('AjaxContentAdded');},error:function error(){_removeAjaxCursor();item.finished=item.loadError=true;mfp.updateStatus('error',mfp.st.ajax.tError.replace('%url%',item.src));}},mfp.st.ajax.settings);mfp.req=$.ajax(opts);return'';}}});/*>>ajax*//*>>image*/var _imgInterval,_getTitle=function _getTitle(item){if(item.data&&item.data.title!==undefined)return item.data.title;var src=mfp.st.image.titleSrc;if(src){if($.isFunction(src)){return src.call(mfp,item);}else if(item.el){return item.el.attr(src)||'';}}return'';};$.magnificPopup.registerModule('image',{options:{markup:'<div class="mfp-figure">'+'<div class="mfp-close"></div>'+'<figure>'+'<div class="mfp-img"></div>'+'<figcaption>'+'<div class="mfp-bottom-bar">'+'<div class="mfp-title"></div>'+'<div class="mfp-counter"></div>'+'</div>'+'</figcaption>'+'</figure>'+'</div>',cursor:'mfp-zoom-out-cur',titleSrc:'title',verticalFit:true,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function initImage(){var imgSt=mfp.st.image,ns='.image';mfp.types.push('image');_mfpOn(OPEN_EVENT+ns,function(){if(mfp.currItem.type==='image'&&imgSt.cursor){$(document.body).addClass(imgSt.cursor);}});_mfpOn(CLOSE_EVENT+ns,function(){if(imgSt.cursor){$(document.body).removeClass(imgSt.cursor);}_window.off('resize'+EVENT_NS);});_mfpOn('Resize'+ns,mfp.resizeImage);if(mfp.isLowIE){_mfpOn('AfterChange',mfp.resizeImage);}},resizeImage:function resizeImage(){var item=mfp.currItem;if(!item||!item.img)return;if(mfp.st.image.verticalFit){var decr=0;// fix box-sizing in ie7/8
if(mfp.isLowIE){decr=parseInt(item.img.css('padding-top'),10)+parseInt(item.img.css('padding-bottom'),10);}item.img.css('max-height',mfp.wH-decr);}},_onImageHasSize:function _onImageHasSize(item){if(item.img){item.hasSize=true;if(_imgInterval){clearInterval(_imgInterval);}item.isCheckingImgSize=false;_mfpTrigger('ImageHasSize',item);if(item.imgHidden){if(mfp.content)mfp.content.removeClass('mfp-loading');item.imgHidden=false;}}},/**
		 * Function that loops until the image has size to display elements that rely on it asap
		 */findImageSize:function findImageSize(item){var counter=0,img=item.img[0],mfpSetInterval=function mfpSetInterval(delay){if(_imgInterval){clearInterval(_imgInterval);}// decelerating interval that checks for size of an image
_imgInterval=setInterval(function(){if(img.naturalWidth>0){mfp._onImageHasSize(item);return;}if(counter>200){clearInterval(_imgInterval);}counter++;if(counter===3){mfpSetInterval(10);}else if(counter===40){mfpSetInterval(50);}else if(counter===100){mfpSetInterval(500);}},delay);};mfpSetInterval(1);},getImage:function getImage(item,template){var guard=0,// image load complete handler
onLoadComplete=function onLoadComplete(){if(item){if(item.img[0].complete){item.img.off('.mfploader');if(item===mfp.currItem){mfp._onImageHasSize(item);mfp.updateStatus('ready');}item.hasSize=true;item.loaded=true;_mfpTrigger('ImageLoadComplete');}else{// if image complete check fails 200 times (20 sec), we assume that there was an error.
guard++;if(guard<200){setTimeout(onLoadComplete,100);}else{onLoadError();}}}},// image error handler
onLoadError=function onLoadError(){if(item){item.img.off('.mfploader');if(item===mfp.currItem){mfp._onImageHasSize(item);mfp.updateStatus('error',imgSt.tError.replace('%url%',item.src));}item.hasSize=true;item.loaded=true;item.loadError=true;}},imgSt=mfp.st.image;var el=template.find('.mfp-img');if(el.length){var img=document.createElement('img');img.className='mfp-img';if(item.el&&item.el.find('img').length){img.alt=item.el.find('img').attr('alt');}item.img=$(img).on('load.mfploader',onLoadComplete).on('error.mfploader',onLoadError);img.src=item.src;// without clone() "error" event is not firing when IMG is replaced by new IMG
// TODO: find a way to avoid such cloning
if(el.is('img')){item.img=item.img.clone();}img=item.img[0];if(img.naturalWidth>0){item.hasSize=true;}else if(!img.width){item.hasSize=false;}}mfp._parseMarkup(template,{title:_getTitle(item),img_replaceWith:item.img},item);mfp.resizeImage();if(item.hasSize){if(_imgInterval)clearInterval(_imgInterval);if(item.loadError){template.addClass('mfp-loading');mfp.updateStatus('error',imgSt.tError.replace('%url%',item.src));}else{template.removeClass('mfp-loading');mfp.updateStatus('ready');}return template;}mfp.updateStatus('loading');item.loading=true;if(!item.hasSize){item.imgHidden=true;template.addClass('mfp-loading');mfp.findImageSize(item);}return template;}}});/*>>image*//*>>zoom*/var hasMozTransform,getHasMozTransform=function getHasMozTransform(){if(hasMozTransform===undefined){hasMozTransform=document.createElement('p').style.MozTransform!==undefined;}return hasMozTransform;};$.magnificPopup.registerModule('zoom',{options:{enabled:false,easing:'ease-in-out',duration:300,opener:function opener(element){return element.is('img')?element:element.find('img');}},proto:{initZoom:function initZoom(){var zoomSt=mfp.st.zoom,ns='.zoom',image;if(!zoomSt.enabled||!mfp.supportsTransition){return;}var duration=zoomSt.duration,getElToAnimate=function getElToAnimate(image){var newImg=image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),transition='all '+zoomSt.duration/1000+'s '+zoomSt.easing,cssObj={position:'fixed',zIndex:9999,left:0,top:0,'-webkit-backface-visibility':'hidden'},t='transition';cssObj['-webkit-'+t]=cssObj['-moz-'+t]=cssObj['-o-'+t]=cssObj[t]=transition;newImg.css(cssObj);return newImg;},showMainContent=function showMainContent(){mfp.content.css('visibility','visible');},openTimeout,animatedImg;_mfpOn('BuildControls'+ns,function(){if(mfp._allowZoom()){clearTimeout(openTimeout);mfp.content.css('visibility','hidden');// Basically, all code below does is clones existing image, puts in on top of the current one and animated it
image=mfp._getItemToZoom();if(!image){showMainContent();return;}animatedImg=getElToAnimate(image);animatedImg.css(mfp._getOffset());mfp.wrap.append(animatedImg);openTimeout=setTimeout(function(){animatedImg.css(mfp._getOffset(true));openTimeout=setTimeout(function(){showMainContent();setTimeout(function(){animatedImg.remove();image=animatedImg=null;_mfpTrigger('ZoomAnimationEnded');},16);// avoid blink when switching images
},duration);// this timeout equals animation duration
},16);// by adding this timeout we avoid short glitch at the beginning of animation
// Lots of timeouts...
}});_mfpOn(BEFORE_CLOSE_EVENT+ns,function(){if(mfp._allowZoom()){clearTimeout(openTimeout);mfp.st.removalDelay=duration;if(!image){image=mfp._getItemToZoom();if(!image){return;}animatedImg=getElToAnimate(image);}animatedImg.css(mfp._getOffset(true));mfp.wrap.append(animatedImg);mfp.content.css('visibility','hidden');setTimeout(function(){animatedImg.css(mfp._getOffset());},16);}});_mfpOn(CLOSE_EVENT+ns,function(){if(mfp._allowZoom()){showMainContent();if(animatedImg){animatedImg.remove();}image=null;}});},_allowZoom:function _allowZoom(){return mfp.currItem.type==='image';},_getItemToZoom:function _getItemToZoom(){if(mfp.currItem.hasSize){return mfp.currItem.img;}else{return false;}},// Get element postion relative to viewport
_getOffset:function _getOffset(isLarge){var el;if(isLarge){el=mfp.currItem.img;}else{el=mfp.st.zoom.opener(mfp.currItem.el||mfp.currItem);}var offset=el.offset();var paddingTop=parseInt(el.css('padding-top'),10);var paddingBottom=parseInt(el.css('padding-bottom'),10);offset.top-=$(window).scrollTop()-paddingTop;/*

			Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.

			 */var obj={width:el.width(),// fix Zepto height+padding issue
height:(_isJQ?el.innerHeight():el[0].offsetHeight)-paddingBottom-paddingTop};// I hate to do this, but there is no another option
if(getHasMozTransform()){obj['-moz-transform']=obj['transform']='translate('+offset.left+'px,'+offset.top+'px)';}else{obj.left=offset.left;obj.top=offset.top;}return obj;}}});/*>>zoom*//*>>iframe*/var IFRAME_NS='iframe',_emptyPage='//about:blank',_fixIframeBugs=function _fixIframeBugs(isShowing){if(mfp.currTemplate[IFRAME_NS]){var el=mfp.currTemplate[IFRAME_NS].find('iframe');if(el.length){// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
if(!isShowing){el[0].src=_emptyPage;}// IE8 black screen bug fix
if(mfp.isIE8){el.css('display',isShowing?'block':'none');}}}};$.magnificPopup.registerModule(IFRAME_NS,{options:{markup:'<div class="mfp-iframe-scaler">'+'<div class="mfp-close"></div>'+'<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>'+'</div>',srcAction:'iframe_src',// we don't care and support only one default type of URL by default
patterns:{youtube:{index:'youtube.com',id:'v=',src:'//www.youtube.com/embed/%id%?autoplay=1'},vimeo:{index:'vimeo.com/',id:'/',src:'//player.vimeo.com/video/%id%?autoplay=1'},gmaps:{index:'//maps.google.',src:'%id%&output=embed'}}},proto:{initIframe:function initIframe(){mfp.types.push(IFRAME_NS);_mfpOn('BeforeChange',function(e,prevType,newType){if(prevType!==newType){if(prevType===IFRAME_NS){_fixIframeBugs();// iframe if removed
}else if(newType===IFRAME_NS){_fixIframeBugs(true);// iframe is showing
}}// else {
// iframe source is switched, don't do anything
//}
});_mfpOn(CLOSE_EVENT+'.'+IFRAME_NS,function(){_fixIframeBugs();});},getIframe:function getIframe(item,template){var embedSrc=item.src;var iframeSt=mfp.st.iframe;$.each(iframeSt.patterns,function(){if(embedSrc.indexOf(this.index)>-1){if(this.id){if(typeof this.id==='string'){embedSrc=embedSrc.substr(embedSrc.lastIndexOf(this.id)+this.id.length,embedSrc.length);}else{embedSrc=this.id.call(this,embedSrc);}}embedSrc=this.src.replace('%id%',embedSrc);return false;// break;
}});var dataObj={};if(iframeSt.srcAction){dataObj[iframeSt.srcAction]=embedSrc;}mfp._parseMarkup(template,dataObj,item);mfp.updateStatus('ready');return template;}}});/*>>iframe*//*>>gallery*//**
 * Get looped index depending on number of slides
 */var _getLoopedId=function _getLoopedId(index){var numSlides=mfp.items.length;if(index>numSlides-1){return index-numSlides;}else if(index<0){return numSlides+index;}return index;},_replaceCurrTotal=function _replaceCurrTotal(text,curr,total){return text.replace(/%curr%/gi,curr+1).replace(/%total%/gi,total);};$.magnificPopup.registerModule('gallery',{options:{enabled:false,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:true,arrows:true,tPrev:'Previous (Left arrow key)',tNext:'Next (Right arrow key)',tCounter:'%curr% of %total%'},proto:{initGallery:function initGallery(){var gSt=mfp.st.gallery,ns='.mfp-gallery';mfp.direction=true;// true - next, false - prev
if(!gSt||!gSt.enabled)return false;_wrapClasses+=' mfp-gallery';_mfpOn(OPEN_EVENT+ns,function(){if(gSt.navigateByImgClick){mfp.wrap.on('click'+ns,'.mfp-img',function(){if(mfp.items.length>1){mfp.next();return false;}});}_document.on('keydown'+ns,function(e){if(e.keyCode===37){mfp.prev();}else if(e.keyCode===39){mfp.next();}});});_mfpOn('UpdateStatus'+ns,function(e,data){if(data.text){data.text=_replaceCurrTotal(data.text,mfp.currItem.index,mfp.items.length);}});_mfpOn(MARKUP_PARSE_EVENT+ns,function(e,element,values,item){var l=mfp.items.length;values.counter=l>1?_replaceCurrTotal(gSt.tCounter,item.index,l):'';});_mfpOn('BuildControls'+ns,function(){if(mfp.items.length>1&&gSt.arrows&&!mfp.arrowLeft){var markup=gSt.arrowMarkup,arrowLeft=mfp.arrowLeft=$(markup.replace(/%title%/gi,gSt.tPrev).replace(/%dir%/gi,'left')).addClass(PREVENT_CLOSE_CLASS),arrowRight=mfp.arrowRight=$(markup.replace(/%title%/gi,gSt.tNext).replace(/%dir%/gi,'right')).addClass(PREVENT_CLOSE_CLASS);arrowLeft.click(function(){mfp.prev();});arrowRight.click(function(){mfp.next();});mfp.container.append(arrowLeft.add(arrowRight));}});_mfpOn(CHANGE_EVENT+ns,function(){if(mfp._preloadTimeout)clearTimeout(mfp._preloadTimeout);mfp._preloadTimeout=setTimeout(function(){mfp.preloadNearbyImages();mfp._preloadTimeout=null;},16);});_mfpOn(CLOSE_EVENT+ns,function(){_document.off(ns);mfp.wrap.off('click'+ns);mfp.arrowRight=mfp.arrowLeft=null;});},next:function next(){mfp.direction=true;mfp.index=_getLoopedId(mfp.index+1);mfp.updateItemHTML();},prev:function prev(){mfp.direction=false;mfp.index=_getLoopedId(mfp.index-1);mfp.updateItemHTML();},goTo:function goTo(newIndex){mfp.direction=newIndex>=mfp.index;mfp.index=newIndex;mfp.updateItemHTML();},preloadNearbyImages:function preloadNearbyImages(){var p=mfp.st.gallery.preload,preloadBefore=Math.min(p[0],mfp.items.length),preloadAfter=Math.min(p[1],mfp.items.length),i;for(i=1;i<=(mfp.direction?preloadAfter:preloadBefore);i++){mfp._preloadItem(mfp.index+i);}for(i=1;i<=(mfp.direction?preloadBefore:preloadAfter);i++){mfp._preloadItem(mfp.index-i);}},_preloadItem:function _preloadItem(index){index=_getLoopedId(index);if(mfp.items[index].preloaded){return;}var item=mfp.items[index];if(!item.parsed){item=mfp.parseEl(index);}_mfpTrigger('LazyLoad',item);if(item.type==='image'){item.img=$('<img class="mfp-img" />').on('load.mfploader',function(){item.hasSize=true;}).on('error.mfploader',function(){item.hasSize=true;item.loadError=true;_mfpTrigger('LazyLoadError',item);}).attr('src',item.src);}item.preloaded=true;}}});/*>>gallery*//*>>retina*/var RETINA_NS='retina';$.magnificPopup.registerModule(RETINA_NS,{options:{replaceSrc:function replaceSrc(item){return item.src.replace(/\.\w+$/,function(m){return'@2x'+m;});},ratio:1// Function or number.  Set to 1 to disable.
},proto:{initRetina:function initRetina(){if(window.devicePixelRatio>1){var st=mfp.st.retina,ratio=st.ratio;ratio=!isNaN(ratio)?ratio:ratio();if(ratio>1){_mfpOn('ImageHasSize'+'.'+RETINA_NS,function(e,item){item.img.css({'max-width':item.img[0].naturalWidth/ratio,'width':'100%'});});_mfpOn('ElementParse'+'.'+RETINA_NS,function(e,item){item.src=st.replaceSrc(item,ratio);});}}}}});/*>>retina*/_checkInstance();});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24uY29yZS5qcyIsImZvdW5kYXRpb24udXRpbC5ib3guanMiLCJmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQuanMiLCJmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeS5qcyIsImZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiLCJmb3VuZGF0aW9uLnV0aWwubmVzdC5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyLmpzIiwiZm91bmRhdGlvbi51dGlsLnRvdWNoLmpzIiwiZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzIiwiZm91bmRhdGlvbi5hYmlkZS5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uLmpzIiwiZm91bmRhdGlvbi5hY2NvcmRpb25NZW51LmpzIiwiZm91bmRhdGlvbi5kcmlsbGRvd24uanMiLCJmb3VuZGF0aW9uLmRyb3Bkb3duLmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bk1lbnUuanMiLCJmb3VuZGF0aW9uLmVxdWFsaXplci5qcyIsImZvdW5kYXRpb24uaW50ZXJjaGFuZ2UuanMiLCJmb3VuZGF0aW9uLm1hZ2VsbGFuLmpzIiwiZm91bmRhdGlvbi5vZmZjYW52YXMuanMiLCJmb3VuZGF0aW9uLm9yYml0LmpzIiwiZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudS5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZS5qcyIsImZvdW5kYXRpb24ucmV2ZWFsLmpzIiwiZm91bmRhdGlvbi5zbGlkZXIuanMiLCJmb3VuZGF0aW9uLnN0aWNreS5qcyIsImZvdW5kYXRpb24udGFicy5qcyIsImZvdW5kYXRpb24udG9nZ2xlci5qcyIsImZvdW5kYXRpb24udG9vbHRpcC5qcyIsImpxdWVyeS5tYWduaWZpYy1wb3B1cC5qcyJdLCJuYW1lcyI6WyIkIiwiRk9VTkRBVElPTl9WRVJTSU9OIiwiRm91bmRhdGlvbiIsInZlcnNpb24iLCJfcGx1Z2lucyIsIl91dWlkcyIsInJ0bCIsImF0dHIiLCJwbHVnaW4iLCJuYW1lIiwiY2xhc3NOYW1lIiwiZnVuY3Rpb25OYW1lIiwiYXR0ck5hbWUiLCJoeXBoZW5hdGUiLCJyZWdpc3RlclBsdWdpbiIsInBsdWdpbk5hbWUiLCJjb25zdHJ1Y3RvciIsInRvTG93ZXJDYXNlIiwidXVpZCIsIkdldFlvRGlnaXRzIiwiJGVsZW1lbnQiLCJkYXRhIiwidHJpZ2dlciIsInB1c2giLCJ1bnJlZ2lzdGVyUGx1Z2luIiwic3BsaWNlIiwiaW5kZXhPZiIsInJlbW92ZUF0dHIiLCJyZW1vdmVEYXRhIiwicHJvcCIsInJlSW5pdCIsInBsdWdpbnMiLCJpc0pRIiwiZWFjaCIsIl9pbml0IiwidHlwZSIsIl90aGlzIiwiZm5zIiwicGxncyIsImZvckVhY2giLCJwIiwiZm91bmRhdGlvbiIsIk9iamVjdCIsImtleXMiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJsZW5ndGgiLCJuYW1lc3BhY2UiLCJNYXRoIiwicm91bmQiLCJwb3ciLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwicmVmbG93IiwiZWxlbSIsImkiLCIkZWxlbSIsImZpbmQiLCJhZGRCYWNrIiwiJGVsIiwib3B0cyIsIndhcm4iLCJ0aGluZyIsInNwbGl0IiwiZSIsIm9wdCIsIm1hcCIsImVsIiwidHJpbSIsInBhcnNlVmFsdWUiLCJlciIsImdldEZuTmFtZSIsInRyYW5zaXRpb25lbmQiLCJ0cmFuc2l0aW9ucyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImVuZCIsInQiLCJzdHlsZSIsInNldFRpbWVvdXQiLCJ0cmlnZ2VySGFuZGxlciIsInV0aWwiLCJ0aHJvdHRsZSIsImZ1bmMiLCJkZWxheSIsInRpbWVyIiwiY29udGV4dCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsIm1ldGhvZCIsIiRtZXRhIiwiJG5vSlMiLCJhcHBlbmRUbyIsImhlYWQiLCJyZW1vdmVDbGFzcyIsIk1lZGlhUXVlcnkiLCJBcnJheSIsInByb3RvdHlwZSIsImNhbGwiLCJwbHVnQ2xhc3MiLCJ1bmRlZmluZWQiLCJSZWZlcmVuY2VFcnJvciIsIlR5cGVFcnJvciIsIndpbmRvdyIsImZuIiwiRGF0ZSIsIm5vdyIsImdldFRpbWUiLCJ2ZW5kb3JzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidnAiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJsYXN0VGltZSIsImNhbGxiYWNrIiwibmV4dFRpbWUiLCJtYXgiLCJjbGVhclRpbWVvdXQiLCJwZXJmb3JtYW5jZSIsInN0YXJ0IiwiRnVuY3Rpb24iLCJiaW5kIiwib1RoaXMiLCJhQXJncyIsImZUb0JpbmQiLCJmTk9QIiwiZkJvdW5kIiwiY29uY2F0IiwiZnVuY05hbWVSZWdleCIsInJlc3VsdHMiLCJleGVjIiwic3RyIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwicmVwbGFjZSIsImpRdWVyeSIsIkJveCIsIkltTm90VG91Y2hpbmdZb3UiLCJHZXREaW1lbnNpb25zIiwiR2V0T2Zmc2V0cyIsImVsZW1lbnQiLCJwYXJlbnQiLCJsck9ubHkiLCJ0Yk9ubHkiLCJlbGVEaW1zIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwicGFyRGltcyIsIm9mZnNldCIsImhlaWdodCIsIndpZHRoIiwid2luZG93RGltcyIsImFsbERpcnMiLCJFcnJvciIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYXJSZWN0IiwicGFyZW50Tm9kZSIsIndpblJlY3QiLCJib2R5Iiwid2luWSIsInBhZ2VZT2Zmc2V0Iiwid2luWCIsInBhZ2VYT2Zmc2V0IiwicGFyZW50RGltcyIsImFuY2hvciIsInBvc2l0aW9uIiwidk9mZnNldCIsImhPZmZzZXQiLCJpc092ZXJmbG93IiwiJGVsZURpbXMiLCIkYW5jaG9yRGltcyIsImtleUNvZGVzIiwiY29tbWFuZHMiLCJLZXlib2FyZCIsImdldEtleUNvZGVzIiwicGFyc2VLZXkiLCJldmVudCIsImtleSIsIndoaWNoIiwia2V5Q29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvVXBwZXJDYXNlIiwic2hpZnRLZXkiLCJjdHJsS2V5IiwiYWx0S2V5IiwiaGFuZGxlS2V5IiwiY29tcG9uZW50IiwiZnVuY3Rpb25zIiwiY29tbWFuZExpc3QiLCJjbWRzIiwiY29tbWFuZCIsImx0ciIsImV4dGVuZCIsInJldHVyblZhbHVlIiwiaGFuZGxlZCIsInVuaGFuZGxlZCIsImZpbmRGb2N1c2FibGUiLCJmaWx0ZXIiLCJpcyIsInJlZ2lzdGVyIiwiY29tcG9uZW50TmFtZSIsImtjcyIsImsiLCJrYyIsImRlZmF1bHRRdWVyaWVzIiwibGFuZHNjYXBlIiwicG9ydHJhaXQiLCJyZXRpbmEiLCJxdWVyaWVzIiwiY3VycmVudCIsInNlbGYiLCJleHRyYWN0ZWRTdHlsZXMiLCJjc3MiLCJuYW1lZFF1ZXJpZXMiLCJwYXJzZVN0eWxlVG9PYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlIiwiX2dldEN1cnJlbnRTaXplIiwiX3dhdGNoZXIiLCJhdExlYXN0Iiwic2l6ZSIsInF1ZXJ5IiwiZ2V0IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJtYXRjaGVkIiwib24iLCJuZXdTaXplIiwiY3VycmVudFNpemUiLCJzdHlsZU1lZGlhIiwibWVkaWEiLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluZm8iLCJpZCIsImluc2VydEJlZm9yZSIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJtYXRjaE1lZGl1bSIsInRleHQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsInRleHRDb250ZW50Iiwic3R5bGVPYmplY3QiLCJyZWR1Y2UiLCJyZXQiLCJwYXJhbSIsInBhcnRzIiwidmFsIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNBcnJheSIsImluaXRDbGFzc2VzIiwiYWN0aXZlQ2xhc3NlcyIsIk1vdGlvbiIsImFuaW1hdGVJbiIsImFuaW1hdGlvbiIsImNiIiwiYW5pbWF0ZSIsImFuaW1hdGVPdXQiLCJNb3ZlIiwiZHVyYXRpb24iLCJhbmltIiwicHJvZyIsIm1vdmUiLCJ0cyIsImlzSW4iLCJlcSIsImluaXRDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVzZXQiLCJhZGRDbGFzcyIsInNob3ciLCJvZmZzZXRXaWR0aCIsIm9uZSIsImZpbmlzaCIsImhpZGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJOZXN0IiwiRmVhdGhlciIsIm1lbnUiLCJpdGVtcyIsInN1Yk1lbnVDbGFzcyIsInN1Ykl0ZW1DbGFzcyIsImhhc1N1YkNsYXNzIiwiJGl0ZW0iLCIkc3ViIiwiY2hpbGRyZW4iLCJCdXJuIiwiVGltZXIiLCJvcHRpb25zIiwibmFtZVNwYWNlIiwicmVtYWluIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiaW5maW5pdGUiLCJwYXVzZSIsIm9uSW1hZ2VzTG9hZGVkIiwiaW1hZ2VzIiwidW5sb2FkZWQiLCJjb21wbGV0ZSIsInNpbmdsZUltYWdlTG9hZGVkIiwibmF0dXJhbFdpZHRoIiwic3BvdFN3aXBlIiwiZW5hYmxlZCIsImRvY3VtZW50RWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwibW92ZVRocmVzaG9sZCIsInRpbWVUaHJlc2hvbGQiLCJzdGFydFBvc1giLCJzdGFydFBvc1kiLCJzdGFydFRpbWUiLCJlbGFwc2VkVGltZSIsImlzTW92aW5nIiwib25Ub3VjaEVuZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblRvdWNoTW92ZSIsIngiLCJ0b3VjaGVzIiwicGFnZVgiLCJ5IiwicGFnZVkiLCJkeCIsImR5IiwiZGlyIiwiYWJzIiwib25Ub3VjaFN0YXJ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXQiLCJ0ZWFyZG93biIsInNwZWNpYWwiLCJzd2lwZSIsInNldHVwIiwibm9vcCIsImFkZFRvdWNoIiwiaGFuZGxlVG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsImZpcnN0IiwiZXZlbnRUeXBlcyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInNpbXVsYXRlZEV2ZW50IiwiTW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50IiwidGFyZ2V0IiwiZGlzcGF0Y2hFdmVudCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJwcmVmaXhlcyIsInRyaWdnZXJzIiwic3RvcFByb3BhZ2F0aW9uIiwiZmFkZU91dCIsImxvYWQiLCJjaGVja0xpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJzY3JvbGxMaXN0ZW5lciIsImNsb3NlbWVMaXN0ZW5lciIsInlldGlCb3hlcyIsInBsdWdOYW1lcyIsImxpc3RlbmVycyIsImpvaW4iLCJvZmYiLCJwbHVnaW5JZCIsIm5vdCIsImRlYm91bmNlIiwiJG5vZGVzIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiIsIm11dGF0aW9uUmVjb3Jkc0xpc3QiLCIkdGFyZ2V0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsIklIZWFyWW91IiwiQWJpZGUiLCJkZWZhdWx0cyIsIiRpbnB1dHMiLCJfZXZlbnRzIiwicmVzZXRGb3JtIiwidmFsaWRhdGVGb3JtIiwidmFsaWRhdGVPbiIsInZhbGlkYXRlSW5wdXQiLCJsaXZlVmFsaWRhdGUiLCJpc0dvb2QiLCJjaGVja2VkIiwiJGVycm9yIiwic2libGluZ3MiLCJmb3JtRXJyb3JTZWxlY3RvciIsIiRsYWJlbCIsImNsb3Nlc3QiLCIkZWxzIiwibGFiZWxzIiwiZmluZExhYmVsIiwiJGZvcm1FcnJvciIsImZpbmRGb3JtRXJyb3IiLCJsYWJlbEVycm9yQ2xhc3MiLCJmb3JtRXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImdyb3VwTmFtZSIsIiRsYWJlbHMiLCJmaW5kUmFkaW9MYWJlbHMiLCIkZm9ybUVycm9ycyIsInJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzIiwiY2xlYXJSZXF1aXJlIiwicmVxdWlyZWRDaGVjayIsInZhbGlkYXRlZCIsImN1c3RvbVZhbGlkYXRvciIsInZhbGlkYXRvciIsImVxdWFsVG8iLCJ2YWxpZGF0ZVJhZGlvIiwidmFsaWRhdGVUZXh0IiwibWF0Y2hWYWxpZGF0aW9uIiwidmFsaWRhdG9ycyIsImdvb2RUb0dvIiwibWVzc2FnZSIsImFjYyIsIm5vRXJyb3IiLCJwYXR0ZXJuIiwiaW5wdXRUZXh0IiwidmFsaWQiLCJwYXR0ZXJucyIsIlJlZ0V4cCIsIiRncm91cCIsInJlcXVpcmVkIiwiY2xlYXIiLCJ2IiwiJGZvcm0iLCJyZW1vdmVFcnJvckNsYXNzZXMiLCJhbHBoYSIsImFscGhhX251bWVyaWMiLCJpbnRlZ2VyIiwibnVtYmVyIiwiY2FyZCIsImN2diIsImVtYWlsIiwidXJsIiwiZG9tYWluIiwiZGF0ZXRpbWUiLCJkYXRlIiwidGltZSIsImRhdGVJU08iLCJtb250aF9kYXlfeWVhciIsImRheV9tb250aF95ZWFyIiwiY29sb3IiLCJBY2NvcmRpb24iLCIkdGFicyIsImlkeCIsIiRjb250ZW50IiwibGlua0lkIiwiJGluaXRBY3RpdmUiLCJkb3duIiwiJHRhYkNvbnRlbnQiLCJoYXNDbGFzcyIsImFsbG93QWxsQ2xvc2VkIiwidXAiLCJ0b2dnbGUiLCJuZXh0IiwiJGEiLCJmb2N1cyIsIm11bHRpRXhwYW5kIiwicHJldmlvdXMiLCJwcmV2IiwiZmlyc3RUaW1lIiwiJGN1cnJlbnRBY3RpdmUiLCJzbGlkZURvd24iLCJzbGlkZVNwZWVkIiwiJGF1bnRzIiwiY2FuQ2xvc2UiLCJzbGlkZVVwIiwic3RvcCIsIkFjY29yZGlvbk1lbnUiLCJtdWx0aU9wZW4iLCIkbWVudUxpbmtzIiwic3ViSWQiLCJpc0FjdGl2ZSIsImluaXRQYW5lcyIsIiRzdWJtZW51IiwiJGVsZW1lbnRzIiwiJHByZXZFbGVtZW50IiwiJG5leHRFbGVtZW50IiwibWluIiwicGFyZW50cyIsIm9wZW4iLCJjbG9zZSIsImNsb3NlQWxsIiwiaGlkZUFsbCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInBhcmVudHNVbnRpbCIsImFkZCIsIiRtZW51cyIsIkRyaWxsZG93biIsIiRzdWJtZW51QW5jaG9ycyIsIiRzdWJtZW51cyIsIiRtZW51SXRlbXMiLCJfcHJlcGFyZU1lbnUiLCJfa2V5Ym9hcmRFdmVudHMiLCIkbGluayIsInBhcmVudExpbmsiLCJjbG9uZSIsInByZXBlbmRUbyIsIndyYXAiLCIkbWVudSIsIiRiYWNrIiwicHJlcGVuZCIsImJhY2tCdXR0b24iLCJfYmFjayIsIiR3cmFwcGVyIiwid3JhcHBlciIsIl9nZXRNYXhEaW1zIiwiX3Nob3ciLCJjbG9zZU9uQ2xpY2siLCIkYm9keSIsImNvbnRhaW5zIiwiX2hpZGVBbGwiLCJfaGlkZSIsImJsdXIiLCJyZXN1bHQiLCJudW1PZkVsZW1zIiwidW53cmFwIiwicmVtb3ZlIiwiRHJvcGRvd24iLCIkaWQiLCIkYW5jaG9yIiwicG9zaXRpb25DbGFzcyIsImdldFBvc2l0aW9uQ2xhc3MiLCJjb3VudGVyIiwidXNlZFBvc2l0aW9ucyIsInZlcnRpY2FsUG9zaXRpb24iLCJtYXRjaCIsImhvcml6b250YWxQb3NpdGlvbiIsImNsYXNzQ2hhbmdlZCIsImRpcmVjdGlvbiIsIl9yZXBvc2l0aW9uIiwiX3NldFBvc2l0aW9uIiwiaG92ZXIiLCJ0aW1lb3V0IiwiaG92ZXJEZWxheSIsImhvdmVyUGFuZSIsInZpc2libGVGb2N1c2FibGVFbGVtZW50cyIsInRhYl9mb3J3YXJkIiwidHJhcEZvY3VzIiwidGFiX2JhY2t3YXJkIiwiYXV0b0ZvY3VzIiwiJGZvY3VzYWJsZSIsIl9hZGRCb2R5SGFuZGxlciIsImN1clBvc2l0aW9uQ2xhc3MiLCJEcm9wZG93bk1lbnUiLCJzdWJzIiwidmVydGljYWxDbGFzcyIsInJpZ2h0Q2xhc3MiLCJhbGlnbm1lbnQiLCJjaGFuZ2VkIiwiaGFzVG91Y2giLCJvbnRvdWNoc3RhcnQiLCJwYXJDbGFzcyIsImhhbmRsZUNsaWNrRm4iLCJoYXNTdWIiLCJoYXNDbGlja2VkIiwiY2xpY2tPcGVuIiwiZm9yY2VGb2xsb3ciLCJkaXNhYmxlSG92ZXIiLCJhdXRvY2xvc2UiLCJjbG9zaW5nVGltZSIsImlzVGFiIiwiaW5kZXgiLCJuZXh0U2libGluZyIsInByZXZTaWJsaW5nIiwib3BlblN1YiIsImNsb3NlU3ViIiwiJHNpYnMiLCJvbGRDbGFzcyIsIiRwYXJlbnRMaSIsIiR0b0Nsb3NlIiwic29tZXRoaW5nVG9DbG9zZSIsIkVxdWFsaXplciIsImVxSWQiLCIkd2F0Y2hlZCIsImhhc05lc3RlZCIsImlzTmVzdGVkIiwiaXNPbiIsIl9iaW5kSGFuZGxlciIsIm9uUmVzaXplTWVCb3VuZCIsIl9vblJlc2l6ZU1lIiwib25Qb3N0RXF1YWxpemVkQm91bmQiLCJfb25Qb3N0RXF1YWxpemVkIiwiaW1ncyIsInRvb1NtYWxsIiwiZXF1YWxpemVPbiIsIl9jaGVja01RIiwiX3JlZmxvdyIsIl9wYXVzZUV2ZW50cyIsImVxdWFsaXplT25TdGFjayIsIl9pc1N0YWNrZWQiLCJlcXVhbGl6ZUJ5Um93IiwiZ2V0SGVpZ2h0c0J5Um93IiwiYXBwbHlIZWlnaHRCeVJvdyIsImdldEhlaWdodHMiLCJhcHBseUhlaWdodCIsImhlaWdodHMiLCJsZW4iLCJvZmZzZXRIZWlnaHQiLCJsYXN0RWxUb3BPZmZzZXQiLCJncm91cHMiLCJncm91cCIsImVsT2Zmc2V0VG9wIiwiaiIsImxuIiwiZ3JvdXBzSUxlbmd0aCIsImxlbkoiLCJJbnRlcmNoYW5nZSIsInJ1bGVzIiwiY3VycmVudFBhdGgiLCJfYWRkQnJlYWtwb2ludHMiLCJfZ2VuZXJhdGVSdWxlcyIsInJ1bGUiLCJwYXRoIiwiU1BFQ0lBTF9RVUVSSUVTIiwicnVsZXNMaXN0Iiwibm9kZU5hbWUiLCJyZXNwb25zZSIsImh0bWwiLCJNYWdlbGxhbiIsIiR0YXJnZXRzIiwiJGxpbmtzIiwiJGFjdGl2ZSIsInNjcm9sbFBvcyIsInBhcnNlSW50IiwicG9pbnRzIiwid2luSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJkb2NIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkdGFyIiwicHQiLCJ0aHJlc2hvbGQiLCJ0YXJnZXRQb2ludCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiZWFzaW5nIiwiYW5pbWF0aW9uRWFzaW5nIiwiZGVlcExpbmtpbmciLCJsb2NhdGlvbiIsImhhc2giLCJzY3JvbGxUb0xvYyIsImNhbGNQb2ludHMiLCJfdXBkYXRlQWN0aXZlIiwiYXJyaXZhbCIsImdldEF0dHJpYnV0ZSIsImxvYyIsImJhck9mZnNldCIsInNjcm9sbFRvcCIsIndpblBvcyIsImN1cklkeCIsImlzRG93biIsImN1clZpc2libGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiT2ZmQ2FudmFzIiwiJGxhc3RUcmlnZ2VyIiwiJHRyaWdnZXJzIiwiJGV4aXRlciIsImV4aXRlciIsInNldEF0dHJpYnV0ZSIsImFwcGVuZCIsImlzUmV2ZWFsZWQiLCJyZXZlYWxDbGFzcyIsInJldmVhbE9uIiwiX3NldE1RQ2hlY2tlciIsInRyYW5zaXRpb25UaW1lIiwiX2hhbmRsZUtleWJvYXJkIiwicmV2ZWFsIiwiJGNsb3NlciIsImZvcmNlVG9wIiwiX3RyYXBGb2N1cyIsImZvY3VzYWJsZSIsImxhc3QiLCJrZXljb2RlIiwiT3JiaXQiLCJjb250YWluZXJDbGFzcyIsIiRzbGlkZXMiLCJzbGlkZUNsYXNzIiwiJGltYWdlcyIsImluaXRBY3RpdmUiLCJ1c2VNVUkiLCJfcHJlcGFyZUZvck9yYml0IiwiYnVsbGV0cyIsIl9sb2FkQnVsbGV0cyIsImF1dG9QbGF5IiwiZ2VvU3luYyIsImFjY2Vzc2libGUiLCIkYnVsbGV0cyIsImJveE9mQnVsbGV0cyIsInRpbWVyRGVsYXkiLCJjaGFuZ2VTbGlkZSIsIl9zZXRXcmFwcGVySGVpZ2h0IiwiX3NldFNsaWRlSGVpZ2h0IiwidGVtcCIsInBhdXNlT25Ib3ZlciIsIm5hdkJ1dHRvbnMiLCIkY29udHJvbHMiLCJuZXh0Q2xhc3MiLCJwcmV2Q2xhc3MiLCIkc2xpZGUiLCJpc0xUUiIsImNob3NlblNsaWRlIiwiJGN1clNsaWRlIiwiJGZpcnN0U2xpZGUiLCIkbGFzdFNsaWRlIiwiZGlySW4iLCJkaXJPdXQiLCIkbmV3U2xpZGUiLCJpbmZpbml0ZVdyYXAiLCJfdXBkYXRlQnVsbGV0cyIsIiRvbGRCdWxsZXQiLCJzcGFuIiwiZGV0YWNoIiwiJG5ld0J1bGxldCIsImFuaW1JbkZyb21SaWdodCIsImFuaW1PdXRUb1JpZ2h0IiwiYW5pbUluRnJvbUxlZnQiLCJhbmltT3V0VG9MZWZ0IiwiUmVzcG9uc2l2ZU1lbnUiLCJjdXJyZW50TXEiLCJjdXJyZW50UGx1Z2luIiwicnVsZXNUcmVlIiwicnVsZVNpemUiLCJydWxlUGx1Z2luIiwiTWVudVBsdWdpbnMiLCJpc0VtcHR5T2JqZWN0IiwiX2NoZWNrTWVkaWFRdWVyaWVzIiwibWF0Y2hlZE1xIiwiY3NzQ2xhc3MiLCJkZXN0cm95IiwiZHJvcGRvd24iLCJkcmlsbGRvd24iLCJhY2NvcmRpb24iLCJSZXNwb25zaXZlVG9nZ2xlIiwidGFyZ2V0SUQiLCIkdGFyZ2V0TWVudSIsIiR0b2dnbGVyIiwiX3VwZGF0ZSIsIl91cGRhdGVNcUhhbmRsZXIiLCJ0b2dnbGVNZW51IiwiaGlkZUZvciIsIlJldmVhbCIsImNhY2hlZCIsIm1xIiwiaXNNb2JpbGUiLCJtb2JpbGVTbmlmZiIsImZ1bGxTY3JlZW4iLCJvdmVybGF5IiwiJG92ZXJsYXkiLCJfbWFrZU92ZXJsYXkiLCJkZWVwTGluayIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm1hcmdpbiIsIl91cGRhdGVQb3NpdGlvbiIsIl9oYW5kbGVTdGF0ZSIsIm11bHRpcGxlT3BlbmVkIiwiYW5pbWF0aW9uSW4iLCJhZnRlckFuaW1hdGlvbkZvY3VzIiwibG9nIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG93RGVsYXkiLCJvcmlnaW5hbFNjcm9sbFBvcyIsIl9leHRyYUhhbmRsZXJzIiwiY2xvc2VPbkVzYyIsImFuaW1hdGlvbk91dCIsImZpbmlzaFVwIiwiaGlkZURlbGF5IiwicmVzZXRPbkNsb3NlIiwicmVwbGFjZVN0YXRlIiwidGl0bGUiLCJwYXRobmFtZSIsImJ0bU9mZnNldFBjdCIsImlQaG9uZVNuaWZmIiwiYW5kcm9pZFNuaWZmIiwiU2xpZGVyIiwiaW5wdXRzIiwiaGFuZGxlcyIsIiRoYW5kbGUiLCIkaW5wdXQiLCIkZmlsbCIsInZlcnRpY2FsIiwiaXNEYmwiLCJkaXNhYmxlZCIsImRpc2FibGVkQ2xhc3MiLCJiaW5kaW5nIiwiX3NldEluaXRBdHRyIiwiZG91YmxlU2lkZWQiLCIkaGFuZGxlMiIsIiRpbnB1dDIiLCJfc2V0SGFuZGxlUG9zIiwiaW5pdGlhbFN0YXJ0IiwiaW5pdGlhbEVuZCIsIiRobmRsIiwibm9JbnZlcnQiLCJoMlZhbCIsInN0ZXAiLCJoMVZhbCIsInZlcnQiLCJoT3JXIiwibE9yVCIsImhhbmRsZURpbSIsImVsZW1EaW0iLCJwY3RPZkJhciIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwicHhUb01vdmUiLCJtb3ZlbWVudCIsImRlY2ltYWwiLCJfc2V0VmFsdWVzIiwiaXNMZWZ0SG5kbCIsImRpbSIsImhhbmRsZVBjdCIsImhhbmRsZVBvcyIsIm1vdmVUaW1lIiwiY2hhbmdlZERlbGF5IiwiaGFzVmFsIiwiZXZlbnRPZmZzZXQiLCJoYWxmT2ZIYW5kbGUiLCJiYXJEaW0iLCJ3aW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwiZWxlbU9mZnNldCIsImV2ZW50RnJvbUJhciIsImJhclhZIiwib2Zmc2V0UGN0IiwiX2FkanVzdFZhbHVlIiwiZmlyc3RIbmRsUG9zIiwiYWJzUG9zaXRpb24iLCJzZWNuZEhuZGxQb3MiLCJkaXYiLCJwcmV2X3ZhbCIsIm5leHRfdmFsIiwiY3VySGFuZGxlIiwiX2hhbmRsZUV2ZW50IiwiY2xpY2tTZWxlY3QiLCJkcmFnZ2FibGUiLCJjdXJyZW50VGFyZ2V0IiwiXyRoYW5kbGUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiZGVjcmVhc2UiLCJpbmNyZWFzZSIsImRlY3JlYXNlX2Zhc3QiLCJpbmNyZWFzZV9mYXN0IiwiaW52ZXJ0VmVydGljYWwiLCJmcmFjIiwibnVtIiwiY2xpY2tQb3MiLCJTdGlja3kiLCIkcGFyZW50Iiwid2FzV3JhcHBlZCIsIiRjb250YWluZXIiLCJjb250YWluZXIiLCJ3cmFwSW5uZXIiLCJzdGlja3lDbGFzcyIsInNjcm9sbENvdW50IiwiY2hlY2tFdmVyeSIsImlzU3R1Y2siLCJfcGFyc2VQb2ludHMiLCJfc2V0U2l6ZXMiLCJfY2FsYyIsInJldmVyc2UiLCJ0b3BBbmNob3IiLCJidG0iLCJidG1BbmNob3IiLCJwdHMiLCJicmVha3MiLCJwbGFjZSIsImNhblN0aWNrIiwiX3BhdXNlTGlzdGVuZXJzIiwiY2hlY2tTaXplcyIsInNjcm9sbCIsIl9yZW1vdmVTdGlja3kiLCJ0b3BQb2ludCIsImJvdHRvbVBvaW50IiwiX3NldFN0aWNreSIsInN0aWNrVG8iLCJtcmduIiwibm90U3R1Y2tUbyIsImlzVG9wIiwic3RpY2tUb1RvcCIsImFuY2hvclB0IiwiYW5jaG9ySGVpZ2h0IiwiZWxlbUhlaWdodCIsInRvcE9yQm90dG9tIiwic3RpY2t5T24iLCJuZXdFbGVtV2lkdGgiLCJjb21wIiwicGRuZyIsIm5ld0NvbnRhaW5lckhlaWdodCIsImNvbnRhaW5lckhlaWdodCIsIl9zZXRCcmVha1BvaW50cyIsIm1Ub3AiLCJlbUNhbGMiLCJtYXJnaW5Ub3AiLCJtQnRtIiwibWFyZ2luQm90dG9tIiwiZW0iLCJmb250U2l6ZSIsIlRhYnMiLCIkdGFiVGl0bGVzIiwibGlua0NsYXNzIiwibWF0Y2hIZWlnaHQiLCJfc2V0SGVpZ2h0IiwiX2FkZEtleUhhbmRsZXIiLCJfYWRkQ2xpY2tIYW5kbGVyIiwiX3NldEhlaWdodE1xSGFuZGxlciIsIl9oYW5kbGVUYWJDaGFuZ2UiLCIkZmlyc3RUYWIiLCIkbGFzdFRhYiIsIndyYXBPbktleXMiLCIkdGFiTGluayIsIiR0YXJnZXRDb250ZW50IiwiJG9sZFRhYiIsImlkU3RyIiwicGFuZWxDbGFzcyIsInBhbmVsIiwiY2hlY2tDbGFzcyIsIlRvZ2dsZXIiLCJpbnB1dCIsInRvZ2dsZUNsYXNzIiwiX3VwZGF0ZUFSSUEiLCJUb29sdGlwIiwiaXNDbGljayIsImVsZW1JZCIsIl9nZXRQb3NpdGlvbkNsYXNzIiwidGlwVGV4dCIsInRlbXBsYXRlIiwiX2J1aWxkVGVtcGxhdGUiLCJ0cmlnZ2VyQ2xhc3MiLCJ0ZW1wbGF0ZUNsYXNzZXMiLCJ0b29sdGlwQ2xhc3MiLCIkdGVtcGxhdGUiLCIkdGlwRGltcyIsInNob3dPbiIsImZhZGVJbiIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwiaXNGb2N1cyIsImRpc2FibGVGb3JUb3VjaCIsInRvdWNoQ2xvc2VUZXh0IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJyZXF1aXJlIiwiWmVwdG8iLCJDTE9TRV9FVkVOVCIsIkJFRk9SRV9DTE9TRV9FVkVOVCIsIkFGVEVSX0NMT1NFX0VWRU5UIiwiQkVGT1JFX0FQUEVORF9FVkVOVCIsIk1BUktVUF9QQVJTRV9FVkVOVCIsIk9QRU5fRVZFTlQiLCJDSEFOR0VfRVZFTlQiLCJOUyIsIkVWRU5UX05TIiwiUkVBRFlfQ0xBU1MiLCJSRU1PVklOR19DTEFTUyIsIlBSRVZFTlRfQ0xPU0VfQ0xBU1MiLCJtZnAiLCJNYWduaWZpY1BvcHVwIiwiX2lzSlEiLCJfcHJldlN0YXR1cyIsIl93aW5kb3ciLCJfZG9jdW1lbnQiLCJfcHJldkNvbnRlbnRUeXBlIiwiX3dyYXBDbGFzc2VzIiwiX2N1cnJQb3B1cFR5cGUiLCJfbWZwT24iLCJmIiwiZXYiLCJfZ2V0RWwiLCJyYXciLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsIl9tZnBUcmlnZ2VyIiwic3QiLCJjYWxsYmFja3MiLCJjaGFyQXQiLCJfZ2V0Q2xvc2VCdG4iLCJjdXJyVGVtcGxhdGUiLCJjbG9zZUJ0biIsImNsb3NlTWFya3VwIiwidENsb3NlIiwiX2NoZWNrSW5zdGFuY2UiLCJtYWduaWZpY1BvcHVwIiwiaW5zdGFuY2UiLCJzdXBwb3J0c1RyYW5zaXRpb25zIiwicyIsInBvcCIsImFwcFZlcnNpb24iLCJpc0xvd0lFIiwiaXNJRTgiLCJhbGwiLCJpc0FuZHJvaWQiLCJpc0lPUyIsInN1cHBvcnRzVHJhbnNpdGlvbiIsInByb2JhYmx5TW9iaWxlIiwicG9wdXBzQ2FjaGUiLCJpc09iaiIsInRvQXJyYXkiLCJpdGVtIiwicGFyc2VkIiwiaXNPcGVuIiwidXBkYXRlSXRlbUhUTUwiLCJ0eXBlcyIsIm1haW5FbCIsImZpeGVkQ29udGVudFBvcyIsIm1vZGFsIiwiY2xvc2VPbkNvbnRlbnRDbGljayIsImNsb3NlT25CZ0NsaWNrIiwic2hvd0Nsb3NlQnRuIiwiZW5hYmxlRXNjYXBlS2V5IiwiYmdPdmVybGF5IiwiX2NoZWNrSWZDbG9zZSIsImNvbnRlbnRDb250YWluZXIiLCJwcmVsb2FkZXIiLCJ0TG9hZGluZyIsIm1vZHVsZXMiLCJuIiwiY2xvc2VCdG5JbnNpZGUiLCJ2YWx1ZXMiLCJjbG9zZV9yZXBsYWNlV2l0aCIsImFsaWduVG9wIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJmaXhlZEJnUG9zIiwidXBkYXRlU2l6ZSIsIndpbmRvd0hlaWdodCIsIndIIiwid2luZG93U3R5bGVzIiwiX2hhc1Njcm9sbEJhciIsIl9nZXRTY3JvbGxiYXJTaXplIiwibWFyZ2luUmlnaHQiLCJpc0lFNyIsImNsYXNzZXNUb2FkZCIsIm1haW5DbGFzcyIsIl9hZGRDbGFzc1RvTUZQIiwiX2xhc3RGb2N1c2VkRWwiLCJhY3RpdmVFbGVtZW50IiwiY29udGVudCIsIl9zZXRGb2N1cyIsIl9vbkZvY3VzSW4iLCJyZW1vdmFsRGVsYXkiLCJfY2xvc2UiLCJjbGFzc2VzVG9SZW1vdmUiLCJlbXB0eSIsIl9yZW1vdmVDbGFzc0Zyb21NRlAiLCJjdXJySXRlbSIsImF1dG9Gb2N1c0xhc3QiLCJwcmV2SGVpZ2h0Iiwiem9vbUxldmVsIiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwicGFyc2VFbCIsIm1hcmt1cCIsIm5ld0NvbnRlbnQiLCJhcHBlbmRDb250ZW50IiwicHJlbG9hZGVkIiwidGFnTmFtZSIsInNyYyIsImFkZEdyb3VwIiwiZUhhbmRsZXIiLCJtZnBFbCIsIl9vcGVuQ2xpY2siLCJlTmFtZSIsImRlbGVnYXRlIiwibWlkQ2xpY2siLCJtZXRhS2V5IiwiZGlzYWJsZU9uIiwiaXNGdW5jdGlvbiIsInVwZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNsb3NlT25Db250ZW50IiwiY2xvc2VPbkJnIiwiY05hbWUiLCJfcGFyc2VNYXJrdXAiLCJhcnIiLCJyZXBsYWNlV2l0aCIsInNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJyZW1vdmVDaGlsZCIsInByb3RvIiwicmVnaXN0ZXJNb2R1bGUiLCJtb2R1bGUiLCJqcUVsIiwiaXRlbU9wdHMiLCJJTkxJTkVfTlMiLCJfaGlkZGVuQ2xhc3MiLCJfaW5saW5lUGxhY2Vob2xkZXIiLCJfbGFzdElubGluZUVsZW1lbnQiLCJfcHV0SW5saW5lRWxlbWVudHNCYWNrIiwiYWZ0ZXIiLCJoaWRkZW5DbGFzcyIsInROb3RGb3VuZCIsImluaXRJbmxpbmUiLCJnZXRJbmxpbmUiLCJpbmxpbmVTdCIsImlubGluZSIsImlubGluZUVsZW1lbnQiLCJBSkFYX05TIiwiX2FqYXhDdXIiLCJfcmVtb3ZlQWpheEN1cnNvciIsIl9kZXN0cm95QWpheFJlcXVlc3QiLCJyZXEiLCJhYm9ydCIsInNldHRpbmdzIiwiY3Vyc29yIiwidEVycm9yIiwiaW5pdEFqYXgiLCJhamF4IiwiZ2V0QWpheCIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJ4aHIiLCJmaW5pc2hlZCIsImxvYWRFcnJvciIsIl9pbWdJbnRlcnZhbCIsIl9nZXRUaXRsZSIsImltYWdlIiwidGl0bGVTcmMiLCJ2ZXJ0aWNhbEZpdCIsImluaXRJbWFnZSIsImltZ1N0IiwibnMiLCJyZXNpemVJbWFnZSIsImltZyIsImRlY3IiLCJfb25JbWFnZUhhc1NpemUiLCJoYXNTaXplIiwiY2xlYXJJbnRlcnZhbCIsImlzQ2hlY2tpbmdJbWdTaXplIiwiaW1nSGlkZGVuIiwiZmluZEltYWdlU2l6ZSIsIm1mcFNldEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJnZXRJbWFnZSIsImd1YXJkIiwib25Mb2FkQ29tcGxldGUiLCJsb2FkZWQiLCJvbkxvYWRFcnJvciIsImFsdCIsImltZ19yZXBsYWNlV2l0aCIsImxvYWRpbmciLCJoYXNNb3pUcmFuc2Zvcm0iLCJnZXRIYXNNb3pUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJvcGVuZXIiLCJpbml0Wm9vbSIsInpvb21TdCIsInpvb20iLCJnZXRFbFRvQW5pbWF0ZSIsIm5ld0ltZyIsInRyYW5zaXRpb24iLCJjc3NPYmoiLCJ6SW5kZXgiLCJzaG93TWFpbkNvbnRlbnQiLCJvcGVuVGltZW91dCIsImFuaW1hdGVkSW1nIiwiX2FsbG93Wm9vbSIsIl9nZXRJdGVtVG9ab29tIiwiX2dldE9mZnNldCIsImlzTGFyZ2UiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm9iaiIsIklGUkFNRV9OUyIsIl9lbXB0eVBhZ2UiLCJfZml4SWZyYW1lQnVncyIsImlzU2hvd2luZyIsInNyY0FjdGlvbiIsInlvdXR1YmUiLCJ2aW1lbyIsImdtYXBzIiwiaW5pdElmcmFtZSIsInByZXZUeXBlIiwibmV3VHlwZSIsImdldElmcmFtZSIsImVtYmVkU3JjIiwiaWZyYW1lU3QiLCJpZnJhbWUiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsImRhdGFPYmoiLCJfZ2V0TG9vcGVkSWQiLCJudW1TbGlkZXMiLCJfcmVwbGFjZUN1cnJUb3RhbCIsImN1cnIiLCJ0b3RhbCIsImFycm93TWFya3VwIiwicHJlbG9hZCIsIm5hdmlnYXRlQnlJbWdDbGljayIsImFycm93cyIsInRQcmV2IiwidE5leHQiLCJ0Q291bnRlciIsImluaXRHYWxsZXJ5IiwiZ1N0IiwiZ2FsbGVyeSIsImwiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiY2xpY2siLCJfcHJlbG9hZFRpbWVvdXQiLCJwcmVsb2FkTmVhcmJ5SW1hZ2VzIiwiZ29UbyIsIm5ld0luZGV4IiwicHJlbG9hZEJlZm9yZSIsInByZWxvYWRBZnRlciIsIl9wcmVsb2FkSXRlbSIsIlJFVElOQV9OUyIsInJlcGxhY2VTcmMiLCJtIiwicmF0aW8iLCJpbml0UmV0aW5hIiwiZGV2aWNlUGl4ZWxSYXRpbyJdLCJt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SkQsQ0FEZ0MsQ0FPekNwSSxNQUFPLENBQ05xSSxXQUFZLHFCQUFXLENBQ3RCLEdBQUc3bUMsT0FBTzhtQyxnQkFBUCxDQUEwQixDQUE3QixDQUFnQyxDQUUvQixHQUFJalAsSUFBS2pCLElBQUlpQixFQUFKLENBQU8vd0IsTUFBaEIsQ0FDQzgvQixNQUFRL08sR0FBRytPLEtBRFosQ0FHQUEsTUFBUSxDQUFDN2tDLE1BQU02a0MsS0FBTixDQUFELENBQWdCQSxLQUFoQixDQUF3QkEsT0FBaEMsQ0FFQSxHQUFHQSxNQUFRLENBQVgsQ0FBYyxDQUNidlAsT0FBTyxlQUFpQixHQUFqQixDQUF1Qm9QLFNBQTlCLENBQXlDLFNBQVNqcEMsQ0FBVCxDQUFZODdCLElBQVosQ0FBa0IsQ0FDMURBLEtBQUsrSCxHQUFMLENBQVNsNkIsR0FBVCxDQUFhLENBQ1osWUFBYW15QixLQUFLK0gsR0FBTCxDQUFTLENBQVQsRUFBWXowQixZQUFaLENBQTJCZzZCLEtBRDVCLENBRVosUUFBUyxNQUZHLENBQWIsRUFJQSxDQUxELEVBTUF2UCxPQUFPLGVBQWlCLEdBQWpCLENBQXVCb1AsU0FBOUIsQ0FBeUMsU0FBU2pwQyxDQUFULENBQVk4N0IsSUFBWixDQUFrQixDQUMxREEsS0FBSzRELEdBQUwsQ0FBV3JGLEdBQUc2TyxVQUFILENBQWNwTixJQUFkLENBQW9Cc04sS0FBcEIsQ0FBWCxDQUNBLENBRkQsRUFHQSxDQUNELENBRUQsQ0F0QkssQ0FQa0MsQ0FBMUMsRUFpQ0EsWUFDQ3ZPLGlCQUFtQixDQWgwRGxCLENBQUQiLCJmaWxlIjoiZm91bmRhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbigkKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuMi4yJztcblxuLy8gR2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4vLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG52YXIgRm91bmRhdGlvbiA9IHtcbiAgdmVyc2lvbjogRk9VTkRBVElPTl9WRVJTSU9OLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgaW5pdGlhbGl6ZWQgcGx1Z2lucy5cbiAgICovXG4gIF9wbHVnaW5zOiB7fSxcblxuICAvKipcbiAgICogU3RvcmVzIGdlbmVyYXRlZCB1bmlxdWUgaWRzIGZvciBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBfdXVpZHM6IFtdLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICovXG4gIHJ0bDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJCgnaHRtbCcpLmF0dHIoJ2RpcicpID09PSAncnRsJztcbiAgfSxcbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKSB7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgLy8gRXhhbXBsZXM6IEZvdW5kYXRpb24uUmV2ZWFsLCBGb3VuZGF0aW9uLk9mZkNhbnZhc1xuICAgIHZhciBjbGFzc05hbWUgPSAobmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKSk7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgID0gaHlwaGVuYXRlKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIEZvdW5kYXRpb24gb2JqZWN0IGFuZCB0aGUgcGx1Z2lucyBsaXN0IChmb3IgcmVmbG93aW5nKVxuICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSl7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IHRoaXMuR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApKXsgcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWAsIHBsdWdpbi51dWlkKTsgfVxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSl7IHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHBsdWdpbik7IH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAgICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKGBpbml0LnpmLiR7cGx1Z2luTmFtZX1gKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgICAgICovXG4gICAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHBsdWdpbil7XG4gICAgICBwbHVnaW5bcHJvcF0gPSBudWxsOy8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gICByZUluaXQ6IGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICB0cnl7XG4gICAgICAgaWYoaXNKUSl7XG4gICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICB9KTtcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHBsdWdpbnMsXG4gICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgICdvYmplY3QnOiBmdW5jdGlvbihwbGdzKXtcbiAgICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICAgJCgnW2RhdGEtJysgcCArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAnc3RyaW5nJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBwbHVnaW5zID0gaHlwaGVuYXRlKHBsdWdpbnMpO1xuICAgICAgICAgICAgICQoJ1tkYXRhLScrIHBsdWdpbnMgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgdGhpc1snb2JqZWN0J10oT2JqZWN0LmtleXMoX3RoaXMuX3BsdWdpbnMpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIGZuc1t0eXBlXShwbHVnaW5zKTtcbiAgICAgICB9XG4gICAgIH1jYXRjaChlcnIpe1xuICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgfWZpbmFsbHl7XG4gICAgICAgcmV0dXJuIHBsdWdpbnM7XG4gICAgIH1cbiAgIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAgICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgKi9cbiAgR2V0WW9EaWdpdHM6IGZ1bmN0aW9uKGxlbmd0aCwgbmFtZXNwYWNlKXtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5wb3coMzYsIGxlbmd0aCArIDEpIC0gTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCBsZW5ndGgpKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpICsgKG5hbWVzcGFjZSA/IGAtJHtuYW1lc3BhY2V9YCA6ICcnKTtcbiAgfSxcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbihlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcGx1Z2luXG4gICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nK25hbWUrJ10nKS5hZGRCYWNrKCdbZGF0YS0nK25hbWUrJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrbmFtZStcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpKXtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpe1xuICAgICAgICAgICAgdmFyIG9wdCA9IGUuc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24oZWwpeyByZXR1cm4gZWwudHJpbSgpOyB9KTtcbiAgICAgICAgICAgIGlmKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfWNhdGNoKGVyKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfWZpbmFsbHl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG4gIHRyYW5zaXRpb25lbmQ6IGZ1bmN0aW9uKCRlbGVtKXtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlbmQ7XG5cbiAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKXtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBlbmQgPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZW5kKXtcbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfWVsc2V7XG4gICAgICBlbmQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICB9LCAxKTtcbiAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XG4gICAgfVxuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4vLyBUT0RPOiBuZWVkIHdheSB0byByZWZsb3cgdnMuIHJlLWluaXRpYWxpemVcbi8qKlxuICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBtZXRob2QgLSBBbiBhY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0LlxuICovXG52YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBtZXRob2QsXG4gICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgJG5vSlMgPSAkKCcubm8tanMnKTtcblxuICBpZighJG1ldGEubGVuZ3RoKXtcbiAgICAkKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgfVxuICBpZigkbm9KUy5sZW5ndGgpe1xuICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICB9XG5cbiAgaWYodHlwZSA9PT0gJ3VuZGVmaW5lZCcpey8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICB9ZWxzZSBpZih0eXBlID09PSAnc3RyaW5nJyl7Ly9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsvL2NvbGxlY3QgYWxsIHRoZSBhcmd1bWVudHMsIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7Ly9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgaWYocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCl7Ly9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgaWYodGhpcy5sZW5ndGggPT09IDEpey8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseShwbHVnQ2xhc3MsIGFyZ3MpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbCl7Ly9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9ZWxzZXsvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICB9XG4gIH1lbHNley8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdlJ3JlIHNvcnJ5LCAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS5gKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbndpbmRvdy5Gb3VuZGF0aW9uID0gRm91bmRhdGlvbjtcbiQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdyB8fCAhd2luZG93LkRhdGUubm93KVxuICAgIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZighd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KXtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24oKXsgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0OyB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgZlRvQmluZCA9IHRoaXMsXG4gICAgICAgIGZOT1AgICAgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcbiAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgICAgICAgIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWMoKGZuKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfVxuICBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpe1xuICBpZigvdHJ1ZS8udGVzdChzdHIpKSByZXR1cm4gdHJ1ZTtcbiAgZWxzZSBpZigvZmFsc2UvLnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbkZvdW5kYXRpb24uQm94ID0ge1xuICBJbU5vdFRvdWNoaW5nWW91OiBJbU5vdFRvdWNoaW5nWW91LFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzXG59XG5cbi8qKlxuICogQ29tcGFyZXMgdGhlIGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudCB0byBhIGNvbnRhaW5lciBhbmQgZGV0ZXJtaW5lcyBjb2xsaXNpb24gZXZlbnRzIHdpdGggY29udGFpbmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBwYXJlbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBhcyBib3VuZGluZyBjb250YWluZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxyT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIGxlZnQgYW5kIHJpZ2h0IHZhbHVlcyBvbmx5LlxuICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAqIEBkZWZhdWx0IGlmIG5vIHBhcmVudCBvYmplY3QgcGFzc2VkLCBkZXRlY3RzIGNvbGxpc2lvbnMgd2l0aCBgd2luZG93YC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgY29sbGlzaW9uIGZyZWUsIGZhbHNlIGlmIGEgY29sbGlzaW9uIGluIGFueSBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIEltTm90VG91Y2hpbmdZb3UoZWxlbWVudCwgcGFyZW50LCBsck9ubHksIHRiT25seSkge1xuICB2YXIgZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQ7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gICAgcmlnaHQgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoIDw9IHBhckRpbXMud2lkdGggKyBwYXJEaW1zLm9mZnNldC5sZWZ0KTtcbiAgfVxuICBlbHNlIHtcbiAgICBib3R0b20gPSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQgPD0gZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCArIGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICBsZWZ0ICAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpO1xuICB9XG5cbiAgdmFyIGFsbERpcnMgPSBbYm90dG9tLCB0b3AsIGxlZnQsIHJpZ2h0XTtcblxuICBpZiAobHJPbmx5KSB7XG4gICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0ID09PSB0cnVlO1xuICB9XG5cbiAgaWYgKHRiT25seSkge1xuICAgIHJldHVybiB0b3AgPT09IGJvdHRvbSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhbGxEaXJzLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbn07XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSwgdGVzdCl7XG4gIGVsZW0gPSBlbGVtLmxlbmd0aCA/IGVsZW1bMF0gOiBlbGVtO1xuXG4gIGlmIChlbGVtID09PSB3aW5kb3cgfHwgZWxlbSA9PT0gZG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJJ20gc29ycnksIERhdmUuIEknbSBhZnJhaWQgSSBjYW4ndCBkbyB0aGF0LlwiKTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHBhclJlY3QgPSBlbGVtLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5SZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHdpblkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICB3aW5YID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5ZLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luWFxuICAgIH0sXG4gICAgcGFyZW50RGltczoge1xuICAgICAgd2lkdGg6IHBhclJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHBhclJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogcGFyUmVjdC50b3AgKyB3aW5ZLFxuICAgICAgICBsZWZ0OiBwYXJSZWN0LmxlZnQgKyB3aW5YXG4gICAgICB9XG4gICAgfSxcbiAgICB3aW5kb3dEaW1zOiB7XG4gICAgICB3aWR0aDogd2luUmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogd2luUmVjdC5oZWlnaHQsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiB3aW5ZLFxuICAgICAgICBsZWZ0OiB3aW5YXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdG9wIGFuZCBsZWZ0IGludGVnZXIgcGl4ZWwgdmFsdWVzIGZvciBkeW5hbWljYWxseSByZW5kZXJlZCBlbGVtZW50cyxcbiAqIHN1Y2ggYXM6IFRvb2x0aXAsIFJldmVhbCwgYW5kIERyb3Bkb3duXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICB2YXIgJGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgJGFuY2hvckRpbXMgPSBhbmNob3IgPyBHZXREaW1lbnNpb25zKGFuY2hvcikgOiBudWxsO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciB0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBpc092ZXJmbG93ID8gaE9mZnNldCA6ICgoJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAoJGFuY2hvckRpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBsZWZ0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gKCRlbGVEaW1zLndpZHRoICsgaE9mZnNldCksXG4gICAgICAgIHRvcDogKCRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAoJGFuY2hvckRpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgcmlnaHQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQgKyAxLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0ICsgKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSxcbiAgICAgICAgdG9wOiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgKCRlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZXZlYWwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLSAkZWxlRGltcy53aWR0aCkgLyAyLFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICBjYXNlICdyZXZlYWwgZnVsbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAoJGVsZURpbXMud2lkdGggKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0IC0gJGVsZURpbXMud2lkdGgsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoRm91bmRhdGlvbi5ydGwoKSA/ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gJGVsZURpbXMud2lkdGggKyAkYW5jaG9yRGltcy53aWR0aCA6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0ICsgdk9mZnNldFxuICAgICAgfVxuICB9XG59XG5cbn0oalF1ZXJ5KTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVGhpcyB1dGlsIHdhcyBjcmVhdGVkIGJ5IE1hcml1cyBPbGJlcnR6ICpcbiAqIFBsZWFzZSB0aGFuayBNYXJpdXMgb24gR2l0SHViIC9vd2xiZXJ0eiAqXG4gKiBvciB0aGUgd2ViIGh0dHA6Ly93d3cubWFyaXVzb2xiZXJ0ei5kZS8gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuY29uc3Qga2V5Q29kZXMgPSB7XG4gIDk6ICdUQUInLFxuICAxMzogJ0VOVEVSJyxcbiAgMjc6ICdFU0NBUEUnLFxuICAzMjogJ1NQQUNFJyxcbiAgMzc6ICdBUlJPV19MRUZUJyxcbiAgMzg6ICdBUlJPV19VUCcsXG4gIDM5OiAnQVJST1dfUklHSFQnLFxuICA0MDogJ0FSUk9XX0RPV04nXG59XG5cbnZhciBjb21tYW5kcyA9IHt9XG5cbnZhciBLZXlib2FyZCA9IHtcbiAga2V5czogZ2V0S2V5Q29kZXMoa2V5Q29kZXMpLFxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIChrZXlib2FyZCkgZXZlbnQgYW5kIHJldHVybnMgYSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIGl0cyBrZXlcbiAgICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJuIFN0cmluZyBrZXkgLSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBrZXkgcHJlc3NlZFxuICAgKi9cbiAgcGFyc2VLZXkoZXZlbnQpIHtcbiAgICB2YXIga2V5ID0ga2V5Q29kZXNbZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZV0gfHwgU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCkudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGtleSA9IGBTSElGVF8ke2tleX1gO1xuICAgIGlmIChldmVudC5jdHJsS2V5KSBrZXkgPSBgQ1RSTF8ke2tleX1gO1xuICAgIGlmIChldmVudC5hbHRLZXkpIGtleSA9IGBBTFRfJHtrZXl9YDtcbiAgICByZXR1cm4ga2V5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBnaXZlbiAoa2V5Ym9hcmQpIGV2ZW50XG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQncyBuYW1lLCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHBhcmFtIHtPYmplY3RzfSBmdW5jdGlvbnMgLSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0aGF0IGFyZSB0byBiZSBleGVjdXRlZFxuICAgKi9cbiAgaGFuZGxlS2V5KGV2ZW50LCBjb21wb25lbnQsIGZ1bmN0aW9ucykge1xuICAgIHZhciBjb21tYW5kTGlzdCA9IGNvbW1hbmRzW2NvbXBvbmVudF0sXG4gICAgICBrZXlDb2RlID0gdGhpcy5wYXJzZUtleShldmVudCksXG4gICAgICBjbWRzLFxuICAgICAgY29tbWFuZCxcbiAgICAgIGZuO1xuXG4gICAgaWYgKCFjb21tYW5kTGlzdCkgcmV0dXJuIGNvbnNvbGUud2FybignQ29tcG9uZW50IG5vdCBkZWZpbmVkIScpO1xuXG4gICAgaWYgKHR5cGVvZiBjb21tYW5kTGlzdC5sdHIgPT09ICd1bmRlZmluZWQnKSB7IC8vIHRoaXMgY29tcG9uZW50IGRvZXMgbm90IGRpZmZlcmVudGlhdGUgYmV0d2VlbiBsdHIgYW5kIHJ0bFxuICAgICAgICBjbWRzID0gY29tbWFuZExpc3Q7IC8vIHVzZSBwbGFpbiBsaXN0XG4gICAgfSBlbHNlIHsgLy8gbWVyZ2UgbHRyIGFuZCBydGw6IGlmIGRvY3VtZW50IGlzIHJ0bCwgcnRsIG92ZXJ3cml0ZXMgbHRyIGFuZCB2aWNlIHZlcnNhXG4gICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSBjbWRzID0gJC5leHRlbmQoe30sIGNvbW1hbmRMaXN0Lmx0ciwgY29tbWFuZExpc3QucnRsKTtcblxuICAgICAgICBlbHNlIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QucnRsLCBjb21tYW5kTGlzdC5sdHIpO1xuICAgIH1cbiAgICBjb21tYW5kID0gY21kc1trZXlDb2RlXTtcblxuICAgIGZuID0gZnVuY3Rpb25zW2NvbW1hbmRdO1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiAgaWYgZXhpc3RzXG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5hcHBseSgpO1xuICAgICAgaWYgKGZ1bmN0aW9ucy5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMuaGFuZGxlZCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uIHdoZW4gZXZlbnQgd2FzIGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMuaGFuZGxlZChyZXR1cm5WYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmdW5jdGlvbnMudW5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMudW5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgbm90IGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMudW5oYW5kbGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiB0aGUgZ2l2ZW4gYCRlbGVtZW50YFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHNlYXJjaCB3aXRoaW5cbiAgICogQHJldHVybiB7alF1ZXJ5fSAkZm9jdXNhYmxlIC0gYWxsIGZvY3VzYWJsZSBlbGVtZW50cyB3aXRoaW4gYCRlbGVtZW50YFxuICAgKi9cbiAgZmluZEZvY3VzYWJsZSgkZWxlbWVudCkge1xuICAgIHJldHVybiAkZWxlbWVudC5maW5kKCdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XSwgKltjb250ZW50ZWRpdGFibGVdJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCEkKHRoaXMpLmlzKCc6dmlzaWJsZScpIHx8ICQodGhpcykuYXR0cigndGFiaW5kZXgnKSA8IDApIHsgcmV0dXJuIGZhbHNlOyB9IC8vb25seSBoYXZlIHZpc2libGUgZWxlbWVudHMgYW5kIHRob3NlIHRoYXQgaGF2ZSBhIHRhYmluZGV4IGdyZWF0ZXIgb3IgZXF1YWwgMFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50LCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHJldHVybiBTdHJpbmcgY29tcG9uZW50TmFtZVxuICAgKi9cblxuICByZWdpc3Rlcihjb21wb25lbnROYW1lLCBjbWRzKSB7XG4gICAgY29tbWFuZHNbY29tcG9uZW50TmFtZV0gPSBjbWRzO1xuICB9XG59XG5cbi8qXG4gKiBDb25zdGFudHMgZm9yIGVhc2llciBjb21wYXJpbmcuXG4gKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAqL1xuZnVuY3Rpb24gZ2V0S2V5Q29kZXMoa2NzKSB7XG4gIHZhciBrID0ge307XG4gIGZvciAodmFyIGtjIGluIGtjcykga1trY3Nba2NdXSA9IGtjc1trY107XG4gIHJldHVybiBrO1xufVxuXG5Gb3VuZGF0aW9uLktleWJvYXJkID0gS2V5Ym9hcmQ7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLy8gRGVmYXVsdCBzZXQgb2YgbWVkaWEgcXVlcmllc1xuY29uc3QgZGVmYXVsdFF1ZXJpZXMgPSB7XG4gICdkZWZhdWx0JyA6ICdvbmx5IHNjcmVlbicsXG4gIGxhbmRzY2FwZSA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgcG9ydHJhaXQgOiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyxcbiAgcmV0aW5hIDogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbnZhciBNZWRpYVF1ZXJ5ID0ge1xuICBxdWVyaWVzOiBbXSxcblxuICBjdXJyZW50OiAnJyxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1lZGlhIHF1ZXJ5IGhlbHBlciwgYnkgZXh0cmFjdGluZyB0aGUgYnJlYWtwb2ludCBsaXN0IGZyb20gdGhlIENTUyBhbmQgYWN0aXZhdGluZyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZXh0cmFjdGVkU3R5bGVzID0gJCgnLmZvdW5kYXRpb24tbXEnKS5jc3MoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgdmFyIG5hbWVkUXVlcmllcztcblxuICAgIG5hbWVkUXVlcmllcyA9IHBhcnNlU3R5bGVUb09iamVjdChleHRyYWN0ZWRTdHlsZXMpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5hbWVkUXVlcmllcykge1xuICAgICAgaWYobmFtZWRRdWVyaWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgc2VsZi5xdWVyaWVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICB2YWx1ZTogYG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAke25hbWVkUXVlcmllc1trZXldfSlgXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMuX2dldEN1cnJlbnRTaXplKCk7XG5cbiAgICB0aGlzLl93YXRjaGVyKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2NyZWVuIGlzIGF0IGxlYXN0IGFzIHdpZGUgYXMgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQncyBzbWFsbGVyLlxuICAgKi9cbiAgYXRMZWFzdChzaXplKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5nZXQoc2l6ZSk7XG5cbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IG9mIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gLSBUaGUgbWVkaWEgcXVlcnkgb2YgdGhlIGJyZWFrcG9pbnQsIG9yIGBudWxsYCBpZiB0aGUgYnJlYWtwb2ludCBkb2Vzbid0IGV4aXN0LlxuICAgKi9cbiAgZ2V0KHNpemUpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucXVlcmllcykge1xuICAgICAgaWYodGhpcy5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcbiAgICAgICAgaWYgKHNpemUgPT09IHF1ZXJ5Lm5hbWUpIHJldHVybiBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IG5hbWUgYnkgdGVzdGluZyBldmVyeSBicmVha3BvaW50IGFuZCByZXR1cm5pbmcgdGhlIGxhc3Qgb25lIHRvIG1hdGNoICh0aGUgYmlnZ2VzdCBvbmUpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge1N0cmluZ30gTmFtZSBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgX2dldEN1cnJlbnRTaXplKCkge1xuICAgIHZhciBtYXRjaGVkO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcblxuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5LnZhbHVlKS5tYXRjaGVzKSB7XG4gICAgICAgIG1hdGNoZWQgPSBxdWVyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1hdGNoZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZC5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLCB3aGljaCBmaXJlcyBhbiBldmVudCBvbiB0aGUgd2luZG93IHdoZW5ldmVyIHRoZSBicmVha3BvaW50IGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dhdGNoZXIoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYubWVkaWFxdWVyeScsICgpID0+IHtcbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSwgY3VycmVudFNpemUgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChuZXdTaXplICE9PSBjdXJyZW50U2l6ZSkge1xuICAgICAgICAvLyBDaGFuZ2UgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnlcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV3U2l6ZTtcblxuICAgICAgICAvLyBCcm9hZGNhc3QgdGhlIG1lZGlhIHF1ZXJ5IGNoYW5nZSBvbiB0aGUgd2luZG93XG4gICAgICAgICQod2luZG93KS50cmlnZ2VyKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBbbmV3U2l6ZSwgY3VycmVudFNpemVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5ID0gTWVkaWFRdWVyeTtcblxuLy8gbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLlxuLy8gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMsIERhdmlkIEtuaWdodC4gRHVhbCBNSVQvQlNEIGxpY2Vuc2VcbndpbmRvdy5tYXRjaE1lZGlhIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gRm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBtYXRjaE1lZGl1bSBhcGkgc3VjaCBhcyBJRSA5IGFuZCB3ZWJraXRcbiAgdmFyIHN0eWxlTWVkaWEgPSAod2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhKTtcblxuICAvLyBGb3IgdGhvc2UgdGhhdCBkb24ndCBzdXBwb3J0IG1hdGNoTWVkaXVtXG4gIGlmICghc3R5bGVNZWRpYSkge1xuICAgIHZhciBzdHlsZSAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICBzY3JpcHQgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSxcbiAgICBpbmZvICAgICAgICA9IG51bGw7XG5cbiAgICBzdHlsZS50eXBlICA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUuaWQgICAgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZihwcm9nIDwgZHVyYXRpb24peyBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTsgfVxuICAgIGVsc2V7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnRcbiAgICAuYWRkQ2xhc3MoYW5pbWF0aW9uKVxuICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudFxuICAgICAgLmNzcygndHJhbnNpdGlvbicsICcnKVxuICAgICAgLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTW92ZSA9IE1vdmU7XG5Gb3VuZGF0aW9uLk1vdGlvbiA9IE1vdGlvbjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBOZXN0ID0ge1xuICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgbWVudS5hdHRyKCdyb2xlJywgJ21lbnViYXInKTtcblxuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5hdHRyKHsncm9sZSc6ICdtZW51aXRlbSd9KSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudS5maW5kKCdhOmZpcnN0JykuYXR0cigndGFiaW5kZXgnLCAwKTtcblxuICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcblxuICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtXG4gICAgICAgICAgLmFkZENsYXNzKGhhc1N1YkNsYXNzKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgJHN1YlxuICAgICAgICAgIC5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhgaXMtc3VibWVudS1pdGVtICR7c3ViSXRlbUNsYXNzfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBtZW51XG4gICAgICAuZmluZCgnKicpXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3ViTWVudUNsYXNzfSAke3N1Ykl0ZW1DbGFzc30gJHtoYXNTdWJDbGFzc30gaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlYClcbiAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyggICAgICBtZW51LmZpbmQoJy4nICsgc3ViTWVudUNsYXNzICsgJywgLicgKyBzdWJJdGVtQ2xhc3MgKyAnLCAuaGFzLXN1Ym1lbnUsIC5pcy1zdWJtZW51LWl0ZW0sIC5zdWJtZW51LCBbZGF0YS1zdWJtZW51XScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnIGhhcy1zdWJtZW51IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51JylcbiAgICAvLyAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpKTtcbiAgICAvLyBpdGVtcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgLy8gICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgIC8vICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcbiAgICAvLyAgIGlmKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgIC8vICAgfVxuICAgIC8vICAgaWYoJHN1Yi5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUnKTtcbiAgICAvLyAgICAgJHN1Yi5yZW1vdmVDbGFzcygnc3VibWVudSAnICsgc3ViTWVudUNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgfVxufVxuXG5Gb3VuZGF0aW9uLk5lc3QgPSBOZXN0O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sLy9vcHRpb25zIGlzIGFuIG9iamVjdCBmb3IgZWFzaWx5IGFkZGluZyBmZWF0dXJlcyBsYXRlci5cbiAgICAgIG5hbWVTcGFjZSA9IE9iamVjdC5rZXlzKGVsZW0uZGF0YSgpKVswXSB8fCAndGltZXInLFxuICAgICAgcmVtYWluID0gLTEsXG4gICAgICBzdGFydCxcbiAgICAgIHRpbWVyO1xuXG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZW1haW4gPSAtMTtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgLy8gaWYoIWVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgZmFsc2UpO1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGlmKG9wdGlvbnMuaW5maW5pdGUpe1xuICAgICAgICBfdGhpcy5yZXN0YXJ0KCk7Ly9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBjYigpO1xuICAgIH0sIHJlbWFpbik7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnN0YXJ0LnpmLiR7bmFtZVNwYWNlfWApO1xuICB9XG5cbiAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIC8vaWYoZWxlbS5kYXRhKCdwYXVzZWQnKSl7IHJldHVybiBmYWxzZTsgfS8vbWF5YmUgaW1wbGVtZW50IHRoaXMgc2FuaXR5IGNoZWNrIGlmIHVzZWQgZm9yIG90aGVyIHRoaW5ncy5cbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgdHJ1ZSk7XG4gICAgdmFyIGVuZCA9IERhdGUubm93KCk7XG4gICAgcmVtYWluID0gcmVtYWluIC0gKGVuZCAtIHN0YXJ0KTtcbiAgICBlbGVtLnRyaWdnZXIoYHRpbWVycGF1c2VkLnpmLiR7bmFtZVNwYWNlfWApO1xuICB9XG59XG5cbi8qKlxuICogUnVucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gaW1hZ2VzIGFyZSBmdWxseSBsb2FkZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VzIC0gSW1hZ2UocykgdG8gY2hlY2sgaWYgbG9hZGVkLlxuICogQHBhcmFtIHtGdW5jfSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiBpbWFnZSBpcyBmdWxseSBsb2FkZWQuXG4gKi9cbmZ1bmN0aW9uIG9uSW1hZ2VzTG9hZGVkKGltYWdlcywgY2FsbGJhY2spe1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICB1bmxvYWRlZCA9IGltYWdlcy5sZW5ndGg7XG5cbiAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGltYWdlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmNvbXBsZXRlKSB7XG4gICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5uYXR1cmFsV2lkdGggIT09ICd1bmRlZmluZWQnICYmIHRoaXMubmF0dXJhbFdpZHRoID4gMCkge1xuICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkKHRoaXMpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBzaW5nbGVJbWFnZUxvYWRlZCgpIHtcbiAgICB1bmxvYWRlZC0tO1xuICAgIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cbn1cblxuRm91bmRhdGlvbi5UaW1lciA9IFRpbWVyO1xuRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCA9IG9uSW1hZ2VzTG9hZGVkO1xuXG59KGpRdWVyeSk7XG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqV29yayBpbnNwaXJlZCBieSBtdWx0aXBsZSBqcXVlcnkgc3dpcGUgcGx1Z2lucyoqXG4vLyoqRG9uZSBieSBZb2hhaSBBcmFyYXQgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4oZnVuY3Rpb24oJCkge1xuXG4gICQuc3BvdFN3aXBlID0ge1xuICAgIHZlcnNpb246ICcxLjAuMCcsXG4gICAgZW5hYmxlZDogJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgIHByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgICBtb3ZlVGhyZXNob2xkOiA3NSxcbiAgICB0aW1lVGhyZXNob2xkOiAyMDBcbiAgfTtcblxuICB2YXIgICBzdGFydFBvc1gsXG4gICAgICAgIHN0YXJ0UG9zWSxcbiAgICAgICAgc3RhcnRUaW1lLFxuICAgICAgICBlbGFwc2VkVGltZSxcbiAgICAgICAgaXNNb3ZpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgIC8vICBhbGVydCh0aGlzKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCk7XG4gICAgaXNNb3ZpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgICBpZiAoJC5zcG90U3dpcGUucHJldmVudERlZmF1bHQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgaWYoaXNNb3ZpbmcpIHtcbiAgICAgIHZhciB4ID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIHkgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICB2YXIgZHggPSBzdGFydFBvc1ggLSB4O1xuICAgICAgdmFyIGR5ID0gc3RhcnRQb3NZIC0geTtcbiAgICAgIHZhciBkaXI7XG4gICAgICBlbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lO1xuICAgICAgaWYoTWF0aC5hYnMoZHgpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgICBkaXIgPSBkeCA+IDAgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgfVxuICAgICAgLy8gZWxzZSBpZihNYXRoLmFicyhkeSkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgICAvLyAgIGRpciA9IGR5ID4gMCA/ICdkb3duJyA6ICd1cCc7XG4gICAgICAvLyB9XG4gICAgICBpZihkaXIpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvblRvdWNoRW5kLmNhbGwodGhpcyk7XG4gICAgICAgICQodGhpcykudHJpZ2dlcignc3dpcGUnLCBkaXIpLnRyaWdnZXIoYHN3aXBlJHtkaXJ9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PSAxKSB7XG4gICAgICBzdGFydFBvc1ggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICBzdGFydFBvc1kgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICBpc01vdmluZyA9IHRydWU7XG4gICAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgJiYgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZWFyZG93bigpIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICB9XG5cbiAgJC5ldmVudC5zcGVjaWFsLnN3aXBlID0geyBzZXR1cDogaW5pdCB9O1xuXG4gICQuZWFjaChbJ2xlZnQnLCAndXAnLCAnZG93bicsICdyaWdodCddLCBmdW5jdGlvbiAoKSB7XG4gICAgJC5ldmVudC5zcGVjaWFsW2Bzd2lwZSR7dGhpc31gXSA9IHsgc2V0dXA6IGZ1bmN0aW9uKCl7XG4gICAgICAkKHRoaXMpLm9uKCdzd2lwZScsICQubm9vcCk7XG4gICAgfSB9O1xuICB9KTtcbn0pKGpRdWVyeSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogTWV0aG9kIGZvciBhZGRpbmcgcHN1ZWRvIGRyYWcgZXZlbnRzIHRvIGVsZW1lbnRzICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4hZnVuY3Rpb24oJCl7XG4gICQuZm4uYWRkVG91Y2ggPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLGVsKXtcbiAgICAgICQoZWwpLmJpbmQoJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJyxmdW5jdGlvbigpe1xuICAgICAgICAvL3dlIHBhc3MgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdCBiZWNhdXNlIHRoZSBqUXVlcnkgZXZlbnRcbiAgICAgICAgLy9vYmplY3QgaXMgbm9ybWFsaXplZCB0byB3M2Mgc3BlY3MgYW5kIGRvZXMgbm90IHByb3ZpZGUgdGhlIFRvdWNoTGlzdFxuICAgICAgICBoYW5kbGVUb3VjaChldmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBoYW5kbGVUb3VjaCA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgZmlyc3QgPSB0b3VjaGVzWzBdLFxuICAgICAgICAgIGV2ZW50VHlwZXMgPSB7XG4gICAgICAgICAgICB0b3VjaHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gICAgICAgICAgICB0b3VjaGVuZDogJ21vdXNldXAnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0eXBlID0gZXZlbnRUeXBlc1tldmVudC50eXBlXSxcbiAgICAgICAgICBzaW11bGF0ZWRFdmVudFxuICAgICAgICA7XG5cbiAgICAgIGlmKCdNb3VzZUV2ZW50JyBpbiB3aW5kb3cgJiYgdHlwZW9mIHdpbmRvdy5Nb3VzZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50ID0gbmV3IHdpbmRvdy5Nb3VzZUV2ZW50KHR5cGUsIHtcbiAgICAgICAgICAnYnViYmxlcyc6IHRydWUsXG4gICAgICAgICAgJ2NhbmNlbGFibGUnOiB0cnVlLFxuICAgICAgICAgICdzY3JlZW5YJzogZmlyc3Quc2NyZWVuWCxcbiAgICAgICAgICAnc2NyZWVuWSc6IGZpcnN0LnNjcmVlblksXG4gICAgICAgICAgJ2NsaWVudFgnOiBmaXJzdC5jbGllbnRYLFxuICAgICAgICAgICdjbGllbnRZJzogZmlyc3QuY2xpZW50WVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnQnKTtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQuaW5pdE1vdXNlRXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAxLCBmaXJzdC5zY3JlZW5YLCBmaXJzdC5zY3JlZW5ZLCBmaXJzdC5jbGllbnRYLCBmaXJzdC5jbGllbnRZLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMC8qbGVmdCovLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0LnRhcmdldC5kaXNwYXRjaEV2ZW50KHNpbXVsYXRlZEV2ZW50KTtcbiAgICB9O1xuICB9O1xufShqUXVlcnkpO1xuXG5cbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKkZyb20gdGhlIGpRdWVyeSBNb2JpbGUgTGlicmFyeSoqXG4vLyoqbmVlZCB0byByZWNyZWF0ZSBmdW5jdGlvbmFsaXR5Kipcbi8vKiphbmQgdHJ5IHRvIGltcHJvdmUgaWYgcG9zc2libGUqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbi8qIFJlbW92aW5nIHRoZSBqUXVlcnkgZnVuY3Rpb24gKioqKlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7XG5cblx0dmFyICRkb2N1bWVudCA9ICQoIGRvY3VtZW50ICksXG5cdFx0Ly8gc3VwcG9ydFRvdWNoID0gJC5tb2JpbGUuc3VwcG9ydC50b3VjaCxcblx0XHR0b3VjaFN0YXJ0RXZlbnQgPSAndG91Y2hzdGFydCcvL3N1cHBvcnRUb3VjaCA/IFwidG91Y2hzdGFydFwiIDogXCJtb3VzZWRvd25cIixcblx0XHR0b3VjaFN0b3BFdmVudCA9ICd0b3VjaGVuZCcvL3N1cHBvcnRUb3VjaCA/IFwidG91Y2hlbmRcIiA6IFwibW91c2V1cFwiLFxuXHRcdHRvdWNoTW92ZUV2ZW50ID0gJ3RvdWNobW92ZScvL3N1cHBvcnRUb3VjaCA/IFwidG91Y2htb3ZlXCIgOiBcIm1vdXNlbW92ZVwiO1xuXG5cdC8vIHNldHVwIG5ldyBldmVudCBzaG9ydGN1dHNcblx0JC5lYWNoKCAoIFwidG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgXCIgK1xuXHRcdFwic3dpcGUgc3dpcGVsZWZ0IHN3aXBlcmlnaHRcIiApLnNwbGl0KCBcIiBcIiApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHRcdCQuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdHJldHVybiBmbiA/IHRoaXMuYmluZCggbmFtZSwgZm4gKSA6IHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cblx0XHQvLyBqUXVlcnkgPCAxLjhcblx0XHRpZiAoICQuYXR0ckZuICkge1xuXHRcdFx0JC5hdHRyRm5bIG5hbWUgXSA9IHRydWU7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQoIG9iaiwgZXZlbnRUeXBlLCBldmVudCwgYnViYmxlICkge1xuXHRcdHZhciBvcmlnaW5hbFR5cGUgPSBldmVudC50eXBlO1xuXHRcdGV2ZW50LnR5cGUgPSBldmVudFR5cGU7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHQkLmV2ZW50LnRyaWdnZXIoIGV2ZW50LCB1bmRlZmluZWQsIG9iaiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmV2ZW50LmRpc3BhdGNoLmNhbGwoIG9iaiwgZXZlbnQgKTtcblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IG9yaWdpbmFsVHlwZTtcblx0fVxuXG5cdC8vIGFsc28gaGFuZGxlcyB0YXBob2xkXG5cblx0Ly8gQWxzbyBoYW5kbGVzIHN3aXBlbGVmdCwgc3dpcGVyaWdodFxuXHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7XG5cblx0XHQvLyBNb3JlIHRoYW4gdGhpcyBob3Jpem9udGFsIGRpc3BsYWNlbWVudCwgYW5kIHdlIHdpbGwgc3VwcHJlc3Mgc2Nyb2xsaW5nLlxuXHRcdHNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQ6IDMwLFxuXG5cdFx0Ly8gTW9yZSB0aW1lIHRoYW4gdGhpcywgYW5kIGl0IGlzbid0IGEgc3dpcGUuXG5cdFx0ZHVyYXRpb25UaHJlc2hvbGQ6IDEwMDAsXG5cblx0XHQvLyBTd2lwZSBob3Jpem9udGFsIGRpc3BsYWNlbWVudCBtdXN0IGJlIG1vcmUgdGhhbiB0aGlzLlxuXHRcdGhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHQvLyBTd2lwZSB2ZXJ0aWNhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBsZXNzIHRoYW4gdGhpcy5cblx0XHR2ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+PSAyID8gMTUgOiAzMCxcblxuXHRcdGdldExvY2F0aW9uOiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXHRcdFx0dmFyIHdpblBhZ2VYID0gd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHR3aW5QYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldCxcblx0XHRcdFx0eCA9IGV2ZW50LmNsaWVudFgsXG5cdFx0XHRcdHkgPSBldmVudC5jbGllbnRZO1xuXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VZID09PSAwICYmIE1hdGguZmxvb3IoIHkgKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VZICkgfHxcblx0XHRcdFx0ZXZlbnQucGFnZVggPT09IDAgJiYgTWF0aC5mbG9vciggeCApID4gTWF0aC5mbG9vciggZXZlbnQucGFnZVggKSApIHtcblxuXHRcdFx0XHQvLyBpT1M0IGNsaWVudFgvY2xpZW50WSBoYXZlIHRoZSB2YWx1ZSB0aGF0IHNob3VsZCBoYXZlIGJlZW5cblx0XHRcdFx0Ly8gaW4gcGFnZVgvcGFnZVkuIFdoaWxlIHBhZ2VYL3BhZ2UvIGhhdmUgdGhlIHZhbHVlIDBcblx0XHRcdFx0eCA9IHggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IHkgLSB3aW5QYWdlWTtcblx0XHRcdH0gZWxzZSBpZiAoIHkgPCAoIGV2ZW50LnBhZ2VZIC0gd2luUGFnZVkpIHx8IHggPCAoIGV2ZW50LnBhZ2VYIC0gd2luUGFnZVggKSApIHtcblxuXHRcdFx0XHQvLyBTb21lIEFuZHJvaWQgYnJvd3NlcnMgaGF2ZSB0b3RhbGx5IGJvZ3VzIHZhbHVlcyBmb3IgY2xpZW50WC9ZXG5cdFx0XHRcdC8vIHdoZW4gc2Nyb2xsaW5nL3pvb21pbmcgYSBwYWdlLiBEZXRlY3RhYmxlIHNpbmNlIGNsaWVudFgvY2xpZW50WVxuXHRcdFx0XHQvLyBzaG91bGQgbmV2ZXIgYmUgc21hbGxlciB0aGFuIHBhZ2VYL3BhZ2VZIG1pbnVzIHBhZ2Ugc2Nyb2xsXG5cdFx0XHRcdHggPSBldmVudC5wYWdlWCAtIHdpblBhZ2VYO1xuXHRcdFx0XHR5ID0gZXZlbnQucGFnZVkgLSB3aW5QYWdlWTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeVxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF0sXG5cdFx0XHRcdFx0XHRvcmlnaW46ICQoIGV2ZW50LnRhcmdldCApXG5cdFx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgP1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsXG5cdFx0XHRcdGxvY2F0aW9uID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmdldExvY2F0aW9uKCBkYXRhICk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLFxuXHRcdFx0XHRcdFx0Y29vcmRzOiBbIGxvY2F0aW9uLngsIGxvY2F0aW9uLnkgXVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGhhbmRsZVN3aXBlOiBmdW5jdGlvbiggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKSB7XG5cdFx0XHRpZiAoIHN0b3AudGltZSAtIHN0YXJ0LnRpbWUgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZHVyYXRpb25UaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMCBdIC0gc3RvcC5jb29yZHNbIDAgXSApID4gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZCAmJlxuXHRcdFx0XHRNYXRoLmFicyggc3RhcnQuY29vcmRzWyAxIF0gLSBzdG9wLmNvb3Jkc1sgMSBdICkgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUudmVydGljYWxEaXN0YW5jZVRocmVzaG9sZCApIHtcblx0XHRcdFx0dmFyIGRpcmVjdGlvbiA9IHN0YXJ0LmNvb3Jkc1swXSA+IHN0b3AuY29vcmRzWyAwIF0gPyBcInN3aXBlbGVmdFwiIDogXCJzd2lwZXJpZ2h0XCI7XG5cblx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBcInN3aXBlXCIsICQuRXZlbnQoIFwic3dpcGVcIiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSksIHRydWUgKTtcblx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBkaXJlY3Rpb24sJC5FdmVudCggZGlyZWN0aW9uLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9ICksIHRydWUgKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0Ly8gVGhpcyBzZXJ2ZXMgYXMgYSBmbGFnIHRvIGVuc3VyZSB0aGF0IGF0IG1vc3Qgb25lIHN3aXBlIGV2ZW50IGV2ZW50IGlzXG5cdFx0Ly8gaW4gd29yayBhdCBhbnkgZ2l2ZW4gdGltZVxuXHRcdGV2ZW50SW5Qcm9ncmVzczogZmFsc2UsXG5cblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXZlbnRzLFxuXHRcdFx0XHR0aGlzT2JqZWN0ID0gdGhpcyxcblx0XHRcdFx0JHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksXG5cdFx0XHRcdGNvbnRleHQgPSB7fTtcblxuXHRcdFx0Ly8gUmV0cmlldmUgdGhlIGV2ZW50cyBkYXRhIGZvciB0aGlzIGVsZW1lbnQgYW5kIGFkZCB0aGUgc3dpcGUgY29udGV4dFxuXHRcdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0aWYgKCAhZXZlbnRzICkge1xuXHRcdFx0XHRldmVudHMgPSB7IGxlbmd0aDogMCB9O1xuXHRcdFx0XHQkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiLCBldmVudHMgKTtcblx0XHRcdH1cblx0XHRcdGV2ZW50cy5sZW5ndGgrKztcblx0XHRcdGV2ZW50cy5zd2lwZSA9IGNvbnRleHQ7XG5cblx0XHRcdGNvbnRleHQuc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gQmFpbCBpZiB3ZSdyZSBhbHJlYWR5IHdvcmtpbmcgb24gYSBzd2lwZSBldmVudFxuXHRcdFx0XHRpZiAoICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSB0cnVlO1xuXG5cdFx0XHRcdHZhciBzdG9wLFxuXHRcdFx0XHRcdHN0YXJ0ID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0YXJ0KCBldmVudCApLFxuXHRcdFx0XHRcdG9yaWdUYXJnZXQgPSBldmVudC50YXJnZXQsXG5cdFx0XHRcdFx0ZW1pdHRlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGNvbnRleHQubW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRpZiAoICFzdGFydCB8fCBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzdG9wID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0b3AoIGV2ZW50ICk7XG5cdFx0XHRcdFx0aWYgKCAhZW1pdHRlZCApIHtcblx0XHRcdFx0XHRcdGVtaXR0ZWQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaGFuZGxlU3dpcGUoIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICk7XG5cdFx0XHRcdFx0XHRpZiAoIGVtaXR0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gcHJldmVudCBzY3JvbGxpbmdcblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y29udGV4dC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlICk7XG5cdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBudWxsO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdCRkb2N1bWVudC5vbiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApXG5cdFx0XHRcdFx0Lm9uZSggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdFx0fTtcblx0XHRcdCR0aGlzLm9uKCB0b3VjaFN0YXJ0RXZlbnQsIGNvbnRleHQuc3RhcnQgKTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cywgY29udGV4dDtcblxuXHRcdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBldmVudHMuc3dpcGU7XG5cdFx0XHRcdGRlbGV0ZSBldmVudHMuc3dpcGU7XG5cdFx0XHRcdGV2ZW50cy5sZW5ndGgtLTtcblx0XHRcdFx0aWYgKCBldmVudHMubGVuZ3RoID09PSAwICkge1xuXHRcdFx0XHRcdCQucmVtb3ZlRGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGNvbnRleHQgKSB7XG5cdFx0XHRcdGlmICggY29udGV4dC5zdGFydCApIHtcblx0XHRcdFx0XHQkKCB0aGlzICkub2ZmKCB0b3VjaFN0YXJ0RXZlbnQsIGNvbnRleHQuc3RhcnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGNvbnRleHQubW92ZSApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0LnN0b3AgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHQkLmVhY2goe1xuXHRcdHN3aXBlbGVmdDogXCJzd2lwZS5sZWZ0XCIsXG5cdFx0c3dpcGVyaWdodDogXCJzd2lwZS5yaWdodFwiXG5cdH0sIGZ1bmN0aW9uKCBldmVudCwgc291cmNlRXZlbnQgKSB7XG5cblx0XHQkLmV2ZW50LnNwZWNpYWxbIGV2ZW50IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5iaW5kKCBzb3VyY2VFdmVudCwgJC5ub29wICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkudW5iaW5kKCBzb3VyY2VFdmVudCApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufSkoIGpRdWVyeSwgdGhpcyApO1xuKi9cbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuY29uc3QgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuICBmb3IgKHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChgJHtwcmVmaXhlc1tpXX1NdXRhdGlvbk9ic2VydmVyYCBpbiB3aW5kb3cpIHtcbiAgICAgIHJldHVybiB3aW5kb3dbYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmBdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KCkpO1xuXG5jb25zdCB0cmlnZ2VycyA9IChlbCwgdHlwZSkgPT4ge1xuICBlbC5kYXRhKHR5cGUpLnNwbGl0KCcgJykuZm9yRWFjaChpZCA9PiB7XG4gICAgJChgIyR7aWR9YClbIHR5cGUgPT09ICdjbG9zZScgPyAndHJpZ2dlcicgOiAndHJpZ2dlckhhbmRsZXInXShgJHt0eXBlfS56Zi50cmlnZ2VyYCwgW2VsXSk7XG4gIH0pO1xufTtcbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtb3Blbl0gd2lsbCByZXZlYWwgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4kKGRvY3VtZW50KS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1vcGVuXScsIGZ1bmN0aW9uKCkge1xuICB0cmlnZ2VycygkKHRoaXMpLCAnb3BlbicpO1xufSk7XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2VdIHdpbGwgY2xvc2UgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4vLyBJZiB1c2VkIHdpdGhvdXQgYSB2YWx1ZSBvbiBbZGF0YS1jbG9zZV0sIHRoZSBldmVudCB3aWxsIGJ1YmJsZSwgYWxsb3dpbmcgaXQgdG8gY2xvc2UgYSBwYXJlbnQgY29tcG9uZW50LlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2VdJywgZnVuY3Rpb24oKSB7XG4gIGxldCBpZCA9ICQodGhpcykuZGF0YSgnY2xvc2UnKTtcbiAgaWYgKGlkKSB7XG4gICAgdHJpZ2dlcnMoJCh0aGlzKSwgJ2Nsb3NlJyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZS56Zi50cmlnZ2VyJyk7XG4gIH1cbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLXRvZ2dsZV0gd2lsbCB0b2dnbGUgYSBwbHVnaW4gdGhhdCBzdXBwb3J0cyBpdCB3aGVuIGNsaWNrZWQuXG4kKGRvY3VtZW50KS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGVdJywgZnVuY3Rpb24oKSB7XG4gIHRyaWdnZXJzKCQodGhpcyksICd0b2dnbGUnKTtcbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NhYmxlXSB3aWxsIHJlc3BvbmQgdG8gY2xvc2UuemYudHJpZ2dlciBldmVudHMuXG4kKGRvY3VtZW50KS5vbignY2xvc2UuemYudHJpZ2dlcicsICdbZGF0YS1jbG9zYWJsZV0nLCBmdW5jdGlvbihlKXtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgbGV0IGFuaW1hdGlvbiA9ICQodGhpcykuZGF0YSgnY2xvc2FibGUnKTtcblxuICBpZihhbmltYXRpb24gIT09ICcnKXtcbiAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KCQodGhpcyksIGFuaW1hdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICAkKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICAgIH0pO1xuICB9ZWxzZXtcbiAgICAkKHRoaXMpLmZhZGVPdXQoKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgfVxufSk7XG5cbiQoZG9jdW1lbnQpLm9uKCdmb2N1cy56Zi50cmlnZ2VyIGJsdXIuemYudHJpZ2dlcicsICdbZGF0YS10b2dnbGUtZm9jdXNdJywgZnVuY3Rpb24oKSB7XG4gIGxldCBpZCA9ICQodGhpcykuZGF0YSgndG9nZ2xlLWZvY3VzJyk7XG4gICQoYCMke2lkfWApLnRyaWdnZXJIYW5kbGVyKCd0b2dnbGUuemYudHJpZ2dlcicsIFskKHRoaXMpXSk7XG59KTtcblxuLyoqXG4qIEZpcmVzIG9uY2UgYWZ0ZXIgYWxsIG90aGVyIHNjcmlwdHMgaGF2ZSBsb2FkZWRcbiogQGZ1bmN0aW9uXG4qIEBwcml2YXRlXG4qL1xuJCh3aW5kb3cpLmxvYWQoKCkgPT4ge1xuICBjaGVja0xpc3RlbmVycygpO1xufSk7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXJzKCkge1xuICBldmVudHNMaXN0ZW5lcigpO1xuICByZXNpemVMaXN0ZW5lcigpO1xuICBzY3JvbGxMaXN0ZW5lcigpO1xuICBjbG9zZW1lTGlzdGVuZXIoKTtcbn1cblxuLy8qKioqKioqKiBvbmx5IGZpcmVzIHRoaXMgZnVuY3Rpb24gb25jZSBvbiBsb2FkLCBpZiB0aGVyZSdzIHNvbWV0aGluZyB0byB3YXRjaCAqKioqKioqKlxuZnVuY3Rpb24gY2xvc2VtZUxpc3RlbmVyKHBsdWdpbk5hbWUpIHtcbiAgdmFyIHlldGlCb3hlcyA9ICQoJ1tkYXRhLXlldGktYm94XScpLFxuICAgICAgcGx1Z05hbWVzID0gWydkcm9wZG93bicsICd0b29sdGlwJywgJ3JldmVhbCddO1xuXG4gIGlmKHBsdWdpbk5hbWUpe1xuICAgIGlmKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMucHVzaChwbHVnaW5OYW1lKTtcbiAgICB9ZWxzZSBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHBsdWdpbk5hbWVbMF0gPT09ICdzdHJpbmcnKXtcbiAgICAgIHBsdWdOYW1lcy5jb25jYXQocGx1Z2luTmFtZSk7XG4gICAgfWVsc2V7XG4gICAgICBjb25zb2xlLmVycm9yKCdQbHVnaW4gbmFtZXMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICB9XG4gIGlmKHlldGlCb3hlcy5sZW5ndGgpe1xuICAgIGxldCBsaXN0ZW5lcnMgPSBwbHVnTmFtZXMubWFwKChuYW1lKSA9PiB7XG4gICAgICByZXR1cm4gYGNsb3NlbWUuemYuJHtuYW1lfWA7XG4gICAgfSkuam9pbignICcpO1xuXG4gICAgJCh3aW5kb3cpLm9mZihsaXN0ZW5lcnMpLm9uKGxpc3RlbmVycywgZnVuY3Rpb24oZSwgcGx1Z2luSWQpe1xuICAgICAgbGV0IHBsdWdpbiA9IGUubmFtZXNwYWNlLnNwbGl0KCcuJylbMF07XG4gICAgICBsZXQgcGx1Z2lucyA9ICQoYFtkYXRhLSR7cGx1Z2lufV1gKS5ub3QoYFtkYXRhLXlldGktYm94PVwiJHtwbHVnaW5JZH1cIl1gKTtcblxuICAgICAgcGx1Z2lucy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIGxldCBfdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICAgX3RoaXMudHJpZ2dlckhhbmRsZXIoJ2Nsb3NlLnpmLnRyaWdnZXInLCBbX3RoaXNdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZUxpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtcmVzaXplXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuemYudHJpZ2dlcicpXG4gICAgLm9uKCdyZXNpemUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aW1lcikgeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgcmVzaXplIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwicmVzaXplXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgcmVzaXplIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsTGlzdGVuZXIoZGVib3VuY2Upe1xuICBsZXQgdGltZXIsXG4gICAgICAkbm9kZXMgPSAkKCdbZGF0YS1zY3JvbGxdJyk7XG4gIGlmKCRub2Rlcy5sZW5ndGgpe1xuICAgICQod2luZG93KS5vZmYoJ3Njcm9sbC56Zi50cmlnZ2VyJylcbiAgICAub24oJ3Njcm9sbC56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZih0aW1lcil7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cblxuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpey8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBzY3JvbGwgZXZlbnRcbiAgICAgICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJzY3JvbGxcIik7XG4gICAgICB9LCBkZWJvdW5jZSB8fCAxMCk7Ly9kZWZhdWx0IHRpbWUgdG8gZW1pdCBzY3JvbGwgZXZlbnRcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudHNMaXN0ZW5lcigpIHtcbiAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpeyByZXR1cm4gZmFsc2U7IH1cbiAgbGV0IG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcmVzaXplXSwgW2RhdGEtc2Nyb2xsXSwgW2RhdGEtbXV0YXRlXScpO1xuXG4gIC8vZWxlbWVudCBjYWxsYmFja1xuICB2YXIgbGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiA9IGZ1bmN0aW9uKG11dGF0aW9uUmVjb3Jkc0xpc3QpIHtcbiAgICB2YXIgJHRhcmdldCA9ICQobXV0YXRpb25SZWNvcmRzTGlzdFswXS50YXJnZXQpO1xuICAgIC8vdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHR5cGVcbiAgICBzd2l0Y2ggKCR0YXJnZXQuYXR0cihcImRhdGEtZXZlbnRzXCIpKSB7XG5cbiAgICAgIGNhc2UgXCJyZXNpemVcIiA6XG4gICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXRdKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwic2Nyb2xsXCIgOlxuICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LCB3aW5kb3cucGFnZVlPZmZzZXRdKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgICAvLyBjYXNlIFwibXV0YXRlXCIgOlxuICAgICAgLy8gY29uc29sZS5sb2coJ211dGF0ZScsICR0YXJnZXQpO1xuICAgICAgLy8gJHRhcmdldC50cmlnZ2VySGFuZGxlcignbXV0YXRlLnpmLnRyaWdnZXInKTtcbiAgICAgIC8vXG4gICAgICAvLyAvL21ha2Ugc3VyZSB3ZSBkb24ndCBnZXQgc3R1Y2sgaW4gYW4gaW5maW5pdGUgbG9vcCBmcm9tIHNsb3BweSBjb2RlaW5nXG4gICAgICAvLyBpZiAoJHRhcmdldC5pbmRleCgnW2RhdGEtbXV0YXRlXScpID09ICQoXCJbZGF0YS1tdXRhdGVdXCIpLmxlbmd0aC0xKSB7XG4gICAgICAvLyAgIGRvbU11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICAgIC8vIH1cbiAgICAgIC8vIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0IDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vbm90aGluZ1xuICAgIH1cbiAgfVxuXG4gIGlmKG5vZGVzLmxlbmd0aCl7XG4gICAgLy9mb3IgZWFjaCBlbGVtZW50IHRoYXQgbmVlZHMgdG8gbGlzdGVuIGZvciByZXNpemluZywgc2Nyb2xsaW5nLCAob3IgY29taW5nIHNvb24gbXV0YXRpb24pIGFkZCBhIHNpbmdsZSBvYnNlcnZlclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IG5vZGVzLmxlbmd0aC0xOyBpKyspIHtcbiAgICAgIGxldCBlbGVtZW50T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uKTtcbiAgICAgIGVsZW1lbnRPYnNlcnZlci5vYnNlcnZlKG5vZGVzW2ldLCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogZmFsc2UsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOmZhbHNlLCBhdHRyaWJ1dGVGaWx0ZXI6W1wiZGF0YS1ldmVudHNcIl19KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIFtQSF1cbi8vIEZvdW5kYXRpb24uQ2hlY2tXYXRjaGVycyA9IGNoZWNrV2F0Y2hlcnM7XG5Gb3VuZGF0aW9uLklIZWFyWW91ID0gY2hlY2tMaXN0ZW5lcnM7XG4vLyBGb3VuZGF0aW9uLklTZWVZb3UgPSBzY3JvbGxMaXN0ZW5lcjtcbi8vIEZvdW5kYXRpb24uSUZlZWxZb3UgPSBjbG9zZW1lTGlzdGVuZXI7XG5cbn0oalF1ZXJ5KTtcblxuLy8gZnVuY3Rpb24gZG9tTXV0YXRpb25PYnNlcnZlcihkZWJvdW5jZSkge1xuLy8gICAvLyAhISEgVGhpcyBpcyBjb21pbmcgc29vbiBhbmQgbmVlZHMgbW9yZSB3b3JrOyBub3QgYWN0aXZlICAhISEgLy9cbi8vICAgdmFyIHRpbWVyLFxuLy8gICBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW11dGF0ZV0nKTtcbi8vICAgLy9cbi8vICAgaWYgKG5vZGVzLmxlbmd0aCkge1xuLy8gICAgIC8vIHZhciBNdXRhdGlvbk9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbi8vICAgICAvLyAgIHZhciBwcmVmaXhlcyA9IFsnV2ViS2l0JywgJ01veicsICdPJywgJ01zJywgJyddO1xuLy8gICAgIC8vICAgZm9yICh2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbi8vICAgICAvLyAgICAgaWYgKHByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuLy8gICAgIC8vICAgICAgIHJldHVybiB3aW5kb3dbcHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlciddO1xuLy8gICAgIC8vICAgICB9XG4vLyAgICAgLy8gICB9XG4vLyAgICAgLy8gICByZXR1cm4gZmFsc2U7XG4vLyAgICAgLy8gfSgpKTtcbi8vXG4vL1xuLy8gICAgIC8vZm9yIHRoZSBib2R5LCB3ZSBuZWVkIHRvIGxpc3RlbiBmb3IgYWxsIGNoYW5nZXMgZWZmZWN0aW5nIHRoZSBzdHlsZSBhbmQgY2xhc3MgYXR0cmlidXRlc1xuLy8gICAgIHZhciBib2R5T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihib2R5TXV0YXRpb24pO1xuLy8gICAgIGJvZHlPYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTp0cnVlLCBhdHRyaWJ1dGVGaWx0ZXI6W1wic3R5bGVcIiwgXCJjbGFzc1wiXX0pO1xuLy9cbi8vXG4vLyAgICAgLy9ib2R5IGNhbGxiYWNrXG4vLyAgICAgZnVuY3Rpb24gYm9keU11dGF0aW9uKG11dGF0ZSkge1xuLy8gICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIG11dGF0aW9uIGV2ZW50XG4vLyAgICAgICBpZiAodGltZXIpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuLy9cbi8vICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgYm9keU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbi8vICAgICAgICAgJCgnW2RhdGEtbXV0YXRlXScpLmF0dHIoJ2RhdGEtZXZlbnRzJyxcIm11dGF0ZVwiKTtcbi8vICAgICAgIH0sIGRlYm91bmNlIHx8IDE1MCk7XG4vLyAgICAgfVxuLy8gICB9XG4vLyB9XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogQWJpZGUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFiaWRlXG4gKi9cblxuY2xhc3MgQWJpZGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBBYmlkZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBYmlkZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgQWJpZGUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FiaWRlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEFiaWRlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBBYmlkZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kaW5wdXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBBYmlkZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy5hYmlkZScpXG4gICAgICAub24oJ3Jlc2V0LnpmLmFiaWRlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0Rm9ybSgpO1xuICAgICAgfSlcbiAgICAgIC5vbignc3VibWl0LnpmLmFiaWRlJywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy52YWxpZGF0ZU9uID09PSAnZmllbGRDaGFuZ2UnKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignY2hhbmdlLnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdjaGFuZ2UuemYuYWJpZGUnLCAoZSkgPT4ge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dCgkKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMubGl2ZVZhbGlkYXRlKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignaW5wdXQuemYuYWJpZGUnKVxuICAgICAgICAub24oJ2lucHV0LnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgQWJpZGUgdXBvbiBET00gY2hhbmdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgYSBmb3JtIGVsZW1lbnQgaGFzIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgYW5kIGlmIGl0J3MgY2hlY2tlZCBvciBub3RcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgcmVxdWlyZWRDaGVjaygkZWwpIHtcbiAgICBpZiAoISRlbC5hdHRyKCdyZXF1aXJlZCcpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciBpc0dvb2QgPSB0cnVlO1xuXG4gICAgc3dpdGNoICgkZWxbMF0udHlwZSkge1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICBpc0dvb2QgPSAkZWxbMF0uY2hlY2tlZDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICdzZWxlY3Qtb25lJzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1tdWx0aXBsZSc6XG4gICAgICAgIHZhciBvcHQgPSAkZWwuZmluZCgnb3B0aW9uOnNlbGVjdGVkJyk7XG4gICAgICAgIGlmICghb3B0Lmxlbmd0aCB8fCAhb3B0LnZhbCgpKSBpc0dvb2QgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmKCEkZWwudmFsKCkgfHwgISRlbC52YWwoKS5sZW5ndGgpIGlzR29vZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBpc0dvb2Q7XG4gIH1cblxuICAvKipcbiAgICogQmFzZWQgb24gJGVsLCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aCBzZWxlY3RvciBpbiB0aGlzIG9yZGVyOlxuICAgKiAxLiBUaGUgZWxlbWVudCdzIGRpcmVjdCBzaWJsaW5nKCdzKS5cbiAgICogMy4gVGhlIGVsZW1lbnQncyBwYXJlbnQncyBjaGlsZHJlbi5cbiAgICpcbiAgICogVGhpcyBhbGxvd3MgZm9yIG11bHRpcGxlIGZvcm0gZXJyb3JzIHBlciBpbnB1dCwgdGhvdWdoIGlmIG5vbmUgYXJlIGZvdW5kLCBubyBmb3JtIGVycm9ycyB3aWxsIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgcmVmZXJlbmNlIHRvIGZpbmQgdGhlIGZvcm0gZXJyb3Igc2VsZWN0b3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3Qgd2l0aCB0aGUgc2VsZWN0b3IuXG4gICAqL1xuICBmaW5kRm9ybUVycm9yKCRlbCkge1xuICAgIHZhciAkZXJyb3IgPSAkZWwuc2libGluZ3ModGhpcy5vcHRpb25zLmZvcm1FcnJvclNlbGVjdG9yKTtcblxuICAgIGlmICghJGVycm9yLmxlbmd0aCkge1xuICAgICAgJGVycm9yID0gJGVsLnBhcmVudCgpLmZpbmQodGhpcy5vcHRpb25zLmZvcm1FcnJvclNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJGVycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGlzIG9yZGVyOlxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZExhYmVsKCRlbCkge1xuICAgIHZhciBpZCA9ICRlbFswXS5pZDtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy4kZWxlbWVudC5maW5kKGBsYWJlbFtmb3I9XCIke2lkfVwiXWApO1xuXG4gICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJGVsLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRsYWJlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNldCBvZiBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIGEgc2V0IG9mIHJhZGlvIGVscyBpbiB0aGlzIG9yZGVyXG4gICAqIDIuIFRoZSA8bGFiZWw+IHdpdGggdGhlIGF0dHJpYnV0ZSBgW2Zvcj1cInNvbWVJbnB1dElkXCJdYFxuICAgKiAzLiBUaGUgYC5jbG9zZXN0KClgIDxsYWJlbD5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gY2hlY2sgZm9yIHJlcXVpcmVkIGF0dHJpYnV0ZVxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9yIGVtcHR5XG4gICAqL1xuICBmaW5kUmFkaW9MYWJlbHMoJGVscykge1xuICAgIHZhciBsYWJlbHMgPSAkZWxzLm1hcCgoaSwgZWwpID0+IHtcbiAgICAgIHZhciBpZCA9IGVsLmlkO1xuICAgICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICRsYWJlbCA9ICQoZWwpLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJGxhYmVsWzBdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuICQobGFiZWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBDU1MgZXJyb3IgY2xhc3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBBYmlkZSBzZXR0aW5ncyB0byB0aGUgbGFiZWwsIGlucHV0LCBhbmQgdGhlIGZvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSBjbGFzcyB0b1xuICAgKi9cbiAgYWRkRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIHZhciAkbGFiZWwgPSB0aGlzLmZpbmRMYWJlbCgkZWwpO1xuICAgIHZhciAkZm9ybUVycm9yID0gdGhpcy5maW5kRm9ybUVycm9yKCRlbCk7XG5cbiAgICBpZiAoJGxhYmVsLmxlbmd0aCkge1xuICAgICAgJGxhYmVsLmFkZENsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkZm9ybUVycm9yLmxlbmd0aCkge1xuICAgICAgJGZvcm1FcnJvci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5hdHRyKCdkYXRhLWludmFsaWQnLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIENTUyBlcnJvciBjbGFzc2VzIGV0YyBmcm9tIGFuIGVudGlyZSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqXG4gICAqL1xuXG4gIHJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzKGdyb3VwTmFtZSkge1xuICAgIHZhciAkZWxzID0gdGhpcy4kZWxlbWVudC5maW5kKGA6cmFkaW9bbmFtZT1cIiR7Z3JvdXBOYW1lfVwiXWApO1xuICAgIHZhciAkbGFiZWxzID0gdGhpcy5maW5kUmFkaW9MYWJlbHMoJGVscyk7XG4gICAgdmFyICRmb3JtRXJyb3JzID0gdGhpcy5maW5kRm9ybUVycm9yKCRlbHMpO1xuXG4gICAgaWYgKCRsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAkbGFiZWxzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkZm9ybUVycm9ycy5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3JzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgZnJvbSB0aGUgbGFiZWwsIGlucHV0LCBhbmQgdGhlIGZvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gcmVtb3ZlIHRoZSBjbGFzcyBmcm9tXG4gICAqL1xuICByZW1vdmVFcnJvckNsYXNzZXMoJGVsKSB7XG4gICAgLy8gcmFkaW9zIG5lZWQgdG8gY2xlYXIgYWxsIG9mIHRoZSBlbHNcbiAgICBpZigkZWxbMF0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVSYWRpb0Vycm9yQ2xhc3NlcygkZWwuYXR0cignbmFtZScpKTtcbiAgICB9XG5cbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSB0byBmaW5kIGlucHV0cyBhbmQgcHJvY2VlZHMgdG8gdmFsaWRhdGUgdGhlbSBpbiB3YXlzIHNwZWNpZmljIHRvIHRoZWlyIHR5cGVcbiAgICogQGZpcmVzIEFiaWRlI2ludmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI3ZhbGlkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB2YWxpZGF0ZSwgc2hvdWxkIGJlIGFuIEhUTUwgaW5wdXRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGdvb2RUb0dvIC0gSWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC5cbiAgICovXG4gIHZhbGlkYXRlSW5wdXQoJGVsKSB7XG4gICAgdmFyIGNsZWFyUmVxdWlyZSA9IHRoaXMucmVxdWlyZWRDaGVjaygkZWwpLFxuICAgICAgICB2YWxpZGF0ZWQgPSBmYWxzZSxcbiAgICAgICAgY3VzdG9tVmFsaWRhdG9yID0gdHJ1ZSxcbiAgICAgICAgdmFsaWRhdG9yID0gJGVsLmF0dHIoJ2RhdGEtdmFsaWRhdG9yJyksXG4gICAgICAgIGVxdWFsVG8gPSB0cnVlO1xuXG4gICAgLy8gZG9uJ3QgdmFsaWRhdGUgaWdub3JlZCBpbnB1dHMgb3IgaGlkZGVuIGlucHV0c1xuICAgIGlmICgkZWwuaXMoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKSB8fCAkZWwuaXMoJ1t0eXBlPVwiaGlkZGVuXCJdJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZVJhZGlvKCRlbC5hdHRyKCduYW1lJykpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICB2YWxpZGF0ZWQgPSBjbGVhclJlcXVpcmU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICB2YWxpZGF0ZWQgPSBjbGVhclJlcXVpcmU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YWxpZGF0ZWQgPSB0aGlzLnZhbGlkYXRlVGV4dCgkZWwpO1xuICAgIH1cblxuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRoaXMubWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9yLCAkZWwuYXR0cigncmVxdWlyZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKSkge1xuICAgICAgZXF1YWxUbyA9IHRoaXMub3B0aW9ucy52YWxpZGF0b3JzLmVxdWFsVG8oJGVsKTtcbiAgICB9XG5cblxuICAgIHZhciBnb29kVG9HbyA9IFtjbGVhclJlcXVpcmUsIHZhbGlkYXRlZCwgY3VzdG9tVmFsaWRhdG9yLCBlcXVhbFRvXS5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG4gICAgdmFyIG1lc3NhZ2UgPSAoZ29vZFRvR28gPyAndmFsaWQnIDogJ2ludmFsaWQnKSArICcuemYuYWJpZGUnO1xuXG4gICAgdGhpc1tnb29kVG9HbyA/ICdyZW1vdmVFcnJvckNsYXNzZXMnIDogJ2FkZEVycm9yQ2xhc3NlcyddKCRlbCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBpbnB1dCBpcyBkb25lIGNoZWNraW5nIGZvciB2YWxpZGF0aW9uLiBFdmVudCB0cmlnZ2VyIGlzIGVpdGhlciBgdmFsaWQuemYuYWJpZGVgIG9yIGBpbnZhbGlkLnpmLmFiaWRlYFxuICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIERPTSBlbGVtZW50IG9mIHRoZSBpbnB1dC5cbiAgICAgKiBAZXZlbnQgQWJpZGUjdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjaW52YWxpZFxuICAgICAqL1xuICAgICRlbC50cmlnZ2VyKG1lc3NhZ2UsIFskZWxdKTtcblxuICAgIHJldHVybiBnb29kVG9HbztcbiAgfVxuXG4gIC8qKlxuICAgKiBHb2VzIHRocm91Z2ggYSBmb3JtIGFuZCBpZiB0aGVyZSBhcmUgYW55IGludmFsaWQgaW5wdXRzLCBpdCB3aWxsIGRpc3BsYXkgdGhlIGZvcm0gZXJyb3IgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gbm9FcnJvciAtIHRydWUgaWYgbm8gZXJyb3JzIHdlcmUgZGV0ZWN0ZWQuLi5cbiAgICogQGZpcmVzIEFiaWRlI2Zvcm12YWxpZFxuICAgKiBAZmlyZXMgQWJpZGUjZm9ybWludmFsaWRcbiAgICovXG4gIHZhbGlkYXRlRm9ybSgpIHtcbiAgICB2YXIgYWNjID0gW107XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGlucHV0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgYWNjLnB1c2goX3RoaXMudmFsaWRhdGVJbnB1dCgkKHRoaXMpKSk7XG4gICAgfSk7XG5cbiAgICB2YXIgbm9FcnJvciA9IGFjYy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG5cbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsIChub0Vycm9yID8gJ25vbmUnIDogJ2Jsb2NrJykpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBpcyBmaW5pc2hlZCB2YWxpZGF0aW5nLiBFdmVudCB0cmlnZ2VyIGlzIGVpdGhlciBgZm9ybXZhbGlkLnpmLmFiaWRlYCBvciBgZm9ybWludmFsaWQuemYuYWJpZGVgLlxuICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIGVsZW1lbnQgb2YgdGhlIGZvcm0uXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm12YWxpZFxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtaW52YWxpZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigobm9FcnJvciA/ICdmb3JtdmFsaWQnIDogJ2Zvcm1pbnZhbGlkJykgKyAnLnpmLmFiaWRlJywgW3RoaXMuJGVsZW1lbnRdKTtcblxuICAgIHJldHVybiBub0Vycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHRleHQgaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gdGhlIHBhdHRlcm4gc3BlY2lmaWVkIGluIHRoZSBhdHRyaWJ1dGUuIElmIG5vIG1hdGNoaW5nIHBhdHRlcm4gaXMgZm91bmQsIHJldHVybnMgdHJ1ZS5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhIHRleHQgaW5wdXQgSFRNTCBlbGVtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIC0gc3RyaW5nIHZhbHVlIG9mIG9uZSBvZiB0aGUgUmVnRXggcGF0dGVybnMgaW4gQWJpZGUub3B0aW9ucy5wYXR0ZXJuc1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IHRoZSBpbnB1dCB2YWx1ZSBtYXRjaGVzIHRoZSBwYXR0ZXJuIHNwZWNpZmllZFxuICAgKi9cbiAgdmFsaWRhdGVUZXh0KCRlbCwgcGF0dGVybikge1xuICAgIC8vIEEgcGF0dGVybiBjYW4gYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgYmUgaW5mZXJlZCBmcm9tIHRoZSBpbnB1dCdzIFwicGF0dGVyblwiIGF0dHJpYnV0ZSwgb3IgaXQncyBcInR5cGVcIiBhdHRyaWJ1dGVcbiAgICBwYXR0ZXJuID0gKHBhdHRlcm4gfHwgJGVsLmF0dHIoJ3BhdHRlcm4nKSB8fCAkZWwuYXR0cigndHlwZScpKTtcbiAgICB2YXIgaW5wdXRUZXh0ID0gJGVsLnZhbCgpO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuXG4gICAgaWYgKGlucHV0VGV4dC5sZW5ndGgpIHtcbiAgICAgIC8vIElmIHRoZSBwYXR0ZXJuIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpcyBpbiBBYmlkZSdzIGxpc3Qgb2YgcGF0dGVybnMsIHRoZW4gdGVzdCB0aGF0IHJlZ2V4cFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXR0ZXJucy5oYXNPd25Qcm9wZXJ0eShwYXR0ZXJuKSkge1xuICAgICAgICB2YWxpZCA9IHRoaXMub3B0aW9ucy5wYXR0ZXJuc1twYXR0ZXJuXS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBuYW1lIGlzbid0IGFsc28gdGhlIHR5cGUgYXR0cmlidXRlIG9mIHRoZSBmaWVsZCwgdGhlbiB0ZXN0IGl0IGFzIGEgcmVnZXhwXG4gICAgICBlbHNlIGlmIChwYXR0ZXJuICE9PSAkZWwuYXR0cigndHlwZScpKSB7XG4gICAgICAgIHZhbGlkID0gbmV3IFJlZ0V4cChwYXR0ZXJuKS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBbiBlbXB0eSBmaWVsZCBpcyB2YWxpZCBpZiBpdCdzIG5vdCByZXF1aXJlZFxuICAgIGVsc2UgaWYgKCEkZWwucHJvcCgncmVxdWlyZWQnKSkge1xuICAgICAgdmFsaWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIGEgbm90IGEgcmFkaW8gaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gd2hldGhlciBvciBub3QgaXQgaXMgcmVxdWlyZWQgYW5kIHNlbGVjdGVkLiBBbHRob3VnaCB0aGUgZnVuY3Rpb24gdGFyZ2V0cyBhIHNpbmdsZSBgPGlucHV0PmAsIGl0IHZhbGlkYXRlcyBieSBjaGVja2luZyB0aGUgYHJlcXVpcmVkYCBhbmQgYGNoZWNrZWRgIHByb3BlcnRpZXMgb2YgYWxsIHJhZGlvIGJ1dHRvbnMgaW4gaXRzIGdyb3VwLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZ3JvdXBOYW1lIC0gQSBzdHJpbmcgdGhhdCBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgYSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdCBsZWFzdCBvbmUgcmFkaW8gaW5wdXQgaGFzIGJlZW4gc2VsZWN0ZWQgKGlmIGl0J3MgcmVxdWlyZWQpXG4gICAqL1xuICB2YWxpZGF0ZVJhZGlvKGdyb3VwTmFtZSkge1xuICAgIC8vIElmIGF0IGxlYXN0IG9uZSByYWRpbyBpbiB0aGUgZ3JvdXAgaGFzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSwgdGhlIGdyb3VwIGlzIGNvbnNpZGVyZWQgcmVxdWlyZWRcbiAgICAvLyBQZXIgVzNDIHNwZWMsIGFsbCByYWRpbyBidXR0b25zIGluIGEgZ3JvdXAgc2hvdWxkIGhhdmUgYHJlcXVpcmVkYCwgYnV0IHdlJ3JlIGJlaW5nIG5pY2VcbiAgICB2YXIgJGdyb3VwID0gdGhpcy4kZWxlbWVudC5maW5kKGA6cmFkaW9bbmFtZT1cIiR7Z3JvdXBOYW1lfVwiXWApO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlLCByZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIHRoZSBncm91cCB0byBiZSByZXF1aXJlZCwgYXQgbGVhc3Qgb25lIHJhZGlvIG5lZWRzIHRvIGJlIHJlcXVpcmVkXG4gICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgIGlmICgkKGUpLmF0dHIoJ3JlcXVpcmVkJykpIHtcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCFyZXF1aXJlZCkgdmFsaWQ9dHJ1ZTtcblxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgdmFsaWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSBjaGVja2VkXG4gICAgICAkZ3JvdXAuZWFjaCgoaSwgZSkgPT4ge1xuICAgICAgICBpZiAoJChlKS5wcm9wKCdjaGVja2VkJykpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhIHNlbGVjdGVkIGlucHV0IHBhc3NlcyBhIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiBNdWx0aXBsZSB2YWxpZGF0aW9ucyBjYW4gYmUgdXNlZCwgaWYgcGFzc2VkIHRvIHRoZSBlbGVtZW50IHdpdGggYGRhdGEtdmFsaWRhdG9yPVwiZm9vIGJhciBiYXpcImAgaW4gYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWxpZGF0b3JzIC0gYSBzdHJpbmcgb2YgZnVuY3Rpb24gbmFtZXMgbWF0Y2hpbmcgZnVuY3Rpb25zIGluIHRoZSBBYmlkZS5vcHRpb25zLnZhbGlkYXRvcnMgb2JqZWN0LlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcXVpcmVkIC0gc2VsZiBleHBsYW5hdG9yeT9cbiAgICogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiB2YWxpZGF0aW9ucyBwYXNzZWQuXG4gICAqL1xuICBtYXRjaFZhbGlkYXRpb24oJGVsLCB2YWxpZGF0b3JzLCByZXF1aXJlZCkge1xuICAgIHJlcXVpcmVkID0gcmVxdWlyZWQgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB2YXIgY2xlYXIgPSB2YWxpZGF0b3JzLnNwbGl0KCcgJykubWFwKCh2KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZhbGlkYXRvcnNbdl0oJGVsLCByZXF1aXJlZCwgJGVsLnBhcmVudCgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2xlYXIuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBmb3JtIGlucHV0cyBhbmQgc3R5bGVzXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtcmVzZXRcbiAgICovXG4gIHJlc2V0Rm9ybSgpIHtcbiAgICB2YXIgJGZvcm0gPSB0aGlzLiRlbGVtZW50LFxuICAgICAgICBvcHRzID0gdGhpcy5vcHRpb25zO1xuXG4gICAgJChgLiR7b3B0cy5sYWJlbEVycm9yQ2xhc3N9YCwgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgJChgLiR7b3B0cy5pbnB1dEVycm9yQ2xhc3N9YCwgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgJChgJHtvcHRzLmZvcm1FcnJvclNlbGVjdG9yfS4ke29wdHMuZm9ybUVycm9yQ2xhc3N9YCkucmVtb3ZlQ2xhc3Mob3B0cy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgJGZvcm0uZmluZCgnW2RhdGEtYWJpZGUtZXJyb3JdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAkKCc6aW5wdXQnLCAkZm9ybSkubm90KCc6YnV0dG9uLCA6c3VibWl0LCA6cmVzZXQsIDpoaWRkZW4sIDpyYWRpbywgOmNoZWNrYm94LCBbZGF0YS1hYmlkZS1pZ25vcmVdJykudmFsKCcnKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6cmFkaW8nLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgICQoJzppbnB1dDpjaGVja2JveCcsICRmb3JtKS5ub3QoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKS5wcm9wKCdjaGVja2VkJyxmYWxzZSkucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBoYXMgYmVlbiByZXNldC5cbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybXJlc2V0XG4gICAgICovXG4gICAgJGZvcm0udHJpZ2dlcignZm9ybXJlc2V0LnpmLmFiaWRlJywgWyRmb3JtXSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIFJlbW92ZXMgZXJyb3Igc3R5bGVzIGFuZCBjbGFzc2VzIGZyb20gZWxlbWVudHMsIHdpdGhvdXQgcmVzZXR0aW5nIHRoZWlyIHZhbHVlcy5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub2ZmKCcuYWJpZGUnKVxuICAgICAgLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpXG4gICAgICAgIC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgdGhpcy4kaW5wdXRzXG4gICAgICAub2ZmKCcuYWJpZGUnKVxuICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLnJlbW92ZUVycm9yQ2xhc3NlcygkKHRoaXMpKTtcbiAgICAgIH0pO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkFiaWRlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZXZlbnQgdG8gdmFsaWRhdGUgaW5wdXRzLiBDaGVja2JveGVzIGFuZCByYWRpb3MgdmFsaWRhdGUgaW1tZWRpYXRlbHkuXG4gICAqIFJlbW92ZSBvciBjaGFuZ2UgdGhpcyB2YWx1ZSBmb3IgbWFudWFsIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2ZpZWxkQ2hhbmdlJ1xuICAgKi9cbiAgdmFsaWRhdGVPbjogJ2ZpZWxkQ2hhbmdlJyxcblxuICAvKipcbiAgICogQ2xhc3MgdG8gYmUgYXBwbGllZCB0byBpbnB1dCBsYWJlbHMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLWludmFsaWQtbGFiZWwnXG4gICAqL1xuICBsYWJlbEVycm9yQ2xhc3M6ICdpcy1pbnZhbGlkLWxhYmVsJyxcblxuICAvKipcbiAgICogQ2xhc3MgdG8gYmUgYXBwbGllZCB0byBpbnB1dHMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLWludmFsaWQtaW5wdXQnXG4gICAqL1xuICBpbnB1dEVycm9yQ2xhc3M6ICdpcy1pbnZhbGlkLWlucHV0JyxcblxuICAvKipcbiAgICogQ2xhc3Mgc2VsZWN0b3IgdG8gdXNlIHRvIHRhcmdldCBGb3JtIEVycm9ycyBmb3Igc2hvdy9oaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICcuZm9ybS1lcnJvcidcbiAgICovXG4gIGZvcm1FcnJvclNlbGVjdG9yOiAnLmZvcm0tZXJyb3InLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhZGRlZCB0byBGb3JtIEVycm9ycyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnaXMtdmlzaWJsZSdcbiAgICovXG4gIGZvcm1FcnJvckNsYXNzOiAnaXMtdmlzaWJsZScsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIHZhbGlkYXRlIHRleHQgaW5wdXRzIG9uIGFueSB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGxpdmVWYWxpZGF0ZTogZmFsc2UsXG5cbiAgcGF0dGVybnM6IHtcbiAgICBhbHBoYSA6IC9eW2EtekEtWl0rJC8sXG4gICAgYWxwaGFfbnVtZXJpYyA6IC9eW2EtekEtWjAtOV0rJC8sXG4gICAgaW50ZWdlciA6IC9eWy0rXT9cXGQrJC8sXG4gICAgbnVtYmVyIDogL15bLStdP1xcZCooPzpbXFwuXFwsXVxcZCspPyQvLFxuXG4gICAgLy8gYW1leCwgdmlzYSwgZGluZXJzXG4gICAgY2FyZCA6IC9eKD86NFswLTldezEyfSg/OlswLTldezN9KT98NVsxLTVdWzAtOV17MTR9fDYoPzowMTF8NVswLTldWzAtOV0pWzAtOV17MTJ9fDNbNDddWzAtOV17MTN9fDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfXwoPzoyMTMxfDE4MDB8MzVcXGR7M30pXFxkezExfSkkLyxcbiAgICBjdnYgOiAvXihbMC05XSl7Myw0fSQvLFxuXG4gICAgLy8gaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2Uvc3RhdGVzLW9mLXRoZS10eXBlLWF0dHJpYnV0ZS5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG4gICAgZW1haWwgOiAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSskLyxcblxuICAgIHVybCA6IC9eKGh0dHBzP3xmdHB8ZmlsZXxzc2gpOlxcL1xcLygoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpBLVpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPyhcXCMoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFxcL3xcXD8pKik/JC8sXG4gICAgLy8gYWJjLmRlXG4gICAgZG9tYWluIDogL14oW2EtekEtWjAtOV0oW2EtekEtWjAtOVxcLV17MCw2MX1bYS16QS1aMC05XSk/XFwuKStbYS16QS1aXXsyLDh9JC8sXG5cbiAgICBkYXRldGltZSA6IC9eKFswLTJdWzAtOV17M30pXFwtKFswLTFdWzAtOV0pXFwtKFswLTNdWzAtOV0pVChbMC01XVswLTldKVxcOihbMC01XVswLTldKVxcOihbMC01XVswLTldKShafChbXFwtXFwrXShbMC0xXVswLTldKVxcOjAwKSkkLyxcbiAgICAvLyBZWVlZLU1NLUREXG4gICAgZGF0ZSA6IC8oPzoxOXwyMClbMC05XXsyfS0oPzooPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18MVswLTldfDJbMC05XSl8KD86KD8hMDIpKD86MFsxLTldfDFbMC0yXSktKD86MzApKXwoPzooPzowWzEzNTc4XXwxWzAyXSktMzEpKSQvLFxuICAgIC8vIEhIOk1NOlNTXG4gICAgdGltZSA6IC9eKDBbMC05XXwxWzAtOV18MlswLTNdKSg6WzAtNV1bMC05XSl7Mn0kLyxcbiAgICBkYXRlSVNPIDogL15cXGR7NH1bXFwvXFwtXVxcZHsxLDJ9W1xcL1xcLV1cXGR7MSwyfSQvLFxuICAgIC8vIE1NL0REL1lZWVlcbiAgICBtb250aF9kYXlfeWVhciA6IC9eKDBbMS05XXwxWzAxMl0pWy0gXFwvLl0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXVxcZHs0fSQvLFxuICAgIC8vIEREL01NL1lZWVlcbiAgICBkYXlfbW9udGhfeWVhciA6IC9eKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl0oMFsxLTldfDFbMDEyXSlbLSBcXC8uXVxcZHs0fSQvLFxuXG4gICAgLy8gI0ZGRiBvciAjRkZGRkZGXG4gICAgY29sb3IgOiAvXiM/KFthLWZBLUYwLTldezZ9fFthLWZBLUYwLTldezN9KSQvXG4gIH0sXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb25zIHRvIGJlIHVzZWQuIGBlcXVhbFRvYCBiZWluZyB0aGUgb25seSBkZWZhdWx0IGluY2x1ZGVkIGZ1bmN0aW9uLlxuICAgKiBGdW5jdGlvbnMgc2hvdWxkIHJldHVybiBvbmx5IGEgYm9vbGVhbiBpZiB0aGUgaW5wdXQgaXMgdmFsaWQgb3Igbm90LiBGdW5jdGlvbnMgYXJlIGdpdmVuIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgKiBlbCA6IFRoZSBqUXVlcnkgZWxlbWVudCB0byB2YWxpZGF0ZS5cbiAgICogcmVxdWlyZWQgOiBCb29sZWFuIHZhbHVlIG9mIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgYmUgcHJlc2VudCBvciBub3QuXG4gICAqIHBhcmVudCA6IFRoZSBkaXJlY3QgcGFyZW50IG9mIHRoZSBpbnB1dC5cbiAgICogQG9wdGlvblxuICAgKi9cbiAgdmFsaWRhdG9yczoge1xuICAgIGVxdWFsVG86IGZ1bmN0aW9uIChlbCwgcmVxdWlyZWQsIHBhcmVudCkge1xuICAgICAgcmV0dXJuICQoYCMke2VsLmF0dHIoJ2RhdGEtZXF1YWx0bycpfWApLnZhbCgpID09PSBlbC52YWwoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFiaWRlLCAnQWJpZGUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICovXG5cbmNsYXNzIEFjY29yZGlvbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhIHBsYWluIG9iamVjdCB3aXRoIHNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFjY29yZGlvbi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignQWNjb3JkaW9uJywge1xuICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAnU1BBQ0UnOiAndG9nZ2xlJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3ByZXZpb3VzJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBhY2NvcmRpb24gYnkgYW5pbWF0aW5nIHRoZSBwcmVzZXQgYWN0aXZlIHBhbmUocykuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpO1xuICAgIHRoaXMuJHRhYnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdsaSwgW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJyk7XG5cbiAgICB0aGlzLiR0YWJzLmVhY2goZnVuY3Rpb24oaWR4LCBlbCkge1xuICAgICAgdmFyICRlbCA9ICQoZWwpLFxuICAgICAgICAgICRjb250ZW50ID0gJGVsLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKSxcbiAgICAgICAgICBpZCA9ICRjb250ZW50WzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjY29yZGlvbicpLFxuICAgICAgICAgIGxpbmtJZCA9IGVsLmlkIHx8IGAke2lkfS1sYWJlbGA7XG5cbiAgICAgICRlbC5maW5kKCdhOmZpcnN0JykuYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICdpZCc6IGxpbmtJZCxcbiAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgICRjb250ZW50LmF0dHIoeydyb2xlJzogJ3RhYnBhbmVsJywgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZCwgJ2FyaWEtaGlkZGVuJzogdHJ1ZSwgJ2lkJzogaWR9KTtcbiAgICB9KTtcbiAgICB2YXIgJGluaXRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgaWYoJGluaXRBY3RpdmUubGVuZ3RoKXtcbiAgICAgIHRoaXMuZG93bigkaW5pdEFjdGl2ZSwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgYWNjb3JkaW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRlbGVtID0gJCh0aGlzKTtcbiAgICAgIHZhciAkdGFiQ29udGVudCA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkdGFiQ29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgJGVsZW0uY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbiBrZXlkb3duLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gJCh0aGlzKS5jaGlsZHJlbignYScpLm9uKCdjbGljay56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmICgkZWxlbS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgICAgICAgIGlmKF90aGlzLm9wdGlvbnMuYWxsb3dBbGxDbG9zZWQgfHwgJGVsZW0uc2libGluZ3MoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpe1xuICAgICAgICAgICAgICBfdGhpcy51cCgkdGFiQ29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZG93bigkdGFiQ29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnQWNjb3JkaW9uJywge1xuICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyICRhID0gJGVsZW0ubmV4dCgpLmZpbmQoJ2EnKS5mb2N1cygpO1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQpIHtcbiAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5wcmV2KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBzZWxlY3RlZCBjb250ZW50IHBhbmUncyBvcGVuL2Nsb3NlIHN0YXRlLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIGpRdWVyeSBvYmplY3Qgb2YgdGhlIHBhbmUgdG8gdG9nZ2xlLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgaWYoJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5hbGxvd0FsbENsb3NlZCB8fCAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKXtcbiAgICAgICAgdGhpcy51cCgkdGFyZ2V0KTtcbiAgICAgIH0gZWxzZSB7IHJldHVybjsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmlyc3RUaW1lIC0gZmxhZyB0byBkZXRlcm1pbmUgaWYgcmVmbG93IHNob3VsZCBoYXBwZW4uXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jZG93blxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRvd24oJHRhcmdldCwgZmlyc3RUaW1lKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmKCRjdXJyZW50QWN0aXZlLmxlbmd0aCl7XG4gICAgICAgIHRoaXMudXAoJGN1cnJlbnRBY3RpdmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0YXJnZXRcbiAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKVxuICAgICAgLnBhcmVudCgnW2RhdGEtdGFiLWNvbnRlbnRdJylcbiAgICAgIC5hZGRCYWNrKClcbiAgICAgIC5wYXJlbnQoKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAkdGFyZ2V0LnNsaWRlRG93bih0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgKCkgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBvcGVuaW5nLlxuICAgICAgICogQGV2ZW50IEFjY29yZGlvbiNkb3duXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignZG93bi56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgIH0pO1xuXG4gICAgJChgIyR7JHRhcmdldC5hdHRyKCdhcmlhLWxhYmVsbGVkYnknKX1gKS5hdHRyKHtcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogdHJ1ZSxcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiB0YWIgdG8gY2xvc2UuXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jdXBcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyICRhdW50cyA9ICR0YXJnZXQucGFyZW50KCkuc2libGluZ3MoKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBjYW5DbG9zZSA9IHRoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCA/ICRhdW50cy5oYXNDbGFzcygnaXMtYWN0aXZlJykgOiAkdGFyZ2V0LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgIGlmKCF0aGlzLm9wdGlvbnMuYWxsb3dBbGxDbG9zZWQgJiYgIWNhbkNsb3NlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpe1xuICAgICAgJHRhcmdldC5zbGlkZVVwKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgdGFiIGlzIGRvbmUgY29sbGFwc2luZyB1cC5cbiAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbiN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uJywgWyR0YXJnZXRdKTtcbiAgICAgIH0pO1xuICAgIC8vIH0pO1xuXG4gICAgJHRhcmdldC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpXG4gICAgICAgICAgIC5wYXJlbnQoKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAkKGAjJHskdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpfWApLmF0dHIoe1xuICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAnYXJpYS1zZWxlY3RlZCc6IGZhbHNlXG4gICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jZGVzdHJveWVkXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXRhYi1jb250ZW50XScpLnN0b3AodHJ1ZSkuc2xpZGVVcCgwKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykub2ZmKCcuemYuYWNjb3JkaW9uJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhbiBhY2NvcmRpb24gcGFuZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBtdWx0aUV4cGFuZDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgYWNjb3JkaW9uIHRvIGNsb3NlIGFsbCBwYW5lcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYWxsb3dBbGxDbG9zZWQ6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oQWNjb3JkaW9uLCAnQWNjb3JkaW9uJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBBY2NvcmRpb25NZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5hY2NvcmRpb25NZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxuY2xhc3MgQWNjb3JkaW9uTWVudSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbiBtZW51LlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFjY29yZGlvbk1lbnUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbk1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdBY2NvcmRpb25NZW51Jywge1xuICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAnU1BBQ0UnOiAndG9nZ2xlJyxcbiAgICAgICdBUlJPV19SSUdIVCc6ICdvcGVuJyxcbiAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICdBUlJPV19MRUZUJzogJ2Nsb3NlJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2VBbGwnLFxuICAgICAgJ1RBQic6ICdkb3duJyxcbiAgICAgICdTSElGVF9UQUInOiAndXAnXG4gICAgfSk7XG4gIH1cblxuXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBhY2NvcmRpb24gbWVudSBieSBoaWRpbmcgYWxsIG5lc3RlZCBtZW51cy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5ub3QoJy5pcy1hY3RpdmUnKS5zbGlkZVVwKDApOy8vLmZpbmQoJ2EnKS5jc3MoJ3BhZGRpbmctbGVmdCcsICcxcmVtJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICdyb2xlJzogJ3RhYmxpc3QnLFxuICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogdGhpcy5vcHRpb25zLm11bHRpT3BlblxuICAgIH0pO1xuXG4gICAgdGhpcy4kbWVudUxpbmtzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy4kbWVudUxpbmtzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciBsaW5rSWQgPSB0aGlzLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51LWxpbmsnKSxcbiAgICAgICAgICAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgJHN1YiA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLFxuICAgICAgICAgIHN1YklkID0gJHN1YlswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2MtbWVudScpLFxuICAgICAgICAgIGlzQWN0aXZlID0gJHN1Yi5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgICAkZWxlbS5hdHRyKHtcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBzdWJJZCxcbiAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICB9KTtcbiAgICAgICRzdWIuYXR0cih7XG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsXG4gICAgICAgICdhcmlhLWhpZGRlbic6ICFpc0FjdGl2ZSxcbiAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGluaXRQYW5lcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpO1xuICAgIGlmKGluaXRQYW5lcy5sZW5ndGgpe1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBtZW51LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHN1Ym1lbnUgPSAkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb25tZW51JywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICBpZiAoJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7IC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBpZiBwcmV2aW91cyBlbGVtZW50IGhhcyBvcGVuIHN1YiBtZW51XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkcHJldkVsZW1lbnQuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCR0YXJnZXQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICAgICAgX3RoaXMuZG93bigkdGFyZ2V0KTtcbiAgICAgICAgICAgICR0YXJnZXQuZmluZCgnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCR0YXJnZXQubGVuZ3RoICYmICEkdGFyZ2V0LmlzKCc6aGlkZGVuJykpIHsgLy8gY2xvc2UgYWN0aXZlIHN1YiBvZiB0aGlzIGl0ZW1cbiAgICAgICAgICAgIF90aGlzLnVwKCR0YXJnZXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkgeyAvLyBjbG9zZSBjdXJyZW50bHkgb3BlbiBzdWJcbiAgICAgICAgICAgIF90aGlzLnVwKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKSk7XG4gICAgICAgICAgICAkZWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSkuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgLTEpLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAgICAgX3RoaXMudG9nZ2xlKCRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5oaWRlQWxsKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pOy8vLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIGFsbCBwYW5lcyBvZiB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBoaWRlQWxsKCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZVVwKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBvcGVuL2Nsb3NlIHN0YXRlIG9mIGEgc3VibWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gdGhlIHN1Ym1lbnUgdG8gdG9nZ2xlXG4gICAqL1xuICB0b2dnbGUoJHRhcmdldCl7XG4gICAgaWYoISR0YXJnZXQuaXMoJzphbmltYXRlZCcpKSB7XG4gICAgICBpZiAoISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZG93bigkdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIFN1Yi1tZW51IHRvIG9wZW4uXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rvd25cbiAgICovXG4gIGRvd24oJHRhcmdldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZighdGhpcy5vcHRpb25zLm11bHRpT3Blbikge1xuICAgICAgdGhpcy51cCh0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKS5ub3QoJHRhcmdldC5wYXJlbnRzVW50aWwodGhpcy4kZWxlbWVudCkuYWRkKCR0YXJnZXQpKSk7XG4gICAgfVxuXG4gICAgJHRhcmdldC5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KVxuICAgICAgLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuXG4gICAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICR0YXJnZXQuc2xpZGVEb3duKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBvcGVuaW5nLlxuICAgICAgICAgICAqIEBldmVudCBBY2NvcmRpb25NZW51I2Rvd25cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgICB9KTtcbiAgICAgIC8vfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBzdWItbWVudSBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQWxsIHN1Yi1tZW51cyBpbnNpZGUgdGhlIHRhcmdldCB3aWxsIGJlIGNsb3NlZCBhcyB3ZWxsLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIFN1Yi1tZW51IHRvIGNsb3NlLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSN1cFxuICAgKi9cbiAgdXAoJHRhcmdldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy9Gb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCl7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGRvbmUgY29sbGFwc2luZyB1cC5cbiAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjdXBcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgLy99KTtcblxuICAgIHZhciAkbWVudXMgPSAkdGFyZ2V0LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVVcCgwKS5hZGRCYWNrKCkuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICRtZW51cy5wYXJlbnQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFjY29yZGlvbiBtZW51LlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNkZXN0cm95ZWRcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlRG93bigwKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb25NZW51Jyk7XG5cbiAgICBGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LCAnYWNjb3JkaW9uJyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkFjY29yZGlvbk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBhbmltYXRlIHRoZSBvcGVuaW5nIG9mIGEgc3VibWVudSBpbiBtcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAyNTBcbiAgICovXG4gIHNsaWRlU3BlZWQ6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtZW51IHRvIGhhdmUgbXVsdGlwbGUgb3BlbiBwYW5lcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBtdWx0aU9wZW46IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb25NZW51LCAnQWNjb3JkaW9uTWVudScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJpbGxkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcmlsbGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBEcmlsbGRvd24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyaWxsZG93biBtZW51LlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBEcmlsbGRvd24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5GZWF0aGVyKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0RyaWxsZG93bicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0RyaWxsZG93bicsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAnQVJST1dfRE9XTic6ICdkb3duJyxcbiAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgJ1RBQic6ICdkb3duJyxcbiAgICAgICdTSElGVF9UQUInOiAndXAnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGRyaWxsZG93biBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMgb2YgZWxlbWVudHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaS5pcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignYScpO1xuICAgIHRoaXMuJHN1Ym1lbnVzID0gdGhpcy4kc3VibWVudUFuY2hvcnMucGFyZW50KCdsaScpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuICAgIHRoaXMuJG1lbnVJdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGknKS5ub3QoJy5qcy1kcmlsbGRvd24tYmFjaycpLmF0dHIoJ3JvbGUnLCAnbWVudWl0ZW0nKS5maW5kKCdhJyk7XG5cbiAgICB0aGlzLl9wcmVwYXJlTWVudSgpO1xuXG4gICAgdGhpcy5fa2V5Ym9hcmRFdmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBwcmVwYXJlcyBkcmlsbGRvd24gbWVudSBieSBzZXR0aW5nIGF0dHJpYnV0ZXMgdG8gbGlua3MgYW5kIGVsZW1lbnRzXG4gICAqIHNldHMgYSBtaW4gaGVpZ2h0IHRvIHByZXZlbnQgY29udGVudCBqdW1waW5nXG4gICAqIHdyYXBzIHRoZSBlbGVtZW50IGlmIG5vdCBhbHJlYWR5IHdyYXBwZWRcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfcHJlcGFyZU1lbnUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvLyBpZighdGhpcy5vcHRpb25zLmhvbGRPcGVuKXtcbiAgICAvLyAgIHRoaXMuX21lbnVMaW5rRXZlbnRzKCk7XG4gICAgLy8gfVxuICAgIHRoaXMuJHN1Ym1lbnVBbmNob3JzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkbGluayA9ICQodGhpcyk7XG4gICAgICB2YXIgJHN1YiA9ICRsaW5rLnBhcmVudCgpO1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5wYXJlbnRMaW5rKXtcbiAgICAgICAgJGxpbmsuY2xvbmUoKS5wcmVwZW5kVG8oJHN1Yi5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKSkud3JhcCgnPGxpIGNsYXNzPVwiaXMtc3VibWVudS1wYXJlbnQtaXRlbSBpcy1zdWJtZW51LWl0ZW0gaXMtZHJpbGxkb3duLXN1Ym1lbnUtaXRlbVwiIHJvbGU9XCJtZW51LWl0ZW1cIj48L2xpPicpO1xuICAgICAgfVxuICAgICAgJGxpbmsuZGF0YSgnc2F2ZWRIcmVmJywgJGxpbmsuYXR0cignaHJlZicpKS5yZW1vdmVBdHRyKCdocmVmJyk7XG4gICAgICAkbGluay5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAwLFxuICAgICAgICAgICAgJ3JvbGUnOiAnbWVudSdcbiAgICAgICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoJGxpbmspO1xuICAgIH0pO1xuICAgIHRoaXMuJHN1Ym1lbnVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkbWVudSA9ICQodGhpcyksXG4gICAgICAgICAgJGJhY2sgPSAkbWVudS5maW5kKCcuanMtZHJpbGxkb3duLWJhY2snKTtcbiAgICAgIGlmKCEkYmFjay5sZW5ndGgpe1xuICAgICAgICAkbWVudS5wcmVwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICB9XG4gICAgICBfdGhpcy5fYmFjaygkbWVudSk7XG4gICAgfSk7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bicpKXtcbiAgICAgIHRoaXMuJHdyYXBwZXIgPSAkKHRoaXMub3B0aW9ucy53cmFwcGVyKS5hZGRDbGFzcygnaXMtZHJpbGxkb3duJyk7XG4gICAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC53cmFwKHRoaXMuJHdyYXBwZXIpLnBhcmVudCgpLmNzcyh0aGlzLl9nZXRNYXhEaW1zKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIGVsZW1lbnRzIGluIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgbWVudSBpdGVtIHRvIGFkZCBoYW5kbGVycyB0by5cbiAgICovXG4gIF9ldmVudHMoJGVsZW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKVxuICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZigkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ2xpJykuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpKXtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBpZihlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LmZpcnN0RWxlbWVudENoaWxkKXtcbiAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gfVxuICAgICAgX3RoaXMuX3Nob3coJGVsZW0ucGFyZW50KCdsaScpKTtcblxuICAgICAgaWYoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spe1xuICAgICAgICB2YXIgJGJvZHkgPSAkKCdib2R5Jyk7XG4gICAgICAgICRib2R5Lm9mZignLnpmLmRyaWxsZG93bicpLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8ICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSkgeyByZXR1cm47IH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX2hpZGVBbGwoKTtcbiAgICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBrZXlkb3duIGV2ZW50IGxpc3RlbmVyIHRvIGBsaWAncyBpbiB0aGUgbWVudS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9rZXlib2FyZEV2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kbWVudUl0ZW1zLmFkZCh0aGlzLiRlbGVtZW50LmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjayA+IGEnKSkub24oJ2tleWRvd24uemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKS5jaGlsZHJlbignYScpLFxuICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGktMSkpO1xuICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpKzEsICRlbGVtZW50cy5sZW5ndGgtMSkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcmlsbGRvd24nLCB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkZWxlbWVudC5pcyhfdGhpcy4kc3VibWVudUFuY2hvcnMpKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbWVudC5wYXJlbnQoJ2xpJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkZWxlbWVudCksIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICB1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuX2JhY2soKTtcbiAgICAgICAgICAvL190aGlzLiRtZW51SXRlbXMuZmlyc3QoKS5mb2N1cygpOyAvLyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghJGVsZW1lbnQuaXMoX3RoaXMuJG1lbnVJdGVtcykpIHsgLy8gbm90IG1lbnUgaXRlbSBtZWFucyBiYWNrIGJ1dHRvblxuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKSk7XG4gICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpLmNoaWxkcmVuKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTsgLy8gZW5kIGtleWJvYXJkQWNjZXNzXG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIGFsbCBvcGVuIGVsZW1lbnRzLCBhbmQgcmV0dXJucyB0byByb290IG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI2Nsb3NlZFxuICAgKi9cbiAgX2hpZGVBbGwoKSB7XG4gICAgdmFyICRlbGVtID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUuaXMtYWN0aXZlJykuYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKTtcbiAgICAkZWxlbS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtKSwgZnVuY3Rpb24oZSl7XG4gICAgICAkZWxlbS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcnKTtcbiAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZnVsbHkgY2xvc2VkLlxuICAgICAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2Nsb3NlZFxuICAgICAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlZC56Zi5kcmlsbGRvd24nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVyIGZvciBlYWNoIGBiYWNrYCBidXR0b24sIGFuZCBjbG9zZXMgb3BlbiBtZW51cy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jYmFja1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBzdWItbWVudSB0byBhZGQgYGJhY2tgIGV2ZW50LlxuICAgKi9cbiAgX2JhY2soJGVsZW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJyk7XG4gICAgJGVsZW0uY2hpbGRyZW4oJy5qcy1kcmlsbGRvd24tYmFjaycpXG4gICAgICAub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnbW91c2V1cCBvbiBiYWNrJyk7XG4gICAgICAgIF90aGlzLl9oaWRlKCRlbGVtKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgdG8gbWVudSBpdGVtcyB3L28gc3VibWVudXMgdG8gY2xvc2Ugb3BlbiBtZW51cyBvbiBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWVudUxpbmtFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRtZW51SXRlbXMubm90KCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JylcbiAgICAgICAgLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAgICAgLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAvLyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIHN1Ym1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI29wZW5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBvcGVuLCBpLmUuIHRoZSBgbGlgIHRhZy5cbiAgICovXG4gIF9zaG93KCRlbGVtKSB7XG4gICAgJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIG9wZW5lZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI29wZW5cbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYuZHJpbGxkb3duJywgWyRlbGVtXSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGVzIGEgc3VibWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNoaWRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGhpZGUsIGkuZS4gdGhlIGB1bGAgdGFnLlxuICAgKi9cbiAgX2hpZGUoJGVsZW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICRlbGVtLmFkZENsYXNzKCdpcy1jbG9zaW5nJylcbiAgICAgICAgIC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgICAgICAgICRlbGVtLmJsdXIoKTtcbiAgICAgICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2hpZGVcbiAgICAgKi9cbiAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgKiBQcmV2ZW50cyBjb250ZW50IGp1bXBpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE1heERpbXMoKSB7XG4gICAgdmFyIG1heCA9IDAsIHJlc3VsdCA9IHt9O1xuICAgIHRoaXMuJHN1Ym1lbnVzLmFkZCh0aGlzLiRlbGVtZW50KS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbnVtT2ZFbGVtcyA9ICQodGhpcykuY2hpbGRyZW4oJ2xpJykubGVuZ3RoO1xuICAgICAgbWF4ID0gbnVtT2ZFbGVtcyA+IG1heCA/IG51bU9mRWxlbXMgOiBtYXg7XG4gICAgfSk7XG5cbiAgICByZXN1bHRbJ21pbi1oZWlnaHQnXSA9IGAke21heCAqIHRoaXMuJG1lbnVJdGVtc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHR9cHhgO1xuICAgIHJlc3VsdFsnbWF4LXdpZHRoJ10gPSBgJHt0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRofXB4YDtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIERyaWxsZG93biBNZW51XG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9oaWRlQWxsKCk7XG4gICAgRm91bmRhdGlvbi5OZXN0LkJ1cm4odGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKClcbiAgICAgICAgICAgICAgICAgLmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjaywgLmlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0nKS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAuZW5kKCkuZmluZCgnLmlzLWFjdGl2ZSwgLmlzLWNsb3NpbmcsIC5pcy1kcmlsbGRvd24tc3VibWVudScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZyBpcy1kcmlsbGRvd24tc3VibWVudScpXG4gICAgICAgICAgICAgICAgIC5lbmQoKS5maW5kKCdbZGF0YS1zdWJtZW51XScpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4IHJvbGUnKTtcbiAgICB0aGlzLiRzdWJtZW51QW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICB9KTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGxpbmsgPSAkKHRoaXMpO1xuICAgICAgaWYoJGxpbmsuZGF0YSgnc2F2ZWRIcmVmJykpe1xuICAgICAgICAkbGluay5hdHRyKCdocmVmJywgJGxpbmsuZGF0YSgnc2F2ZWRIcmVmJykpLnJlbW92ZURhdGEoJ3NhdmVkSHJlZicpO1xuICAgICAgfWVsc2V7IHJldHVybjsgfVxuICAgIH0pO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfTtcbn1cblxuRHJpbGxkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTWFya3VwIHVzZWQgZm9yIEpTIGdlbmVyYXRlZCBiYWNrIGJ1dHRvbi4gUHJlcGVuZGVkIHRvIHN1Ym1lbnUgbGlzdHMgYW5kIGRlbGV0ZWQgb24gYGRlc3Ryb3lgIG1ldGhvZCwgJ2pzLWRyaWxsZG93bi1iYWNrJyBjbGFzcyByZXF1aXJlZC4gUmVtb3ZlIHRoZSBiYWNrc2xhc2ggKGBcXGApIGlmIGNvcHkgYW5kIHBhc3RpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJzxcXGxpPjxcXGE+QmFjazxcXC9hPjxcXC9saT4nXG4gICAqL1xuICBiYWNrQnV0dG9uOiAnPGxpIGNsYXNzPVwianMtZHJpbGxkb3duLWJhY2tcIj48YSB0YWJpbmRleD1cIjBcIj5CYWNrPC9hPjwvbGk+JyxcbiAgLyoqXG4gICAqIE1hcmt1cCB1c2VkIHRvIHdyYXAgZHJpbGxkb3duIG1lbnUuIFVzZSBhIGNsYXNzIG5hbWUgZm9yIGluZGVwZW5kZW50IHN0eWxpbmc7IHRoZSBKUyBhcHBsaWVkIGNsYXNzOiBgaXMtZHJpbGxkb3duYCBpcyByZXF1aXJlZC4gUmVtb3ZlIHRoZSBiYWNrc2xhc2ggKGBcXGApIGlmIGNvcHkgYW5kIHBhc3RpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJzxcXGRpdiBjbGFzcz1cImlzLWRyaWxsZG93blwiPjxcXC9kaXY+J1xuICAgKi9cbiAgd3JhcHBlcjogJzxkaXY+PC9kaXY+JyxcbiAgLyoqXG4gICAqIEFkZHMgdGhlIHBhcmVudCBsaW5rIHRvIHRoZSBzdWJtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBwYXJlbnRMaW5rOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtZW51IHRvIHJldHVybiB0byByb290IGxpc3Qgb24gYm9keSBjbGljay5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZVxuICAvLyBob2xkT3BlbjogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcmlsbGRvd24sICdEcmlsbGRvd24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIERyb3Bkb3duIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBEcm9wZG93biB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgZHJvcGRvd24uXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24uXG4gICAqICAgICAgICBPYmplY3Qgc2hvdWxkIGJlIG9mIHRoZSBkcm9wZG93biBwYW5lbCwgcmF0aGVyIHRoYW4gaXRzIGFuY2hvci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBEcm9wZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0Ryb3Bkb3duJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd24nLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJyxcbiAgICAgICdUQUInOiAndGFiX2ZvcndhcmQnLFxuICAgICAgJ1NISUZUX1RBQic6ICd0YWJfYmFja3dhcmQnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBzZXR0aW5nL2NoZWNraW5nIG9wdGlvbnMgYW5kIGF0dHJpYnV0ZXMsIGFkZGluZyBoZWxwZXIgdmFyaWFibGVzLCBhbmQgc2F2aW5nIHRoZSBhbmNob3IuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyICRpZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgIHRoaXMuJGFuY2hvciA9ICQoYFtkYXRhLXRvZ2dsZT1cIiR7JGlkfVwiXWApIHx8ICQoYFtkYXRhLW9wZW49XCIkeyRpZH1cIl1gKTtcbiAgICB0aGlzLiRhbmNob3IuYXR0cih7XG4gICAgICAnYXJpYS1jb250cm9scyc6ICRpZCxcbiAgICAgICdkYXRhLWlzLWZvY3VzJzogZmFsc2UsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2VcblxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICB0aGlzLmNvdW50ZXIgPSA0O1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucyA9IFtdO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdkYXRhLXJlc2l6ZSc6ICRpZCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLiRhbmNob3JbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZGQtYW5jaG9yJylcbiAgICB9KTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGN1cnJlbnQgb3JpZW50YXRpb24gb2YgZHJvcGRvd24gcGFuZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHBvc2l0aW9uIC0gc3RyaW5nIHZhbHVlIG9mIGEgcG9zaXRpb24gY2xhc3MuXG4gICAqL1xuICBnZXRQb3NpdGlvbkNsYXNzKCkge1xuICAgIHZhciB2ZXJ0aWNhbFBvc2l0aW9uID0gdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyh0b3B8bGVmdHxyaWdodHxib3R0b20pL2cpO1xuICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uID0gdmVydGljYWxQb3NpdGlvbiA/IHZlcnRpY2FsUG9zaXRpb25bMF0gOiAnJztcbiAgICB2YXIgaG9yaXpvbnRhbFBvc2l0aW9uID0gL2Zsb2F0LShcXFMrKVxccy8uZXhlYyh0aGlzLiRhbmNob3JbMF0uY2xhc3NOYW1lKTtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uWzFdIDogJyc7XG4gICAgdmFyIHBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uICsgJyAnICsgdmVydGljYWxQb3NpdGlvbiA6IHZlcnRpY2FsUG9zaXRpb247XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkanVzdHMgdGhlIGRyb3Bkb3duIHBhbmVzIG9yaWVudGF0aW9uIGJ5IGFkZGluZy9yZW1vdmluZyBwb3NpdGlvbmluZyBjbGFzc2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb24gY2xhc3MgdG8gcmVtb3ZlLlxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuICAgIC8vZGVmYXVsdCwgdHJ5IHN3aXRjaGluZyB0byBvcHBvc2l0ZSBzaWRlXG4gICAgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd0b3AnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ3JpZ2h0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1cblxuICAgIC8vaWYgZGVmYXVsdCBjaGFuZ2UgZGlkbid0IHdvcmssIHRyeSBib3R0b20gb3IgbGVmdCBmaXJzdFxuICAgIGVsc2UgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICd0b3AnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5jb3VudGVyLS07XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZSBkcm9wZG93biBwYW5lLCBjaGVja3MgZm9yIGNvbGxpc2lvbnMuXG4gICAqIFJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiBpZiBhIGNvbGxpc2lvbiBpcyBkZXRlY3RlZCwgd2l0aCBhIG5ldyBwb3NpdGlvbiBjbGFzcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0UG9zaXRpb24oKSB7XG4gICAgaWYodGhpcy4kYW5jaG9yLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJyl7IHJldHVybiBmYWxzZTsgfVxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25DbGFzcygpLFxuICAgICAgICAkZWxlRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kZWxlbWVudCksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRhbmNob3IpLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGRpcmVjdGlvbiA9IChwb3NpdGlvbiA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogKChwb3NpdGlvbiA9PT0gJ3JpZ2h0JykgPyAnbGVmdCcgOiAndG9wJykpLFxuICAgICAgICBwYXJhbSA9IChkaXJlY3Rpb24gPT09ICd0b3AnKSA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgb2Zmc2V0ID0gKHBhcmFtID09PSAnaGVpZ2h0JykgPyB0aGlzLm9wdGlvbnMudk9mZnNldCA6IHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuXG5cblxuICAgIGlmKCgkZWxlRGltcy53aWR0aCA+PSAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKSB8fCAoIXRoaXMuY291bnRlciAmJiAhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50KSkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLiRlbGVtZW50LCB0aGlzLiRhbmNob3IsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgICAgJ3dpZHRoJzogJGVsZURpbXMud2luZG93RGltcy53aWR0aCAtICh0aGlzLm9wdGlvbnMuaE9mZnNldCAqIDIpLFxuICAgICAgICAnaGVpZ2h0JzogJ2F1dG8nXG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJGFuY2hvciwgcG9zaXRpb24sIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy4kZWxlbWVudCwgZmFsc2UsIHRydWUpICYmIHRoaXMuY291bnRlcil7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBlbGVtZW50IHV0aWxpemluZyB0aGUgdHJpZ2dlcnMgdXRpbGl0eSBsaWJyYXJ5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmhvdmVyKXtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpXG4gICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIF90aGlzLm9wZW4oKTtcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIHRydWUpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5ob3ZlclBhbmUpe1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAgIC5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRhbmNob3IuYWRkKHRoaXMuJGVsZW1lbnQpLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICB2YXIgJHRhcmdldCA9ICQodGhpcyksXG4gICAgICAgIHZpc2libGVGb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bicsIHtcbiAgICAgICAgdGFiX2ZvcndhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyh2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpKSkgeyAvLyBsZWZ0IG1vZGFsIGRvd253YXJkcywgc2V0dGluZyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmFwRm9jdXMpIHsgLy8gaWYgZm9jdXMgc2hhbGwgYmUgdHJhcHBlZFxuICAgICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgZm9jdXMgaXMgbm90IHRyYXBwZWQsIGNsb3NlIGRyb3Bkb3duIG9uIGZvY3VzIG91dFxuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXModmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7IC8vIGlmIGZvY3VzIHNoYWxsIGJlIHRyYXBwZWRcbiAgICAgICAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBmb2N1cyBpcyBub3QgdHJhcHBlZCwgY2xvc2UgZHJvcGRvd24gb24gZm9jdXMgb3V0XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcyhfdGhpcy4kYW5jaG9yKSkge1xuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSkuZm9jdXMoKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgIHZhciAkYm9keSA9ICQoZG9jdW1lbnQuYm9keSkubm90KHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAkYm9keS5vZmYoJ2NsaWNrLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAub24oJ2NsaWNrLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZihfdGhpcy4kYW5jaG9yLmlzKGUudGFyZ2V0KSB8fCBfdGhpcy4kYW5jaG9yLmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgZHJvcGRvd24gcGFuZSwgYW5kIGZpcmVzIGEgYnViYmxpbmcgZXZlbnQgdG8gY2xvc2Ugb3RoZXIgZHJvcGRvd25zLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyb3Bkb3duI2Nsb3NlbWVcbiAgICogQGZpcmVzIERyb3Bkb3duI3Nob3dcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgLy8gdmFyIF90aGlzID0gdGhpcztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB0byBjbG9zZSBvdGhlciBvcGVuIGRyb3Bkb3duc1xuICAgICAqIEBldmVudCBEcm9wZG93biNjbG9zZW1lXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLmRyb3Bkb3duJywgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICB0aGlzLiRhbmNob3IuYWRkQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIC8vIHRoaXMuJGVsZW1lbnQvKi5zaG93KCkqLztcbiAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgdmFyICRmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG4gICAgICBpZigkZm9jdXNhYmxlLmxlbmd0aCl7XG4gICAgICAgICRmb2N1c2FibGUuZXEoMCkuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bicsIFt0aGlzLiRlbGVtZW50XSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvcGVuIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogdHJ1ZX0pO1xuXG4gICAgdGhpcy4kYW5jaG9yLnJlbW92ZUNsYXNzKCdob3ZlcicpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgaWYodGhpcy5jbGFzc0NoYW5nZWQpe1xuICAgICAgdmFyIGN1clBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICAgIGlmKGN1clBvc2l0aW9uQ2xhc3Mpe1xuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGN1clBvc2l0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcylcbiAgICAgICAgICAvKi5oaWRlKCkqLy5jc3Moe2hlaWdodDogJycsIHdpZHRoOiAnJ30pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY291bnRlciA9IDQ7XG4gICAgICB0aGlzLnVzZWRQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBkcm9wZG93biBwYW5lJ3MgdmlzaWJpbGl0eS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIGlmKHRoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicpKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgIHRoaXMuJGFuY2hvci5vZmYoJy56Zi5kcm9wZG93bicpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjUwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBzdWJtZW51cyB0byBvcGVuIG9uIGhvdmVyIGV2ZW50c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBob3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBEb24ndCBjbG9zZSBkcm9wZG93biB3aGVuIGhvdmVyaW5nIG92ZXIgZHJvcGRvd24gcGFuZVxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGhvdmVyUGFuZTogZmFsc2UsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICB2T2Zmc2V0OiAxLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgaE9mZnNldDogMSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYWRqdXN0IG9wZW4gcG9zaXRpb24uIEpTIHdpbGwgdGVzdCBhbmQgZmlsbCB0aGlzIGluLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gdHJhcCBmb2N1cyB0byB0aGUgZHJvcGRvd24gcGFuZSBpZiBvcGVuZWQgd2l0aCBrZXlib2FyZCBjb21tYW5kcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gc2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gdGhlIHBhbmUsIHJlZ2FyZGxlc3Mgb2YgbWV0aG9kIG9mIG9wZW5pbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5IHRvIGNsb3NlIHRoZSBkcm9wZG93bi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZVxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd24sICdEcm9wZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd25NZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93bi1tZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxuY2xhc3MgRHJvcGRvd25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRHJvcGRvd25NZW51LlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2Ryb3Bkb3duJyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd25NZW51Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd25NZW51Jywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLCBhbmQgY2FsbHMgX3ByZXBhcmVNZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykuYWRkQ2xhc3MoJ2ZpcnN0LXN1YicpO1xuXG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdbcm9sZT1cIm1lbnVpdGVtXCJdJyk7XG4gICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzLmZpbmQoJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudmVydGljYWxDbGFzcyk7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ3JpZ2h0JyB8fCBGb3VuZGF0aW9uLnJ0bCgpIHx8IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLnRvcC1iYXItcmlnaHQnKS5pcygnKicpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID0gJ3JpZ2h0JztcbiAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLWxlZnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH07XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byBlbGVtZW50cyB3aXRoaW4gdGhlIG1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGhhc1RvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8ICh0eXBlb2Ygd2luZG93Lm9udG91Y2hzdGFydCAhPT0gJ3VuZGVmaW5lZCcpLFxuICAgICAgICBwYXJDbGFzcyA9ICdpcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCc7XG5cbiAgICAvLyB1c2VkIGZvciBvbkNsaWNrIGFuZCBpbiB0aGUga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICB2YXIgaGFuZGxlQ2xpY2tGbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCBgLiR7cGFyQ2xhc3N9YCksXG4gICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpLFxuICAgICAgICAgIGhhc0NsaWNrZWQgPSAkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51Jyk7XG5cbiAgICAgIGlmIChoYXNTdWIpIHtcbiAgICAgICAgaWYgKGhhc0NsaWNrZWQpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrIHx8ICghX3RoaXMub3B0aW9ucy5jbGlja09wZW4gJiYgIWhhc1RvdWNoKSB8fCAoX3RoaXMub3B0aW9ucy5mb3JjZUZvbGxvdyAmJiBoYXNUb3VjaCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKSk7XG4gICAgICAgICAgJGVsZW0uYWRkKCRlbGVtLnBhcmVudHNVbnRpbChfdGhpcy4kZWxlbWVudCwgYC4ke3BhckNsYXNzfWApKS5hdHRyKCdkYXRhLWlzLWNsaWNrJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IHJldHVybjsgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3BlbiB8fCBoYXNUb3VjaCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUgdG91Y2hzdGFydC56Zi5kcm9wZG93bm1lbnUnLCBoYW5kbGVDbGlja0ZuKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG5cbiAgICAgICAgaWYgKGhhc1N1Yikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcbiAgICAgICAgaWYgKGhhc1N1YiAmJiBfdGhpcy5vcHRpb25zLmF1dG9jbG9zZSkge1xuICAgICAgICAgIGlmICgkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyAmJiBfdGhpcy5vcHRpb25zLmNsaWNrT3BlbikgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuY2xvc2luZ1RpbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbWVudCA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCAnW3JvbGU9XCJtZW51aXRlbVwiXScpLFxuICAgICAgICAgIGlzVGFiID0gX3RoaXMuJHRhYnMuaW5kZXgoJGVsZW1lbnQpID4gLTEsXG4gICAgICAgICAgJGVsZW1lbnRzID0gaXNUYWIgPyBfdGhpcy4kdGFicyA6ICRlbGVtZW50LnNpYmxpbmdzKCdsaScpLmFkZCgkZWxlbWVudCksXG4gICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbmV4dFNpYmxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCEkZWxlbWVudC5pcygnOmxhc3QtY2hpbGQnKSkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LCBwcmV2U2libGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkcHJldkVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBvcGVuU3ViID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkc3ViID0gJGVsZW1lbnQuY2hpbGRyZW4oJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcbiAgICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW1lbnQuZmluZCgnbGkgPiBhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSB7IHJldHVybjsgfVxuICAgICAgfSwgY2xvc2VTdWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9pZiAoJGVsZW1lbnQuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgIHZhciBjbG9zZSA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGNsb3NlLmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoY2xvc2UpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vfVxuICAgICAgfTtcbiAgICAgIHZhciBmdW5jdGlvbnMgPSB7XG4gICAgICAgIG9wZW46IG9wZW5TdWIsXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgX3RoaXMuJG1lbnVJdGVtcy5maW5kKCdhOmZpcnN0JykuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGlzVGFiKSB7XG4gICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhfdGhpcy5vcHRpb25zLnZlcnRpY2FsQ2xhc3MpKSB7IC8vIHZlcnRpY2FsIG1lbnVcbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdsZWZ0JykgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgcHJldmlvdXM6IG9wZW5TdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gaG9yaXpvbnRhbCBtZW51XG4gICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICBuZXh0OiBuZXh0U2libGluZyxcbiAgICAgICAgICAgIHByZXZpb3VzOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICB1cDogY2xvc2VTdWJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gbm90IHRhYnMgLT4gb25lIHN1YlxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hbGlnbm1lbnQgPT09ICdsZWZ0JykgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWIsXG4gICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgIHVwOiBwcmV2U2libGluZ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgIHByZXZpb3VzOiBvcGVuU3ViLFxuICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duTWVudScsIGZ1bmN0aW9ucyk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICB2YXIgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgJGJvZHkub2ZmKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnKVxuICAgICAgICAgLm9uKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgIHZhciAkbGluayA9IF90aGlzLiRlbGVtZW50LmZpbmQoZS50YXJnZXQpO1xuICAgICAgICAgICBpZiAoJGxpbmsubGVuZ3RoKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgIF90aGlzLl9oaWRlKCk7XG4gICAgICAgICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51Jyk7XG4gICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIGRyb3Bkb3duIHBhbmUsIGFuZCBjaGVja3MgZm9yIGNvbGxpc2lvbnMgZmlyc3QuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkc3ViIC0gdWwgZWxlbWVudCB0aGF0IGlzIGEgc3VibWVudSB0byBzaG93XG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I3Nob3dcbiAgICovXG4gIF9zaG93KCRzdWIpIHtcbiAgICB2YXIgaWR4ID0gdGhpcy4kdGFicy5pbmRleCh0aGlzLiR0YWJzLmZpbHRlcihmdW5jdGlvbihpLCBlbCkge1xuICAgICAgcmV0dXJuICQoZWwpLmZpbmQoJHN1YikubGVuZ3RoID4gMDtcbiAgICB9KSk7XG4gICAgdmFyICRzaWJzID0gJHN1Yi5wYXJlbnQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jykuc2libGluZ3MoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy5faGlkZSgkc2licywgaWR4KTtcbiAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5hZGRDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJykuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KVxuICAgICAgICAucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZENsYXNzKCdpcy1hY3RpdmUnKVxuICAgICAgICAuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgdmFyIGNsZWFyID0gRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICBpZiAoIWNsZWFyKSB7XG4gICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAnLXJpZ2h0JyA6ICctbGVmdCcsXG4gICAgICAgICAgJHBhcmVudExpID0gJHN1Yi5wYXJlbnQoJy5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKGBvcGVucyR7b2xkQ2xhc3N9YCkuYWRkQ2xhc3MoYG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKTtcbiAgICAgIGNsZWFyID0gRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICAgIGlmICghY2xlYXIpIHtcbiAgICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKGBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YCkuYWRkQ2xhc3MoJ29wZW5zLWlubmVyJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICcnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykgeyB0aGlzLl9hZGRCb2R5SGFuZGxlcigpOyB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgbmV3IGRyb3Bkb3duIHBhbmUgaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I3Nob3dcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYuZHJvcGRvd25tZW51JywgWyRzdWJdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyBhIHNpbmdsZSwgY3VycmVudGx5IG9wZW4gZHJvcGRvd24gcGFuZSwgaWYgcGFzc2VkIGEgcGFyYW1ldGVyLCBvdGhlcndpc2UsIGhpZGVzIGV2ZXJ5dGhpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSBlbGVtZW50IHdpdGggYSBzdWJtZW51IHRvIGhpZGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIGluZGV4IG9mIHRoZSAkdGFicyBjb2xsZWN0aW9uIHRvIGhpZGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oaWRlKCRlbGVtLCBpZHgpIHtcbiAgICB2YXIgJHRvQ2xvc2U7XG4gICAgaWYgKCRlbGVtICYmICRlbGVtLmxlbmd0aCkge1xuICAgICAgJHRvQ2xvc2UgPSAkZWxlbTtcbiAgICB9IGVsc2UgaWYgKGlkeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkdG9DbG9zZSA9IHRoaXMuJHRhYnMubm90KGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgIHJldHVybiBpID09PSBpZHg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkdG9DbG9zZSA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBzb21ldGhpbmdUb0Nsb3NlID0gJHRvQ2xvc2UuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8ICR0b0Nsb3NlLmZpbmQoJy5pcy1hY3RpdmUnKS5sZW5ndGggPiAwO1xuXG4gICAgaWYgKHNvbWV0aGluZ1RvQ2xvc2UpIHtcbiAgICAgICR0b0Nsb3NlLmZpbmQoJ2xpLmlzLWFjdGl2ZScpLmFkZCgkdG9DbG9zZSkuYXR0cih7XG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdkYXRhLWlzLWNsaWNrJzogZmFsc2VcbiAgICAgIH0pLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgJHRvQ2xvc2UuZmluZCgndWwuanMtZHJvcGRvd24tYWN0aXZlJykuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICAgIH0pLnJlbW92ZUNsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKTtcblxuICAgICAgaWYgKHRoaXMuY2hhbmdlZCB8fCAkdG9DbG9zZS5maW5kKCdvcGVucy1pbm5lcicpLmxlbmd0aCkge1xuICAgICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZCgkdG9DbG9zZSlcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYG9wZW5zLWlubmVyIG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgb3BlbnMtJHtvbGRDbGFzc31gKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9wZW4gbWVudXMgYXJlIGNsb3NlZC5cbiAgICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjaGlkZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd25tZW51JywgWyR0b0Nsb3NlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRtZW51SXRlbXMub2ZmKCcuemYuZHJvcGRvd25tZW51JykucmVtb3ZlQXR0cignZGF0YS1pcy1jbGljaycpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnaXMtcmlnaHQtYXJyb3cgaXMtbGVmdC1hcnJvdyBpcy1kb3duLWFycm93IG9wZW5zLXJpZ2h0IG9wZW5zLWxlZnQgb3BlbnMtaW5uZXInKTtcbiAgICAkKGRvY3VtZW50LmJvZHkpLm9mZignLnpmLmRyb3Bkb3dubWVudScpO1xuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcm9wZG93bicpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5Ecm9wZG93bk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBEaXNhbGxvd3MgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyBzdWJtZW51c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSG92ZXI6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgYSBzdWJtZW51IHRvIGF1dG9tYXRpY2FsbHkgY2xvc2Ugb24gYSBtb3VzZWxlYXZlIGV2ZW50LCBpZiBub3QgY2xpY2tlZCBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9jbG9zZTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwXG4gICAqL1xuICBob3ZlckRlbGF5OiA1MCxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBvcGVuL3JlbWFpbiBvcGVuIG9uIHBhcmVudCBjbGljayBldmVudC4gQWxsb3dzIGN1cnNvciB0byBtb3ZlIGF3YXkgZnJvbSBtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBjbG9zaW5nIGEgc3VibWVudSBvbiBhIG1vdXNlbGVhdmUgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuXG4gIGNsb3NpbmdUaW1lOiA1MDAsXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiB0aGUgbWVudSByZWxhdGl2ZSB0byB3aGF0IGRpcmVjdGlvbiB0aGUgc3VibWVudXMgc2hvdWxkIG9wZW4uIEhhbmRsZWQgYnkgSlMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2xlZnQnXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdsZWZ0JyxcbiAgLyoqXG4gICAqIEFsbG93IGNsaWNrcyBvbiB0aGUgYm9keSB0byBjbG9zZSBhbnkgb3BlbiBzdWJtZW51cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHZlcnRpY2FsIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYHZlcnRpY2FsYC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3ZlcnRpY2FsJ1xuICAgKi9cbiAgdmVydGljYWxDbGFzczogJ3ZlcnRpY2FsJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gcmlnaHQtc2lkZSBvcmllbnRlZCBtZW51cywgRm91bmRhdGlvbiBkZWZhdWx0IGlzIGBhbGlnbi1yaWdodGAuIFVwZGF0ZSB0aGlzIGlmIHVzaW5nIHlvdXIgb3duIGNsYXNzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdhbGlnbi1yaWdodCdcbiAgICovXG4gIHJpZ2h0Q2xhc3M6ICdhbGlnbi1yaWdodCcsXG4gIC8qKlxuICAgKiBCb29sZWFuIHRvIGZvcmNlIG92ZXJpZGUgdGhlIGNsaWNraW5nIG9mIGxpbmtzIHRvIHBlcmZvcm0gZGVmYXVsdCBhY3Rpb24sIG9uIHNlY29uZCB0b3VjaCBldmVudCBmb3IgbW9iaWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBmb3JjZUZvbGxvdzogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKERyb3Bkb3duTWVudSwgJ0Ryb3Bkb3duTWVudScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRXF1YWxpemVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5lcXVhbGl6ZXJcbiAqL1xuXG5jbGFzcyBFcXVhbGl6ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucyl7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zICA9ICQuZXh0ZW5kKHt9LCBFcXVhbGl6ZXIuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0VxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBFcXVhbGl6ZXIgcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGVxSWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtZXF1YWxpemVyJykgfHwgJyc7XG4gICAgdmFyICR3YXRjaGVkID0gdGhpcy4kZWxlbWVudC5maW5kKGBbZGF0YS1lcXVhbGl6ZXItd2F0Y2g9XCIke2VxSWR9XCJdYCk7XG5cbiAgICB0aGlzLiR3YXRjaGVkID0gJHdhdGNoZWQubGVuZ3RoID8gJHdhdGNoZWQgOiB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplci13YXRjaF0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtcmVzaXplJywgKGVxSWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZXEnKSkpO1xuXG4gICAgdGhpcy5oYXNOZXN0ZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgIHRoaXMuaXNOZXN0ZWQgPSB0aGlzLiRlbGVtZW50LnBhcmVudHNVbnRpbChkb2N1bWVudC5ib2R5LCAnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgdGhpcy5fYmluZEhhbmRsZXIgPSB7XG4gICAgICBvblJlc2l6ZU1lQm91bmQ6IHRoaXMuX29uUmVzaXplTWUuYmluZCh0aGlzKSxcbiAgICAgIG9uUG9zdEVxdWFsaXplZEJvdW5kOiB0aGlzLl9vblBvc3RFcXVhbGl6ZWQuYmluZCh0aGlzKVxuICAgIH07XG5cbiAgICB2YXIgaW1ncyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyk7XG4gICAgdmFyIHRvb1NtYWxsO1xuICAgIGlmKHRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uKXtcbiAgICAgIHRvb1NtYWxsID0gdGhpcy5fY2hlY2tNUSgpO1xuICAgICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9jaGVja01RLmJpbmQodGhpcykpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuICAgIGlmKCh0b29TbWFsbCAhPT0gdW5kZWZpbmVkICYmIHRvb1NtYWxsID09PSBmYWxzZSkgfHwgdG9vU21hbGwgPT09IHVuZGVmaW5lZCl7XG4gICAgICBpZihpbWdzLmxlbmd0aCl7XG4gICAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoaW1ncywgdGhpcy5fcmVmbG93LmJpbmQodGhpcykpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuX3JlZmxvdygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBpZiB0aGUgYnJlYWtwb2ludCBpcyB0b28gc21hbGwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGF1c2VFdmVudHMoKSB7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoe1xuICAgICAgJy56Zi5lcXVhbGl6ZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZCxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyByZXNpemVtZS56Zi50cmlnZ2VyLCB3aXRoIGJvdW5kIHRoaXMgb24gX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUmVzaXplTWUoZSkge1xuICAgIHRoaXMuX3JlZmxvdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIGhhbmRsZSAkZWxlbWVudHMgcG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblBvc3RFcXVhbGl6ZWQoZSkge1xuICAgIGlmKGUudGFyZ2V0ICE9PSB0aGlzLiRlbGVtZW50WzBdKXsgdGhpcy5fcmVmbG93KCk7IH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEVxdWFsaXplci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgIGlmKHRoaXMuaGFzTmVzdGVkKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJywgdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCk7XG4gICAgfVxuICAgIHRoaXMuaXNPbiA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgdG8gdGhlIG1pbmltdW0gcmVxdWlyZWQgc2l6ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja01RKCkge1xuICAgIHZhciB0b29TbWFsbCA9ICFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuZXF1YWxpemVPbik7XG4gICAgaWYodG9vU21hbGwpe1xuICAgICAgaWYodGhpcy5pc09uKXtcbiAgICAgICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICBpZighdGhpcy5pc09uKXtcbiAgICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b29TbWFsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIG5vb3AgdmVyc2lvbiBmb3IgdGhlIHBsdWdpblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2tpbGxzd2l0Y2goKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEVxdWFsaXplciB1cG9uIERPTSBjaGFuZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZWZsb3coKSB7XG4gICAgaWYoIXRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uU3RhY2spe1xuICAgICAgaWYodGhpcy5faXNTdGFja2VkKCkpe1xuICAgICAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmVxdWFsaXplQnlSb3cpIHtcbiAgICAgIHRoaXMuZ2V0SGVpZ2h0c0J5Um93KHRoaXMuYXBwbHlIZWlnaHRCeVJvdy5iaW5kKHRoaXMpKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuZ2V0SGVpZ2h0cyh0aGlzLmFwcGx5SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYW51YWxseSBkZXRlcm1pbmVzIGlmIHRoZSBmaXJzdCAyIGVsZW1lbnRzIGFyZSAqTk9UKiBzdGFja2VkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2lzU3RhY2tlZCgpIHtcbiAgICByZXR1cm4gdGhpcy4kd2F0Y2hlZFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgIT09IHRoaXMuJHdhdGNoZWRbMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQSBub24tb3B0aW9uYWwgY2FsbGJhY2sgdG8gcmV0dXJuIHRoZSBoZWlnaHRzIGFycmF5IHRvLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAqL1xuICBnZXRIZWlnaHRzKGNiKSB7XG4gICAgdmFyIGhlaWdodHMgPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgaGVpZ2h0cy5wdXNoKHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0SGVpZ2h0KTtcbiAgICB9XG4gICAgY2IoaGVpZ2h0cyk7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgKi9cbiAgZ2V0SGVpZ2h0c0J5Um93KGNiKSB7XG4gICAgdmFyIGxhc3RFbFRvcE9mZnNldCA9ICh0aGlzLiR3YXRjaGVkLmxlbmd0aCA/IHRoaXMuJHdhdGNoZWQuZmlyc3QoKS5vZmZzZXQoKS50b3AgOiAwKSxcbiAgICAgICAgZ3JvdXBzID0gW10sXG4gICAgICAgIGdyb3VwID0gMDtcbiAgICAvL2dyb3VwIGJ5IFJvd1xuICAgIGdyb3Vwc1tncm91cF0gPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSB0aGlzLiR3YXRjaGVkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgIHRoaXMuJHdhdGNoZWRbaV0uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuICAgICAgLy9tYXliZSBjb3VsZCB1c2UgdGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRUb3BcbiAgICAgIHZhciBlbE9mZnNldFRvcCA9ICQodGhpcy4kd2F0Y2hlZFtpXSkub2Zmc2V0KCkudG9wO1xuICAgICAgaWYgKGVsT2Zmc2V0VG9wIT1sYXN0RWxUb3BPZmZzZXQpIHtcbiAgICAgICAgZ3JvdXArKztcbiAgICAgICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgICAgICBsYXN0RWxUb3BPZmZzZXQ9ZWxPZmZzZXRUb3A7XG4gICAgICB9XG4gICAgICBncm91cHNbZ3JvdXBdLnB1c2goW3RoaXMuJHdhdGNoZWRbaV0sdGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHRdKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMCwgbG4gPSBncm91cHMubGVuZ3RoOyBqIDwgbG47IGorKykge1xuICAgICAgdmFyIGhlaWdodHMgPSAkKGdyb3Vwc1tqXSkubWFwKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzWzFdOyB9KS5nZXQoKTtcbiAgICAgIHZhciBtYXggICAgICAgICA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgICAgZ3JvdXBzW2pdLnB1c2gobWF4KTtcbiAgICB9XG4gICAgY2IoZ3JvdXBzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdFxuICAgKiBAcGFyYW0ge2FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICovXG4gIGFwcGx5SGVpZ2h0KGhlaWdodHMpIHtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcblxuICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCBtYXgpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3QgYnkgcm93XG4gICAqIEBwYXJhbSB7YXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRSb3dcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkUm93XG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgKi9cbiAgYXBwbHlIZWlnaHRCeVJvdyhncm91cHMpIHtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgYXJlIGFwcGxpZWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGxlbiA7IGkrKykge1xuICAgICAgdmFyIGdyb3Vwc0lMZW5ndGggPSBncm91cHNbaV0ubGVuZ3RoLFxuICAgICAgICAgIG1heCA9IGdyb3Vwc1tpXVtncm91cHNJTGVuZ3RoIC0gMV07XG4gICAgICBpZiAoZ3JvdXBzSUxlbmd0aDw9Mikge1xuICAgICAgICAkKGdyb3Vwc1tpXVswXVswXSkuY3NzKHsnaGVpZ2h0JzonYXV0byd9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgcGVyIHJvdyBhcmUgYXBwbGllZFxuICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkUm93XG4gICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3ByZWVxdWFsaXplZHJvdy56Zi5lcXVhbGl6ZXInKTtcbiAgICAgIGZvciAodmFyIGogPSAwLCBsZW5KID0gKGdyb3Vwc0lMZW5ndGgtMSk7IGogPCBsZW5KIDsgaisrKSB7XG4gICAgICAgICQoZ3JvdXBzW2ldW2pdWzBdKS5jc3MoeydoZWlnaHQnOm1heH0pO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBwZXIgcm93IGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkUm93XG4gICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgKi9cbiAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuRXF1YWxpemVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRW5hYmxlIGhlaWdodCBlcXVhbGl6YXRpb24gd2hlbiBzdGFja2VkIG9uIHNtYWxsZXIgc2NyZWVucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBlcXVhbGl6ZU9uU3RhY2s6IHRydWUsXG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiByb3cgYnkgcm93LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZUJ5Um93OiBmYWxzZSxcbiAgLyoqXG4gICAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1pbmltdW0gYnJlYWtwb2ludCBzaXplIHRoZSBwbHVnaW4gc2hvdWxkIGVxdWFsaXplIGhlaWdodHMgb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIGVxdWFsaXplT246ICcnXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRXF1YWxpemVyLCAnRXF1YWxpemVyJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBJbnRlcmNoYW5nZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uaW50ZXJjaGFuZ2VcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKi9cblxuY2xhc3MgSW50ZXJjaGFuZ2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBJbnRlcmNoYW5nZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYXRoID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdJbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBJbnRlcmNoYW5nZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgaW50ZXJjaGFuZ2UgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLl9hZGRCcmVha3BvaW50cygpO1xuICAgIHRoaXMuX2dlbmVyYXRlUnVsZXMoKTtcbiAgICB0aGlzLl9yZWZsb3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuaW50ZXJjaGFuZ2UnLCBGb3VuZGF0aW9uLnV0aWwudGhyb3R0bGUodGhpcy5fcmVmbG93LmJpbmQodGhpcyksIDUwKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB2YXIgbWF0Y2g7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlLCBidXQgb25seSBzYXZlIHRoZSBsYXN0IG1hdGNoXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZih0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcblxuICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocnVsZS5xdWVyeSkubWF0Y2hlcykge1xuICAgICAgICAgIG1hdGNoID0gcnVsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5yZXBsYWNlKG1hdGNoLnBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBGb3VuZGF0aW9uIGJyZWFrcG9pbnRzIGFuZCBhZGRzIHRoZW0gdG8gdGhlIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyBvYmplY3QuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEJyZWFrcG9pbnRzKCkge1xuICAgIGZvciAodmFyIGkgaW4gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXMpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllc1tpXTtcbiAgICAgICAgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5Lm5hbWVdID0gcXVlcnkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgSW50ZXJjaGFuZ2UgZWxlbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1lZGlhIHF1ZXJ5ICsgY29udGVudCBwYWlyaW5nc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRoYXQgaXMgYW4gSW50ZXJjaGFuZ2UgaW5zdGFuY2VcbiAgICogQHJldHVybnMge0FycmF5fSBzY2VuYXJpb3MgLSBBcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSAnbXEnIGFuZCAncGF0aCcga2V5cyB3aXRoIGNvcnJlc3BvbmRpbmcga2V5c1xuICAgKi9cbiAgX2dlbmVyYXRlUnVsZXMoZWxlbWVudCkge1xuICAgIHZhciBydWxlc0xpc3QgPSBbXTtcbiAgICB2YXIgcnVsZXM7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJ1bGVzKSB7XG4gICAgICBydWxlcyA9IHRoaXMub3B0aW9ucy5ydWxlcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW50ZXJjaGFuZ2UnKS5tYXRjaCgvXFxbLio/XFxdL2cpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcnVsZXMpIHtcbiAgICAgIGlmKHJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICB2YXIgcGF0aCA9IHJ1bGUuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuICAgICAgICB2YXIgcXVlcnkgPSBydWxlW3J1bGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICBxdWVyeSA9IEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV07XG4gICAgICAgIH1cblxuICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gUGF0aCB0byB0aGUgaW1hZ2Ugb3IgSFRNTCBwYXJ0aWFsLlxuICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICovXG4gIHJlcGxhY2UocGF0aCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoID09PSBwYXRoKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgIC8vIFJlcGxhY2luZyBpbWFnZXNcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gJ0lNRycpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkubG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSlcbiAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgYmFja2dyb3VuZCBpbWFnZXNcbiAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHsgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcrcGF0aCsnKScgfSlcbiAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICB9XG4gICAgLy8gUmVwbGFjaW5nIEhUTUxcbiAgICBlbHNlIHtcbiAgICAgICQuZ2V0KHBhdGgsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50Lmh0bWwocmVzcG9uc2UpXG4gICAgICAgICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICAgICQocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBjb250ZW50IGluIGFuIEludGVyY2hhbmdlIGVsZW1lbnQgaXMgZG9uZSBiZWluZyBsb2FkZWQuXG4gICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICovXG4gICAgLy8gdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgLy9UT0RPIHRoaXMuXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuSW50ZXJjaGFuZ2UuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBSdWxlcyB0byBiZSBhcHBsaWVkIHRvIEludGVyY2hhbmdlIGVsZW1lbnRzLiBTZXQgd2l0aCB0aGUgYGRhdGEtaW50ZXJjaGFuZ2VgIGFycmF5IG5vdGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqL1xuICBydWxlczogbnVsbFxufTtcblxuSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTID0ge1xuICAnbGFuZHNjYXBlJzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgJ3BvcnRyYWl0JzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hJzogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihJbnRlcmNoYW5nZSwgJ0ludGVyY2hhbmdlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqL1xuXG5jbGFzcyBNYWdlbGxhbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgTWFnZWxsYW4uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ01hZ2VsbGFuJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1hZ2VsbGFuIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnbWFnZWxsYW4nKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJHRhcmdldHMgPSAkKCdbZGF0YS1tYWdlbGxhbi10YXJnZXRdJyk7XG4gICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICdpZCc6IGlkXG4gICAgfSk7XG4gICAgdGhpcy4kYWN0aXZlID0gJCgpO1xuICAgIHRoaXMuc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCk7XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGFuIGFycmF5IG9mIHBpeGVsIHZhbHVlcyB0aGF0IGFyZSB0aGUgZGVtYXJjYXRpb24gbGluZXMgYmV0d2VlbiBsb2NhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAqIENhbiBiZSBpbnZva2VkIGlmIG5ldyBlbGVtZW50cyBhcmUgYWRkZWQgb3IgdGhlIHNpemUgb2YgYSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGNhbGNQb2ludHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMud2luSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heCh3aW5kb3cuaW5uZXJIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgdGhpcy5kb2NIZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCkpO1xuXG4gICAgdGhpcy4kdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJHRhciA9ICQodGhpcyksXG4gICAgICAgICAgcHQgPSBNYXRoLnJvdW5kKCR0YXIub2Zmc2V0KCkudG9wIC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQpO1xuICAgICAgJHRhci50YXJnZXRQb2ludCA9IHB0O1xuICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgTWFnZWxsYW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICRib2R5ID0gJCgnaHRtbCwgYm9keScpLFxuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZzogICBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgICB9O1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICAgIGlmKGxvY2F0aW9uLmhhc2gpe1xuICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5yZWZsb3cuYmluZCh0aGlzKSxcbiAgICAgICdzY3JvbGxtZS56Zi50cmlnZ2VyJzogdGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcylcbiAgICB9KS5vbignY2xpY2suemYubWFnZWxsYW4nLCAnYVtocmVmXj1cIiNcIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFycml2YWwgICA9IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGFycml2YWwpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNjcm9sbCB0byBhIGdpdmVuIGxvY2F0aW9uIG9uIHRoZSBwYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jIC0gYSBwcm9wZXJseSBmb3JtYXR0ZWQgalF1ZXJ5IGlkIHNlbGVjdG9yLiBFeGFtcGxlOiAnI2ZvbydcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzY3JvbGxUb0xvYyhsb2MpIHtcbiAgICB2YXIgc2Nyb2xsUG9zID0gTWF0aC5yb3VuZCgkKGxvYykub2Zmc2V0KCkudG9wIC0gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAvIDIgLSB0aGlzLm9wdGlvbnMuYmFyT2Zmc2V0KTtcblxuICAgICQoJ2h0bWwsIGJvZHknKS5zdG9wKHRydWUpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IHNjcm9sbFBvcyB9LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIHRoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIE1hZ2VsbGFuIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHJlZmxvdygpIHtcbiAgICB0aGlzLmNhbGNQb2ludHMoKTtcbiAgICB0aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2aXNpYmlsaXR5IG9mIGFuIGFjdGl2ZSBsb2NhdGlvbiBsaW5rLCBhbmQgdXBkYXRlcyB0aGUgdXJsIGhhc2ggZm9yIHRoZSBwYWdlLCBpZiBkZWVwTGlua2luZyBlbmFibGVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIE1hZ2VsbGFuI3VwZGF0ZVxuICAgKi9cbiAgX3VwZGF0ZUFjdGl2ZSgvKmV2dCwgZWxlbSwgc2Nyb2xsUG9zKi8pIHtcbiAgICB2YXIgd2luUG9zID0gLypzY3JvbGxQb3MgfHwqLyBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKSxcbiAgICAgICAgY3VySWR4O1xuXG4gICAgaWYod2luUG9zICsgdGhpcy53aW5IZWlnaHQgPT09IHRoaXMuZG9jSGVpZ2h0KXsgY3VySWR4ID0gdGhpcy5wb2ludHMubGVuZ3RoIC0gMTsgfVxuICAgIGVsc2UgaWYod2luUG9zIDwgdGhpcy5wb2ludHNbMF0peyBjdXJJZHggPSAwOyB9XG4gICAgZWxzZXtcbiAgICAgIHZhciBpc0Rvd24gPSB0aGlzLnNjcm9sbFBvcyA8IHdpblBvcyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgY3VyVmlzaWJsZSA9IHRoaXMucG9pbnRzLmZpbHRlcihmdW5jdGlvbihwLCBpKXtcbiAgICAgICAgICAgIHJldHVybiBpc0Rvd24gPyBwIC0gX3RoaXMub3B0aW9ucy5iYXJPZmZzZXQgPD0gd2luUG9zIDogcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQgPD0gd2luUG9zO1xuICAgICAgICAgIH0pO1xuICAgICAgY3VySWR4ID0gY3VyVmlzaWJsZS5sZW5ndGggPyBjdXJWaXNpYmxlLmxlbmd0aCAtIDEgOiAwO1xuICAgIH1cblxuICAgIHRoaXMuJGFjdGl2ZS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuICAgIHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGxpbmtzLmVxKGN1cklkeCkuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIGlmKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSl7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBtYWdlbGxhbiBpcyBmaW5pc2hlZCB1cGRhdGluZyB0byB0aGUgbmV3IGFjdGl2ZSBlbGVtZW50LlxuICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwZGF0ZS56Zi5tYWdlbGxhbicsIFt0aGlzLiRhY3RpdmVdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBNYWdlbGxhbiBhbmQgcmVzZXRzIHRoZSB1cmwgb2YgdGhlIHdpbmRvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYubWFnZWxsYW4nKVxuICAgICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzfWApLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKGhhc2gsICcnKTtcbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuTWFnZWxsYW4uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIHRoZSBhbmltYXRlZCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgYmV0d2VlbiBsb2NhdGlvbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogQW5pbWF0aW9uIHN0eWxlIHRvIHVzZSB3aGVuIHNjcm9sbGluZyBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZWFzZS1pbi1vdXQnXG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byB1c2UgYXMgYSBtYXJrZXIgZm9yIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTBcbiAgICovXG4gIHRocmVzaG9sZDogNTAsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgbG9jYXRpb25zIGxpbmsgb24gdGhlIG1hZ2VsbGFuIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnYWN0aXZlJ1xuICAgKi9cbiAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzY3JpcHQgdG8gbWFuaXB1bGF0ZSB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IHBhZ2UsIGFuZCBpZiBzdXBwb3J0ZWQsIGFsdGVyIHRoZSBoaXN0b3J5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1XG4gICAqL1xuICBiYXJPZmZzZXQ6IDBcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE1hZ2VsbGFuLCAnTWFnZWxsYW4nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9mZkNhbnZhcyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxuY2xhc3MgT2ZmQ2FudmFzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb2ZmLWNhbnZhcyB3cmFwcGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBpbml0aWFsaXplLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9mZkNhbnZhcy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgIHRoaXMuJHRyaWdnZXJzID0gJCgpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT2ZmQ2FudmFzJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgIC8vIEZpbmQgdHJpZ2dlcnMgdGhhdCBhZmZlY3QgdGhpcyBlbGVtZW50IGFuZCBhZGQgYXJpYS1leHBhbmRlZCB0byB0aGVtXG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLW9wZW49XCInK2lkKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpZCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK2lkKydcIl0nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAvLyBBZGQgYSBjbG9zZSB0cmlnZ2VyIG92ZXIgdGhlIGJvZHkgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIGlmICgkKCcuanMtb2ZmLWNhbnZhcy1leGl0JykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGV4aXRlciA9ICQoJy5qcy1vZmYtY2FudmFzLWV4aXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZXhpdGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnanMtb2ZmLWNhbnZhcy1leGl0Jyk7XG4gICAgICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQoZXhpdGVyKTtcblxuICAgICAgICB0aGlzLiRleGl0ZXIgPSAkKGV4aXRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJylbMF0pLnRyYW5zaXRpb25EdXJhdGlvbikgKiAxMDAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdrZXlkb3duLnpmLm9mZmNhbnZhcyc6IHRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMuJGV4aXRlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGV4aXRlci5vbih7J2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0TVFDaGVja2VyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICB9XG4gICAgfSkub25lKCdsb2FkLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgIHZhciAkY2xvc2VyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKTtcbiAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAvLyAgIHZhciBzY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgc2Nyb2xsUG9zICsgJ3B4KSc7XG4gICAgICAvLyB9XG4gICAgICAvLyBpZiAodGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7IHRoaXMuX3N0aWNrKCk7IH1cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkgeyAkY2xvc2VyLmhpZGUoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuaXNTdGlja3kgfHwgIXRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgLy8gICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYub2ZmY2FudmFzJyk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkge1xuICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAqL1xuICBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgJCgnYm9keScpLnNjcm9sbFRvcCgwKTtcbiAgICB9XG4gICAgLy8gd2luZG93LnBhZ2VZT2Zmc2V0ID0gMDtcblxuICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICB2YXIgc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBzY3JvbGxQb3MgKyAncHgpJztcbiAgICAvLyAgIGlmICh0aGlzLiRleGl0ZXIubGVuZ3RoKSB7XG4gICAgLy8gICAgIHRoaXMuJGV4aXRlclswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHNjcm9sbFBvcyArICdweCknO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICogQGV2ZW50IE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgKi9cbiAgICBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lLCB0aGlzLiRlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKS5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuIGlzLW9wZW4tJysgX3RoaXMub3B0aW9ucy5wb3NpdGlvbik7XG5cbiAgICAgIF90aGlzLiRlbGVtZW50XG4gICAgICAgIC5hZGRDbGFzcygnaXMtb3BlbicpXG5cbiAgICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7XG4gICAgICAvLyAgIF90aGlzLl9zdGljaygpO1xuICAgICAgLy8gfVxuICAgIH0pO1xuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgIC50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgdGhpcy4kZXhpdGVyLmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKHRoaXMuJGVsZW1lbnQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuZmluZCgnYSwgYnV0dG9uJykuZXEoMCkuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7XG4gICAgICAkKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgIHRoaXMuX3RyYXBGb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFwcyBmb2N1cyB3aXRoaW4gdGhlIG9mZmNhbnZhcyBvbiBvcGVuLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3RyYXBGb2N1cygpIHtcbiAgICB2YXIgZm9jdXNhYmxlID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICBmaXJzdCA9IGZvY3VzYWJsZS5lcSgwKSxcbiAgICAgICAgbGFzdCA9IGZvY3VzYWJsZS5lcSgtMSk7XG5cbiAgICBmb2N1c2FibGUub2ZmKCcuemYub2ZmY2FudmFzJykub24oJ2tleWRvd24uemYub2ZmY2FudmFzJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUud2hpY2ggPT09IDkgfHwgZS5rZXljb2RlID09PSA5KSB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gbGFzdFswXSAmJiAhZS5zaGlmdEtleSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gZmlyc3RbMF0gJiYgZS5zaGlmdEtleSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBsYXN0LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG9mZmNhbnZhcyB0byBhcHBlYXIgc3RpY2t5IHV0aWxpemluZyB0cmFuc2xhdGUgcHJvcGVydGllcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIC8vIE9mZkNhbnZhcy5wcm90b3R5cGUuX3N0aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgdmFyIGVsU3R5bGUgPSB0aGlzLiRlbGVtZW50WzBdLnN0eWxlO1xuICAvL1xuICAvLyAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gIC8vICAgICB2YXIgZXhpdFN0eWxlID0gdGhpcy4kZXhpdGVyWzBdLnN0eWxlO1xuICAvLyAgIH1cbiAgLy9cbiAgLy8gICAkKHdpbmRvdykub24oJ3Njcm9sbC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhlKTtcbiAgLy8gICAgIHZhciBwYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgLy8gICAgIGVsU3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBwYWdlWSArICdweCknO1xuICAvLyAgICAgaWYgKGV4aXRTdHlsZSAhPT0gdW5kZWZpbmVkKSB7IGV4aXRTdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHBhZ2VZICsgJ3B4KSc7IH1cbiAgLy8gICB9KTtcbiAgLy8gICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3N0dWNrLnpmLm9mZmNhbnZhcycpO1xuICAvLyB9O1xuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vICBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lLCB0aGlzLiRlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJykucmVtb3ZlQ2xhc3MoYGlzLW9mZi1jYW52YXMtb3BlbiBpcy1vcGVuLSR7X3RoaXMub3B0aW9ucy5wb3NpdGlvbn1gKTtcbiAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgLy8gRm91bmRhdGlvbi5fcmVmbG93KCk7XG4gICAgLy8gfSk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW5zLlxuICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgICAudHJpZ2dlcignY2xvc2VkLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5IHx8ICFfdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICBfdGhpcy4kZWxlbWVudFswXS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAvLyAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vICAgfSwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKTtcbiAgICAvLyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuJGV4aXRlci5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9mZi1jYW52YXMgbWVudSBvcGVuIG9yIGNsb3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqL1xuICB0b2dnbGUoZXZlbnQsIHRyaWdnZXIpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICB0aGlzLmNsb3NlKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWJvYXJkIGlucHV0IHdoZW4gZGV0ZWN0ZWQuIFdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCwgdGhlIG9mZi1jYW52YXMgbWVudSBjbG9zZXMsIGFuZCBmb2N1cyBpcyByZXN0b3JlZCB0byB0aGUgZWxlbWVudCB0aGF0IG9wZW5lZCB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlS2V5Ym9hcmQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggIT09IDI3KSByZXR1cm47XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbiAgICB0aGlzLiRsYXN0VHJpZ2dlci5mb2N1cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJyk7XG4gICAgdGhpcy4kZXhpdGVyLm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9mZkNhbnZhcy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cbiAgdHJhbnNpdGlvblRpbWU6IDAsXG5cbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgb2ZmY2FudmFzIG9wZW5zIGZyb20uIERldGVybWluZXMgY2xhc3MgYXBwbGllZCB0byBib2R5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGxlZnRcbiAgICovXG4gIHBvc2l0aW9uOiAnbGVmdCcsXG5cbiAgLyoqXG4gICAqIEZvcmNlIHRoZSBwYWdlIHRvIHNjcm9sbCB0byB0b3Agb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBmb3JjZVRvcDogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHJldmVhbC1mb3ItbGFyZ2VcbiAgICovXG4gIHJldmVhbE9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uIElmIHRydWUsIHdpbGwgZm9jdXMgdGhlIG9wZW5pbmcgdHJpZ2dlciBvbiBjbG9zZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIENsYXNzIHVzZWQgdG8gZm9yY2UgYW4gb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuLiBGb3VuZGF0aW9uIGRlZmF1bHRzIGZvciB0aGlzIGFyZSBgcmV2ZWFsLWZvci1sYXJnZWAgJiBgcmV2ZWFsLWZvci1tZWRpdW1gLlxuICAgKiBAb3B0aW9uXG4gICAqIFRPRE8gaW1wcm92ZSB0aGUgcmVnZXggdGVzdGluZyBmb3IgdGhpcy5cbiAgICogQGV4YW1wbGUgcmV2ZWFsLWZvci1sYXJnZVxuICAgKi9cbiAgcmV2ZWFsQ2xhc3M6ICdyZXZlYWwtZm9yLScsXG5cbiAgLyoqXG4gICAqIFRyaWdnZXJzIG9wdGlvbmFsIGZvY3VzIHRyYXBwaW5nIHdoZW4gb3BlbmluZyBhbiBvZmZjYW52YXMuIFNldHMgdGFiaW5kZXggb2YgW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XSB0byAtMSBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3Nlcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlXG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihPZmZDYW52YXMsICdPZmZDYW52YXMnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9yYml0IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vcmJpdFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50b3VjaFxuICovXG5cbmNsYXNzIE9yYml0IHtcbiAgLyoqXG4gICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvcmJpdCBjYXJvdXNlbC5cbiAgKiBAY2xhc3NcbiAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIE9yYml0IENhcm91c2VsLlxuICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucyl7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9yYml0LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdPcmJpdCcpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ09yYml0Jywge1xuICAgICAgJ2x0cic6IHtcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgIH0sXG4gICAgICAncnRsJzoge1xuICAgICAgICAnQVJST1dfTEVGVCc6ICduZXh0JyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ3ByZXZpb3VzJ1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiBieSBjcmVhdGluZyBqUXVlcnkgY29sbGVjdGlvbnMsIHNldHRpbmcgYXR0cmlidXRlcywgYW5kIHN0YXJ0aW5nIHRoZSBhbmltYXRpb24uXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kd3JhcHBlciA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgIHRoaXMuJHNsaWRlcyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCk7XG4gICAgdmFyICRpbWFnZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpLFxuICAgIGluaXRBY3RpdmUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJyk7XG5cbiAgICBpZiAoIWluaXRBY3RpdmUubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRzbGlkZXMuZXEoMCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnVzZU1VSSkge1xuICAgICAgdGhpcy4kc2xpZGVzLmFkZENsYXNzKCduby1tb3Rpb251aScpO1xuICAgIH1cblxuICAgIGlmICgkaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCgkaW1hZ2VzLCB0aGlzLl9wcmVwYXJlRm9yT3JiaXQuYmluZCh0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ByZXBhcmVGb3JPcmJpdCgpOy8vaGVoZVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgdGhpcy5fbG9hZEJ1bGxldHMoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkgJiYgdGhpcy4kc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuZ2VvU3luYygpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkgeyAvLyBhbGxvdyB3cmFwcGVyIHRvIGJlIGZvY3VzYWJsZSB0byBlbmFibGUgYXJyb3cgbmF2aWdhdGlvblxuICAgICAgdGhpcy4kd3JhcHBlci5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIENyZWF0ZXMgYSBqUXVlcnkgY29sbGVjdGlvbiBvZiBidWxsZXRzLCBpZiB0aGV5IGFyZSBiZWluZyB1c2VkLlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9sb2FkQnVsbGV0cygpIHtcbiAgICB0aGlzLiRidWxsZXRzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuYm94T2ZCdWxsZXRzfWApLmZpbmQoJ2J1dHRvbicpO1xuICB9XG5cbiAgLyoqXG4gICogU2V0cyBhIGB0aW1lcmAgb2JqZWN0IG9uIHRoZSBvcmJpdCwgYW5kIHN0YXJ0cyB0aGUgY291bnRlciBmb3IgdGhlIG5leHQgc2xpZGUuXG4gICogQGZ1bmN0aW9uXG4gICovXG4gIGdlb1N5bmMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnRpbWVyID0gbmV3IEZvdW5kYXRpb24uVGltZXIoXG4gICAgICB0aGlzLiRlbGVtZW50LFxuICAgICAge1xuICAgICAgICBkdXJhdGlvbjogdGhpcy5vcHRpb25zLnRpbWVyRGVsYXksXG4gICAgICAgIGluZmluaXRlOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIHRoaXMudGltZXIuc3RhcnQoKTtcbiAgfVxuXG4gIC8qKlxuICAqIFNldHMgd3JhcHBlciBhbmQgc2xpZGUgaGVpZ2h0cyBmb3IgdGhlIG9yYml0LlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9wcmVwYXJlRm9yT3JiaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLl9zZXRXcmFwcGVySGVpZ2h0KGZ1bmN0aW9uKG1heCl7XG4gICAgICBfdGhpcy5fc2V0U2xpZGVIZWlnaHQobWF4KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIENhbHVsYXRlcyB0aGUgaGVpZ2h0IG9mIGVhY2ggc2xpZGUgaW4gdGhlIGNvbGxlY3Rpb24sIGFuZCB1c2VzIHRoZSB0YWxsZXN0IG9uZSBmb3IgdGhlIHdyYXBwZXIgaGVpZ2h0LlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgd2hlbiBjb21wbGV0ZS5cbiAgKi9cbiAgX3NldFdyYXBwZXJIZWlnaHQoY2IpIHsvL3Jld3JpdGUgdGhpcyB0byBgZm9yYCBsb29wXG4gICAgdmFyIG1heCA9IDAsIHRlbXAsIGNvdW50ZXIgPSAwO1xuXG4gICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB0ZW1wID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtc2xpZGUnLCBjb3VudGVyKTtcblxuICAgICAgaWYgKGNvdW50ZXIpIHsvL2lmIG5vdCB0aGUgZmlyc3Qgc2xpZGUsIHNldCBjc3MgcG9zaXRpb24gYW5kIGRpc3BsYXkgcHJvcGVydHlcbiAgICAgICAgJCh0aGlzKS5jc3Moeydwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ25vbmUnfSk7XG4gICAgICB9XG4gICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgIGNvdW50ZXIrKztcbiAgICB9KTtcblxuICAgIGlmIChjb3VudGVyID09PSB0aGlzLiRzbGlkZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLiR3cmFwcGVyLmNzcyh7J2hlaWdodCc6IG1heH0pOyAvL29ubHkgY2hhbmdlIHRoZSB3cmFwcGVyIGhlaWdodCBwcm9wZXJ0eSBvbmNlLlxuICAgICAgY2IobWF4KTsgLy9maXJlIGNhbGxiYWNrIHdpdGggbWF4IGhlaWdodCBkaW1lbnNpb24uXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogU2V0cyB0aGUgbWF4LWhlaWdodCBvZiBlYWNoIHNsaWRlLlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9zZXRTbGlkZUhlaWdodChoZWlnaHQpIHtcbiAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICQodGhpcykuY3NzKCdtYXgtaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIGJhc2ljYWxseSBldmVyeXRoaW5nIHdpdGhpbiB0aGUgZWxlbWVudC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIC8vKipOb3cgdXNpbmcgY3VzdG9tIGV2ZW50IC0gdGhhbmtzIHRvOioqXG4gICAgLy8qKiAgICAgIFlvaGFpIEFyYXJhdCBvZiBUb3JvbnRvICAgICAgKipcbiAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIGlmICh0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN3aXBlKSB7XG4gICAgICAgIHRoaXMuJHNsaWRlcy5vZmYoJ3N3aXBlbGVmdC56Zi5vcmJpdCBzd2lwZXJpZ2h0LnpmLm9yYml0JylcbiAgICAgICAgLm9uKCdzd2lwZWxlZnQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICAgIH0pLm9uKCdzd2lwZXJpZ2h0LnpmLm9yYml0JywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5KSB7XG4gICAgICAgIHRoaXMuJHNsaWRlcy5vbignY2xpY2suemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nLCBfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSA/IGZhbHNlIDogdHJ1ZSk7XG4gICAgICAgICAgX3RoaXMudGltZXJbX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykgPyAncGF1c2UnIDogJ3N0YXJ0J10oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWVudGVyLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy50aW1lci5wYXVzZSgpO1xuICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpKSB7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVyLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5uYXZCdXR0b25zKSB7XG4gICAgICAgIHZhciAkY29udHJvbHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5uZXh0Q2xhc3N9LCAuJHt0aGlzLm9wdGlvbnMucHJldkNsYXNzfWApO1xuICAgICAgICAkY29udHJvbHMuYXR0cigndGFiaW5kZXgnLCAwKVxuICAgICAgICAvL2Fsc28gbmVlZCB0byBoYW5kbGUgZW50ZXIvcmV0dXJuIGFuZCBzcGFjZWJhciBrZXkgcHJlc3Nlc1xuICAgICAgICAub24oJ2NsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0JywgZnVuY3Rpb24oZSl7XG5cdCAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKCQodGhpcykuaGFzQ2xhc3MoX3RoaXMub3B0aW9ucy5uZXh0Q2xhc3MpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICB0aGlzLiRidWxsZXRzLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgvaXMtYWN0aXZlL2cudGVzdCh0aGlzLmNsYXNzTmFtZSkpIHsgcmV0dXJuIGZhbHNlOyB9Ly9pZiB0aGlzIGlzIGFjdGl2ZSwga2ljayBvdXQgb2YgZnVuY3Rpb24uXG4gICAgICAgICAgdmFyIGlkeCA9ICQodGhpcykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICBsdHIgPSBpZHggPiBfdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpLmRhdGEoJ3NsaWRlJyksXG4gICAgICAgICAgJHNsaWRlID0gX3RoaXMuJHNsaWRlcy5lcShpZHgpO1xuXG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUobHRyLCAkc2xpZGUsIGlkeCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiR3cmFwcGVyLmFkZCh0aGlzLiRidWxsZXRzKS5vbigna2V5ZG93bi56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnT3JiaXQnLCB7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKGZhbHNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkgeyAvLyBpZiBidWxsZXQgaXMgZm9jdXNlZCwgbWFrZSBzdXJlIGZvY3VzIG1vdmVzXG4gICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuaXMoX3RoaXMuJGJ1bGxldHMpKSB7XG4gICAgICAgICAgICAgIF90aGlzLiRidWxsZXRzLmZpbHRlcignLmlzLWFjdGl2ZScpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgc2xpZGUgdG8gYSBuZXcgb25lLlxuICAqIEBmdW5jdGlvblxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAqIEBwYXJhbSB7alF1ZXJ5fSBjaG9zZW5TbGlkZSAtIHRoZSBqUXVlcnkgZWxlbWVudCBvZiB0aGUgc2xpZGUgdG8gc2hvdyBuZXh0LCBpZiBvbmUgaXMgc2VsZWN0ZWQuXG4gICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgbmV3IHNsaWRlIGluIGl0cyBjb2xsZWN0aW9uLCBpZiBvbmUgY2hvc2VuLlxuICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAqL1xuICBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgIHZhciAkY3VyU2xpZGUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZXEoMCk7XG5cbiAgICBpZiAoL211aS9nLnRlc3QoJGN1clNsaWRlWzBdLmNsYXNzTmFtZSkpIHsgcmV0dXJuIGZhbHNlOyB9IC8vaWYgdGhlIHNsaWRlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcsIGtpY2sgb3V0IG9mIHRoZSBmdW5jdGlvblxuXG4gICAgdmFyICRmaXJzdFNsaWRlID0gdGhpcy4kc2xpZGVzLmZpcnN0KCksXG4gICAgJGxhc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5sYXN0KCksXG4gICAgZGlySW4gPSBpc0xUUiA/ICdSaWdodCcgOiAnTGVmdCcsXG4gICAgZGlyT3V0ID0gaXNMVFIgPyAnTGVmdCcgOiAnUmlnaHQnLFxuICAgIF90aGlzID0gdGhpcyxcbiAgICAkbmV3U2xpZGU7XG5cbiAgICBpZiAoIWNob3NlblNsaWRlKSB7IC8vbW9zdCBvZiB0aGUgdGltZSwgdGhpcyB3aWxsIGJlIGF1dG8gcGxheWVkIG9yIGNsaWNrZWQgZnJvbSB0aGUgbmF2QnV0dG9ucy5cbiAgICAgICRuZXdTbGlkZSA9IGlzTFRSID8gLy9pZiB3cmFwcGluZyBlbmFibGVkLCBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBgbmV4dGAgb3IgYHByZXZgIHNpYmxpbmcsIGlmIG5vdCwgc2VsZWN0IHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlIHRvIGZpbGwgaW4uIGlmIHdyYXBwaW5nIG5vdCBlbmFibGVkLCBhdHRlbXB0IHRvIHNlbGVjdCBgbmV4dGAgb3IgYHByZXZgLCBpZiB0aGVyZSdzIG5vdGhpbmcgdGhlcmUsIHRoZSBmdW5jdGlvbiB3aWxsIGtpY2sgb3V0IG9uIG5leHQgc3RlcC4gQ1JBWlkgTkVTVEVEIFRFUk5BUklFUyEhISEhXG4gICAgICAodGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKS5sZW5ndGggPyAkY3VyU2xpZGUubmV4dChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkgOiAkZmlyc3RTbGlkZSA6ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSkvL3BpY2sgbmV4dCBzbGlkZSBpZiBtb3ZpbmcgbGVmdCB0byByaWdodFxuICAgICAgOlxuICAgICAgKHRoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXAgPyAkY3VyU2xpZGUucHJldihgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID8gJGN1clNsaWRlLnByZXYoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApIDogJGxhc3RTbGlkZSA6ICRjdXJTbGlkZS5wcmV2KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSk7Ly9waWNrIHByZXYgc2xpZGUgaWYgbW92aW5nIHJpZ2h0IHRvIGxlZnRcbiAgICB9IGVsc2Uge1xuICAgICAgJG5ld1NsaWRlID0gY2hvc2VuU2xpZGU7XG4gICAgfVxuXG4gICAgaWYgKCRuZXdTbGlkZS5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0cykge1xuICAgICAgICBpZHggPSBpZHggfHwgdGhpcy4kc2xpZGVzLmluZGV4KCRuZXdTbGlkZSk7IC8vZ3JhYiBpbmRleCB0byB1cGRhdGUgYnVsbGV0c1xuICAgICAgICB0aGlzLl91cGRhdGVCdWxsZXRzKGlkeCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbihcbiAgICAgICAgICAkbmV3U2xpZGUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmNzcyh7J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ3RvcCc6IDB9KSxcbiAgICAgICAgICB0aGlzLm9wdGlvbnNbYGFuaW1JbkZyb20ke2RpcklufWBdLFxuICAgICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkbmV3U2xpZGUuY3NzKHsncG9zaXRpb24nOiAncmVsYXRpdmUnLCAnZGlzcGxheSc6ICdibG9jayd9KVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dChcbiAgICAgICAgICAkY3VyU2xpZGUucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tgYW5pbU91dFRvJHtkaXJPdXR9YF0sXG4gICAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKTtcbiAgICAgICAgICAgIGlmKF90aGlzLm9wdGlvbnMuYXV0b1BsYXkgJiYgIV90aGlzLnRpbWVyLmlzUGF1c2VkKXtcbiAgICAgICAgICAgICAgX3RoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9kbyBzdHVmZj9cbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWluJykucmVtb3ZlQXR0cignYXJpYS1saXZlJykuaGlkZSgpO1xuICAgICAgICAkbmV3U2xpZGUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1pbicpLmF0dHIoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKS5zaG93KCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkgJiYgIXRoaXMudGltZXIuaXNQYXVzZWQpIHtcbiAgICAgICAgICB0aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIC8qKlxuICAgICogVHJpZ2dlcnMgd2hlbiB0aGUgc2xpZGUgaGFzIGZpbmlzaGVkIGFuaW1hdGluZyBpbi5cbiAgICAqIEBldmVudCBPcmJpdCNzbGlkZWNoYW5nZVxuICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3NsaWRlY2hhbmdlLnpmLm9yYml0JywgWyRuZXdTbGlkZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFVwZGF0ZXMgdGhlIGFjdGl2ZSBzdGF0ZSBvZiB0aGUgYnVsbGV0cywgaWYgZGlzcGxheWVkLlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCBzbGlkZS5cbiAgKi9cbiAgX3VwZGF0ZUJ1bGxldHMoaWR4KSB7XG4gICAgdmFyICRvbGRCdWxsZXQgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5ib3hPZkJ1bGxldHN9YClcbiAgICAuZmluZCgnLmlzLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5ibHVyKCksXG4gICAgc3BhbiA9ICRvbGRCdWxsZXQuZmluZCgnc3BhbjpsYXN0JykuZGV0YWNoKCksXG4gICAgJG5ld0J1bGxldCA9IHRoaXMuJGJ1bGxldHMuZXEoaWR4KS5hZGRDbGFzcygnaXMtYWN0aXZlJykuYXBwZW5kKHNwYW4pO1xuICB9XG5cbiAgLyoqXG4gICogRGVzdHJveXMgdGhlIGNhcm91c2VsIGFuZCBoaWRlcyB0aGUgZWxlbWVudC5cbiAgKiBAZnVuY3Rpb25cbiAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLm9yYml0JykuZmluZCgnKicpLm9mZignLnpmLm9yYml0JykuZW5kKCkuaGlkZSgpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5PcmJpdC5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICogVGVsbHMgdGhlIEpTIHRvIGxvb2sgZm9yIGFuZCBsb2FkQnVsbGV0cy5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBidWxsZXRzOiB0cnVlLFxuICAvKipcbiAgKiBUZWxscyB0aGUgSlMgdG8gYXBwbHkgZXZlbnQgbGlzdGVuZXJzIHRvIG5hdiBidXR0b25zXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgbmF2QnV0dG9uczogdHJ1ZSxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tcmlnaHQnXG4gICovXG4gIGFuaW1JbkZyb21SaWdodDogJ3NsaWRlLWluLXJpZ2h0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnc2xpZGUtb3V0LXJpZ2h0J1xuICAqL1xuICBhbmltT3V0VG9SaWdodDogJ3NsaWRlLW91dC1yaWdodCcsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ3NsaWRlLWluLWxlZnQnXG4gICpcbiAgKi9cbiAgYW5pbUluRnJvbUxlZnQ6ICdzbGlkZS1pbi1sZWZ0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnc2xpZGUtb3V0LWxlZnQnXG4gICovXG4gIGFuaW1PdXRUb0xlZnQ6ICdzbGlkZS1vdXQtbGVmdCcsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBhdXRvbWF0aWNhbGx5IGFuaW1hdGUgb24gcGFnZSBsb2FkLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIGF1dG9QbGF5OiB0cnVlLFxuICAvKipcbiAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIGJldHdlZW4gc2xpZGUgdHJhbnNpdGlvbnNcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgNTAwMFxuICAqL1xuICB0aW1lckRlbGF5OiA1MDAwLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gaW5maW5pdGVseSBsb29wIHRocm91Z2ggdGhlIHNsaWRlc1xuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIGluZmluaXRlV3JhcDogdHJ1ZSxcbiAgLyoqXG4gICogQWxsb3dzIHRoZSBPcmJpdCBzbGlkZXMgdG8gYmluZCB0byBzd2lwZSBldmVudHMgZm9yIG1vYmlsZSwgcmVxdWlyZXMgYW4gYWRkaXRpb25hbCB1dGlsIGxpYnJhcnlcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBzd2lwZTogdHJ1ZSxcbiAgLyoqXG4gICogQWxsb3dzIHRoZSB0aW1pbmcgZnVuY3Rpb24gdG8gcGF1c2UgYW5pbWF0aW9uIG9uIGhvdmVyLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGJpbmQga2V5Ym9hcmQgZXZlbnRzIHRvIHRoZSBzbGlkZXIsIHRvIGFuaW1hdGUgZnJhbWVzIHdpdGggYXJyb3cga2V5c1xuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIGFjY2Vzc2libGU6IHRydWUsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBvZiBPcmJpdFxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnb3JiaXQtY29udGFpbmVyJ1xuICAqL1xuICBjb250YWluZXJDbGFzczogJ29yYml0LWNvbnRhaW5lcicsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gaW5kaXZpZHVhbCBzbGlkZXMuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1zbGlkZSdcbiAgKi9cbiAgc2xpZGVDbGFzczogJ29yYml0LXNsaWRlJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYnVsbGV0IGNvbnRhaW5lci4gWW91J3JlIHdlbGNvbWUuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1idWxsZXRzJ1xuICAqL1xuICBib3hPZkJ1bGxldHM6ICdvcmJpdC1idWxsZXRzJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYG5leHRgIG5hdmlnYXRpb24gYnV0dG9uLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnb3JiaXQtbmV4dCdcbiAgKi9cbiAgbmV4dENsYXNzOiAnb3JiaXQtbmV4dCcsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGBwcmV2aW91c2AgbmF2aWdhdGlvbiBidXR0b24uXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1wcmV2aW91cydcbiAgKi9cbiAgcHJldkNsYXNzOiAnb3JiaXQtcHJldmlvdXMnLFxuICAvKipcbiAgKiBCb29sZWFuIHRvIGZsYWcgdGhlIGpzIHRvIHVzZSBtb3Rpb24gdWkgY2xhc3NlcyBvciBub3QuIERlZmF1bHQgdG8gdHJ1ZSBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgdXNlTVVJOiB0cnVlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oT3JiaXQsICdPcmJpdCcpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmVzcG9uc2l2ZU1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJlc3BvbnNpdmVNZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYWNjb3JkaW9uTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5kcmlsbGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuZHJvcGRvd24tbWVudVxuICovXG5cbmNsYXNzIFJlc3BvbnNpdmVNZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSByZXNwb25zaXZlIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZU1lbnUjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtbWVudScpO1xuICAgIHRoaXMuY3VycmVudE1xID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBudWxsO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZU1lbnUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgTWVudSBieSBwYXJzaW5nIHRoZSBjbGFzc2VzIGZyb20gdGhlICdkYXRhLVJlc3BvbnNpdmVNZW51JyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBydWxlc1RyZWUgPSB7fTtcblxuICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgbGV0IHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZXZlcnkgcnVsZSBmb3VuZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgIGxldCBydWxlU2l6ZSA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMF0gOiAnc21hbGwnO1xuICAgICAgICBsZXQgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJ1bGVzVHJlZVtydWxlU2l6ZV0gPSBNZW51UGx1Z2luc1tydWxlUGx1Z2luXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bGVzID0gcnVsZXNUcmVlO1xuICAgIH1cblxuICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSBNZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICB9KTtcbiAgICAvLyAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5SZXNwb25zaXZlTWVudScsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgLy8gfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aCBhZ2FpbnN0IGF2YWlsYWJsZSBtZWRpYSBxdWVyaWVzLiBJZiB0aGUgbWVkaWEgcXVlcnkgaGFzIGNoYW5nZWQsIGFuZCB0aGUgcGx1Z2luIG5lZWRlZCBoYXMgY2hhbmdlZCwgdGhlIHBsdWdpbnMgd2lsbCBzd2FwIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tNZWRpYVF1ZXJpZXMoKSB7XG4gICAgdmFyIG1hdGNoZWRNcSwgX3RoaXMgPSB0aGlzO1xuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUgYW5kIGZpbmQgdGhlIGxhc3QgbWF0Y2hpbmcgcnVsZVxuICAgICQuZWFjaCh0aGlzLnJ1bGVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChrZXkpKSB7XG4gICAgICAgIG1hdGNoZWRNcSA9IGtleTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE5vIG1hdGNoPyBObyBkaWNlXG4gICAgaWYgKCFtYXRjaGVkTXEpIHJldHVybjtcblxuICAgIC8vIFBsdWdpbiBhbHJlYWR5IGluaXRpYWxpemVkPyBXZSBnb29kXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbiBpbnN0YW5jZW9mIHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4pIHJldHVybjtcblxuICAgIC8vIFJlbW92ZSBleGlzdGluZyBwbHVnaW4tc3BlY2lmaWMgQ1NTIGNsYXNzZXNcbiAgICAkLmVhY2goTWVudVBsdWdpbnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHZhbHVlLmNzc0NsYXNzKTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCB0aGUgQ1NTIGNsYXNzIGZvciB0aGUgbmV3IHBsdWdpblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcblxuICAgIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgbmV3IHBsdWdpblxuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbmV3IHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4odGhpcy4kZWxlbWVudCwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBwbHVnaW4gb24gdGhpcyBlbGVtZW50LCBhcyB3ZWxsIGFzIHRoZSB3aW5kb3cgcmVzaXplIGhhbmRsZXIgdGhhdCBzd2l0Y2hlcyB0aGUgcGx1Z2lucyBvdXQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgICQod2luZG93KS5vZmYoJy56Zi5SZXNwb25zaXZlTWVudScpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5SZXNwb25zaXZlTWVudS5kZWZhdWx0cyA9IHt9O1xuXG4vLyBUaGUgcGx1Z2luIG1hdGNoZXMgdGhlIHBsdWdpbiBjbGFzc2VzIHdpdGggdGhlc2UgcGx1Z2luIGluc3RhbmNlcy5cbnZhciBNZW51UGx1Z2lucyA9IHtcbiAgZHJvcGRvd246IHtcbiAgICBjc3NDbGFzczogJ2Ryb3Bkb3duJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2Ryb3Bkb3duLW1lbnUnXSB8fCBudWxsXG4gIH0sXG4gZHJpbGxkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcmlsbGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJpbGxkb3duJ10gfHwgbnVsbFxuICB9LFxuICBhY2NvcmRpb246IHtcbiAgICBjc3NDbGFzczogJ2FjY29yZGlvbi1tZW51JyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2FjY29yZGlvbi1tZW51J10gfHwgbnVsbFxuICB9XG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmVzcG9uc2l2ZU1lbnUsICdSZXNwb25zaXZlTWVudScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmVzcG9uc2l2ZVRvZ2dsZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZVRvZ2dsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRhYiBCYXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggdGFiIGJhciBmdW5jdGlvbmFsaXR5IHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdGFiIGJhciBieSBmaW5kaW5nIHRoZSB0YXJnZXQgZWxlbWVudCwgdG9nZ2xpbmcgZWxlbWVudCwgYW5kIHJ1bm5pbmcgdXBkYXRlKCkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHRhcmdldElEID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLXRvZ2dsZScpO1xuICAgIGlmICghdGFyZ2V0SUQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdXIgdGFiIGJhciBuZWVkcyBhbiBJRCBvZiBhIE1lbnUgYXMgdGhlIHZhbHVlIG9mIGRhdGEtdGFiLWJhci4nKTtcbiAgICB9XG5cbiAgICB0aGlzLiR0YXJnZXRNZW51ID0gJChgIyR7dGFyZ2V0SUR9YCk7XG4gICAgdGhpcy4kdG9nZ2xlciA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdG9nZ2xlXScpO1xuXG4gICAgdGhpcy5fdXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBuZWNlc3NhcnkgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSB0YWIgYmFyIHRvIHdvcmsuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5fdXBkYXRlTXFIYW5kbGVyID0gdGhpcy5fdXBkYXRlLmJpbmQodGhpcyk7XG4gICAgXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgdGhpcy4kdG9nZ2xlci5vbignY2xpY2suemYucmVzcG9uc2l2ZVRvZ2dsZScsIHRoaXMudG9nZ2xlTWVudS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0YWIgYmFyIHNob3VsZCBiZSB2aXNpYmxlIG9yIGhpZGRlbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlKCkge1xuICAgIC8vIE1vYmlsZVxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnNob3coKTtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIERlc2t0b3BcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIuIFRoZSB0b2dnbGUgb25seSBoYXBwZW5zIGlmIHRoZSBzY3JlZW4gaXMgc21hbGwgZW5vdWdoIHRvIGFsbG93IGl0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgKi9cbiAgdG9nZ2xlTWVudSgpIHsgICBcbiAgICBpZiAoIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS50b2dnbGUoMCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhciB0b2dnbGVzLlxuICAgICAgICogQGV2ZW50IFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3RvZ2dsZWQuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIH1cbiAgfTtcblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIHRoaXMuJHRvZ2dsZXIub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIFxuICAgICQod2luZG93KS5vZmYoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3VwZGF0ZU1xSGFuZGxlcik7XG4gICAgXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYnJlYWtwb2ludCBhZnRlciB3aGljaCB0aGUgbWVudSBpcyBhbHdheXMgc2hvd24sIGFuZCB0aGUgdGFiIGJhciBpcyBoaWRkZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIGhpZGVGb3I6ICdtZWRpdW0nXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmVzcG9uc2l2ZVRvZ2dsZSwgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJldmVhbCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmV2ZWFsXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvbiBpZiB1c2luZyBhbmltYXRpb25zXG4gKi9cblxuY2xhc3MgUmV2ZWFsIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmV2ZWFsLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBmb3IgdGhlIG1vZGFsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFJldmVhbC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1JldmVhbCcpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ1JldmVhbCcsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgJ1RBQic6ICd0YWJfZm9yd2FyZCcsXG4gICAgICAnU0hJRlRfVEFCJzogJ3RhYl9iYWNrd2FyZCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbW9kYWwgYnkgYWRkaW5nIHRoZSBvdmVybGF5IGFuZCBjbG9zZSBidXR0b25zLCAoaWYgc2VsZWN0ZWQpLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy5pZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5jYWNoZWQgPSB7bXE6IEZvdW5kYXRpb24uTWVkaWFRdWVyeS5jdXJyZW50fTtcbiAgICB0aGlzLmlzTW9iaWxlID0gbW9iaWxlU25pZmYoKTtcblxuICAgIHRoaXMuJGFuY2hvciA9ICQoYFtkYXRhLW9wZW49XCIke3RoaXMuaWR9XCJdYCkubGVuZ3RoID8gJChgW2RhdGEtb3Blbj1cIiR7dGhpcy5pZH1cIl1gKSA6ICQoYFtkYXRhLXRvZ2dsZT1cIiR7dGhpcy5pZH1cIl1gKTtcbiAgICB0aGlzLiRhbmNob3IuYXR0cih7XG4gICAgICAnYXJpYS1jb250cm9scyc6IHRoaXMuaWQsXG4gICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAndGFiaW5kZXgnOiAwXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4gfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZnVsbCcpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICB0aGlzLm9wdGlvbnMub3ZlcmxheSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgIXRoaXMuJG92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkgPSB0aGlzLl9tYWtlT3ZlcmxheSh0aGlzLmlkKTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgICAncm9sZSc6ICdkaWFsb2cnLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAnZGF0YS15ZXRpLWJveCc6IHRoaXMuaWQsXG4gICAgICAgICdkYXRhLXJlc2l6ZSc6IHRoaXMuaWRcbiAgICB9KTtcblxuICAgIGlmKHRoaXMuJG92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZGV0YWNoKCkuYXBwZW5kVG8odGhpcy4kb3ZlcmxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZGV0YWNoKCkuYXBwZW5kVG8oJCgnYm9keScpKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3dpdGhvdXQtb3ZlcmxheScpO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAoIGAjJHt0aGlzLmlkfWApKSB7XG4gICAgICAkKHdpbmRvdykub25lKCdsb2FkLnpmLnJldmVhbCcsIHRoaXMub3Blbi5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBvdmVybGF5IGRpdiB0byBkaXNwbGF5IGJlaGluZCB0aGUgbW9kYWwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWFrZU92ZXJsYXkoaWQpIHtcbiAgICB2YXIgJG92ZXJsYXkgPSAkKCc8ZGl2PjwvZGl2PicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygncmV2ZWFsLW92ZXJsYXknKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJ2JvZHknKTtcbiAgICByZXR1cm4gJG92ZXJsYXk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBwb3NpdGlvbiBvZiBtb2RhbFxuICAgKiBUT0RPOiAgRmlndXJlIG91dCBpZiB3ZSBhY3R1YWxseSBuZWVkIHRvIGNhY2hlIHRoZXNlIHZhbHVlcyBvciBpZiBpdCBkb2Vzbid0IG1hdHRlclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZVBvc2l0aW9uKCkge1xuICAgIHZhciB3aWR0aCA9IHRoaXMuJGVsZW1lbnQub3V0ZXJXaWR0aCgpO1xuICAgIHZhciBvdXRlcldpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMuJGVsZW1lbnQub3V0ZXJIZWlnaHQoKTtcbiAgICB2YXIgb3V0ZXJIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICAgdmFyIGxlZnQsIHRvcDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmhPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgbGVmdCA9IHBhcnNlSW50KChvdXRlcldpZHRoIC0gd2lkdGgpIC8gMiwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gcGFyc2VJbnQodGhpcy5vcHRpb25zLmhPZmZzZXQsIDEwKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy52T2Zmc2V0ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChoZWlnaHQgPiBvdXRlckhlaWdodCkge1xuICAgICAgICB0b3AgPSBwYXJzZUludChNYXRoLm1pbigxMDAsIG91dGVySGVpZ2h0IC8gMTApLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3AgPSBwYXJzZUludCgob3V0ZXJIZWlnaHQgLSBoZWlnaHQpIC8gNCwgMTApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMudk9mZnNldCwgMTApO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7dG9wOiB0b3AgKyAncHgnfSk7XG4gICAgLy8gb25seSB3b3JyeSBhYm91dCBsZWZ0IGlmIHdlIGRvbid0IGhhdmUgYW4gb3ZlcmxheSBvciB3ZSBoYXZlYSAgaG9yaXpvbnRhbCBvZmZzZXQsXG4gICAgLy8gb3RoZXJ3aXNlIHdlJ3JlIHBlcmZlY3RseSBpbiB0aGUgbWlkZGxlXG4gICAgaWYoIXRoaXMuJG92ZXJsYXkgfHwgKHRoaXMub3B0aW9ucy5oT2Zmc2V0ICE9PSAnYXV0bycpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7bGVmdDogbGVmdCArICdweCd9KTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHttYXJnaW46ICcwcHgnfSk7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgdGhlIG1vZGFsLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5vbih7XG4gICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAnY2xvc2UuemYudHJpZ2dlcic6IChldmVudCwgJGVsZW1lbnQpID0+IHtcbiAgICAgICAgaWYgKChldmVudC50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdKSB8fFxuICAgICAgICAgICAgKCQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCdbZGF0YS1jbG9zYWJsZV0nKVswXSA9PT0gJGVsZW1lbnQpKSB7IC8vIG9ubHkgY2xvc2UgcmV2ZWFsIHdoZW4gaXQncyBleHBsaWNpdGx5IGNhbGxlZFxuICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlLmFwcGx5KHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGFuY2hvci5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLndoaWNoID09PSAxMyB8fCBlLndoaWNoID09PSAzMikge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLm9wZW4oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgJiYgdGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkub2ZmKCcuemYucmV2ZWFsJykub24oJ2NsaWNrLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fCAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgJCh3aW5kb3cpLm9uKGBwb3BzdGF0ZS56Zi5yZXZlYWw6JHt0aGlzLmlkfWAsIHRoaXMuX2hhbmRsZVN0YXRlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIG1vZGFsIG1ldGhvZHMgb24gYmFjay9mb3J3YXJkIGJ1dHRvbiBjbGlja3Mgb3IgYW55IG90aGVyIGV2ZW50IHRoYXQgdHJpZ2dlcnMgcG9wc3RhdGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlU3RhdGUoZSkge1xuICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSAoICcjJyArIHRoaXMuaWQpICYmICF0aGlzLmlzQWN0aXZlKXsgdGhpcy5vcGVuKCk7IH1cbiAgICBlbHNleyB0aGlzLmNsb3NlKCk7IH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBtb2RhbCBjb250cm9sbGVkIGJ5IGB0aGlzLiRhbmNob3JgLCBhbmQgY2xvc2VzIGFsbCBvdGhlcnMgYnkgZGVmYXVsdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VtZVxuICAgKiBAZmlyZXMgUmV2ZWFsI29wZW5cbiAgICovXG4gIG9wZW4oKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgdmFyIGhhc2ggPSBgIyR7dGhpcy5pZH1gO1xuXG4gICAgICBpZiAod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIC8vIE1ha2UgZWxlbWVudHMgaW52aXNpYmxlLCBidXQgcmVtb3ZlIGRpc3BsYXk6IG5vbmUgc28gd2UgY2FuIGdldCBzaXplIGFuZCBwb3NpdGlvbmluZ1xuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLmNzcyh7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfSlcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApO1xuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5jc3Moeyd2aXNpYmlsaXR5JzogJ2hpZGRlbid9KS5zaG93KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5oaWRlKClcbiAgICAgIC5jc3MoeyAndmlzaWJpbGl0eSc6ICcnIH0pO1xuXG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5jc3Moeyd2aXNpYmlsaXR5JzogJyd9KS5oaWRlKCk7XG4gICAgICBpZih0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYXN0JykpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnZmFzdCcpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbG93JykpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5hZGRDbGFzcygnc2xvdycpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlwbGVPcGVuZWQpIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBtb2RhbCBvcGVucy5cbiAgICAgICAqIENsb3NlcyBhbnkgb3RoZXIgbW9kYWxzIHRoYXQgYXJlIGN1cnJlbnRseSBvcGVuXG4gICAgICAgKiBAZXZlbnQgUmV2ZWFsI2Nsb3NlbWVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLnJldmVhbCcsIHRoaXMuaWQpO1xuICAgIH1cbiAgICAvLyBNb3Rpb24gVUkgbWV0aG9kIG9mIHJldmVhbFxuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBhZnRlckFuaW1hdGlvbkZvY3VzKCl7XG4gICAgICAgIF90aGlzLiRlbGVtZW50XG4gICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZvY3VzKCk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2ZvY3VzJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJG92ZXJsYXksICdmYWRlLWluJyk7XG4gICAgICB9XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkluLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZm9jdXNhYmxlRWxlbWVudHMgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG4gICAgICAgIGFmdGVyQW5pbWF0aW9uRm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIHJldmVhbFxuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuc2hvdygwKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdyh0aGlzLm9wdGlvbnMuc2hvd0RlbGF5KTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgYWNjZXNzaWJpbGl0eVxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5hdHRyKHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogZmFsc2UsXG4gICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICB9KVxuICAgICAgLmZvY3VzKCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBoYXMgc3VjY2Vzc2Z1bGx5IG9wZW5lZC5cbiAgICAgKiBAZXZlbnQgUmV2ZWFsI29wZW5cbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYucmV2ZWFsJyk7XG5cbiAgICBpZiAodGhpcy5pc01vYmlsZSkge1xuICAgICAgdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICQoJ2h0bWwsIGJvZHknKS5hZGRDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLl9leHRyYUhhbmRsZXJzKCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBleHRyYSBldmVudCBoYW5kbGVycyBmb3IgdGhlIGJvZHkgYW5kIHdpbmRvdyBpZiBuZWNlc3NhcnkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXh0cmFIYW5kbGVycygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuZm9jdXNhYmxlRWxlbWVudHMgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgJiYgIXRoaXMub3B0aW9ucy5mdWxsU2NyZWVuKSB7XG4gICAgICAkKCdib2R5Jykub24oJ2NsaWNrLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fCAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGxvY2sgZm9jdXMgd2l0aGluIG1vZGFsIHdoaWxlIHRhYmJpbmdcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgIHRhYl9mb3J3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXMoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpKSkgeyAvLyBsZWZ0IG1vZGFsIGRvd253YXJkcywgc2V0dGluZyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPT09IDApIHsgLy8gbm8gZm9jdXNhYmxlIGVsZW1lbnRzIGluc2lkZSB0aGUgbW9kYWwgYXQgYWxsLCBwcmV2ZW50IHRhYmJpbmcgaW4gZ2VuZXJhbFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJfYmFja3dhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyhfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5lcSgwKSkgfHwgX3RoaXMuJGVsZW1lbnQuaXMoJzpmb2N1cycpKSB7IC8vIGxlZnQgbW9kYWwgdXB3YXJkcywgc2V0dGluZyBmb2N1cyB0byBsYXN0IGVsZW1lbnRcbiAgICAgICAgICAgIF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPT09IDApIHsgLy8gbm8gZm9jdXNhYmxlIGVsZW1lbnRzIGluc2lkZSB0aGUgbW9kYWwgYXQgYWxsLCBwcmV2ZW50IHRhYmJpbmcgaW4gZ2VuZXJhbFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXMoX3RoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtY2xvc2VdJykpKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyBzZXQgZm9jdXMgYmFjayB0byBhbmNob3IgaWYgY2xvc2UgYnV0dG9uIGhhcyBiZWVuIGFjdGl2YXRlZFxuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCR0YXJnZXQuaXMoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMpKSB7IC8vIGRvbnQndCB0cmlnZ2VyIGlmIGFjdWFsIGVsZW1lbnQgaGFzIGZvY3VzIChpLmUuIGlucHV0cywgbGlua3MsIC4uLilcbiAgICAgICAgICAgIF90aGlzLm9wZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uRXNjKSB7XG4gICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgUmV2ZWFsI2Nsb3NlZFxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYgKCF0aGlzLmlzQWN0aXZlIHx8ICF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBNb3Rpb24gVUkgbWV0aG9kIG9mIGhpZGluZ1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uT3V0KSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRvdmVybGF5LCAnZmFkZS1vdXQnLCBmaW5pc2hVcCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZmluaXNoVXAoKTtcbiAgICAgIH1cblxuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uT3V0KTtcbiAgICB9XG4gICAgLy8galF1ZXJ5IG1ldGhvZCBvZiBoaWRpbmdcbiAgICBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmhpZGUoMCwgZmluaXNoVXApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZpbmlzaFVwKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSh0aGlzLm9wdGlvbnMuaGlkZURlbGF5KTtcbiAgICB9XG5cbiAgICAvLyBDb25kaXRpb25hbHMgdG8gcmVtb3ZlIGV4dHJhIGV2ZW50IGxpc3RlbmVycyBhZGRlZCBvbiBvcGVuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjKSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgJCgnYm9keScpLm9mZignY2xpY2suemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uemYucmV2ZWFsJyk7XG5cbiAgICBmdW5jdGlvbiBmaW5pc2hVcCgpIHtcbiAgICAgIGlmIChfdGhpcy5pc01vYmlsZSkge1xuICAgICAgICAkKCdodG1sLCBib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICAgIGlmKF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKSB7XG4gICAgICAgICAgJCgnYm9keScpLnNjcm9sbFRvcChfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyk7XG4gICAgICAgICAgX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAvKipcbiAgICAgICogRmlyZXMgd2hlbiB0aGUgbW9kYWwgaXMgZG9uZSBjbG9zaW5nLlxuICAgICAgKiBAZXZlbnQgUmV2ZWFsI2Nsb3NlZFxuICAgICAgKi9cbiAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlZC56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJlc2V0cyB0aGUgbW9kYWwgY29udGVudFxuICAgICogVGhpcyBwcmV2ZW50cyBhIHJ1bm5pbmcgdmlkZW8gdG8ga2VlcCBnb2luZyBpbiB0aGUgYmFja2dyb3VuZFxuICAgICovXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNldE9uQ2xvc2UpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuaHRtbCh0aGlzLiRlbGVtZW50Lmh0bWwoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICBpZiAoX3RoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcIlwiLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgICB9IGVsc2Uge1xuICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICAgICB9XG4gICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBvcGVuL2Nsb3NlZCBzdGF0ZSBvZiBhIG1vZGFsLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGEgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXBwZW5kVG8oJCgnYm9keScpKTsgLy8gbW92ZSAkZWxlbWVudCBvdXRzaWRlIG9mICRvdmVybGF5IHRvIHByZXZlbnQgZXJyb3IgdW5yZWdpc3RlclBsdWdpbigpXG4gICAgICB0aGlzLiRvdmVybGF5LmhpZGUoKS5vZmYoKS5yZW1vdmUoKTtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKCkub2ZmKCk7XG4gICAgdGhpcy4kYW5jaG9yLm9mZignLnpmJyk7XG4gICAgJCh3aW5kb3cpLm9mZihgLnpmLnJldmVhbDoke3RoaXMuaWR9YCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH07XG59XG5cblJldmVhbC5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3NsaWRlLWluLWxlZnQnXG4gICAqL1xuICBhbmltYXRpb25JbjogJycsXG4gIC8qKlxuICAgKiBNb3Rpb24tVUkgY2xhc3MgdG8gdXNlIGZvciBhbmltYXRlZCBlbGVtZW50cy4gSWYgbm9uZSB1c2VkLCBkZWZhdWx0cyB0byBzaW1wbGUgc2hvdy9oaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzbGlkZS1vdXQtcmlnaHQnXG4gICAqL1xuICBhbmltYXRpb25PdXQ6ICcnLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGRlbGF5IHRoZSBvcGVuaW5nIG9mIGEgbW9kYWwgYWZ0ZXIgYSBjbGljayBpZiBubyBhbmltYXRpb24gdXNlZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMFxuICAgKi9cbiAgc2hvd0RlbGF5OiAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIHRvIGRlbGF5IHRoZSBjbG9zaW5nIG9mIGEgbW9kYWwgYWZ0ZXIgYSBjbGljayBpZiBubyBhbmltYXRpb24gdXNlZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMFxuICAgKi9cbiAgaGlkZURlbGF5OiAwLFxuICAvKipcbiAgICogQWxsb3dzIGEgY2xpY2sgb24gdGhlIGJvZHkvb3ZlcmxheSB0byBjbG9zZSB0aGUgbW9kYWwuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBjbG9zZSBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBgRVNDQVBFYCBrZXkuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkVzYzogdHJ1ZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIGFsbG93cyBtdWx0aXBsZSBtb2RhbHMgdG8gYmUgZGlzcGxheWVkIGF0IG9uY2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlT3BlbmVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSBtb2RhbCBzaG91bGQgcHVzaCBkb3duIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGF1dG9cbiAgICovXG4gIHZPZmZzZXQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSBtb2RhbCBzaG91bGQgcHVzaCBpbiBmcm9tIHRoZSBzaWRlIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgYXV0b1xuICAgKi9cbiAgaE9mZnNldDogJ2F1dG8nLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBiZSBmdWxsc2NyZWVuLCBjb21wbGV0ZWx5IGJsb2NraW5nIG91dCB0aGUgcmVzdCBvZiB0aGUgdmlldy4gSlMgY2hlY2tzIGZvciB0aGlzIGFzIHdlbGwuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGZ1bGxTY3JlZW46IGZhbHNlLFxuICAvKipcbiAgICogUGVyY2VudGFnZSBvZiBzY3JlZW4gaGVpZ2h0IHRoZSBtb2RhbCBzaG91bGQgcHVzaCB1cCBmcm9tIHRoZSBib3R0b20gb2YgdGhlIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTBcbiAgICovXG4gIGJ0bU9mZnNldFBjdDogMTAsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGdlbmVyYXRlIGFuIG92ZXJsYXkgZGl2LCB3aGljaCB3aWxsIGNvdmVyIHRoZSB2aWV3IHdoZW4gbW9kYWwgb3BlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgb3ZlcmxheTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gcmVtb3ZlIGFuZCByZWluamVjdCBtYXJrdXAgb24gY2xvc2UuIFNob3VsZCBiZSB0cnVlIGlmIHVzaW5nIHZpZGVvIGVsZW1lbnRzIHcvbyB1c2luZyBwcm92aWRlcidzIGFwaSwgb3RoZXJ3aXNlLCB2aWRlb3Mgd2lsbCBjb250aW51ZSB0byBwbGF5IGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICByZXNldE9uQ2xvc2U6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBhbHRlciB0aGUgdXJsIG9uIG9wZW4vY2xvc2UsIGFuZCBhbGxvd3MgdGhlIHVzZSBvZiB0aGUgYGJhY2tgIGJ1dHRvbiB0byBjbG9zZSBtb2RhbHMuIEFMU08sIGFsbG93cyBhIG1vZGFsIHRvIGF1dG8tbWFuaWFjYWxseSBvcGVuIG9uIHBhZ2UgbG9hZCBJRiB0aGUgaGFzaCA9PT0gdGhlIG1vZGFsJ3MgdXNlci1zZXQgaWQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFJldmVhbCwgJ1JldmVhbCcpO1xuXG5mdW5jdGlvbiBpUGhvbmVTbmlmZigpIHtcbiAgcmV0dXJuIC9pUChhZHxob25lfG9kKS4qT1MvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xufVxuXG5mdW5jdGlvbiBhbmRyb2lkU25pZmYoKSB7XG4gIHJldHVybiAvQW5kcm9pZC8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmZ1bmN0aW9uIG1vYmlsZVNuaWZmKCkge1xuICByZXR1cm4gaVBob25lU25pZmYoKSB8fCBhbmRyb2lkU25pZmYoKTtcbn1cblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFNsaWRlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uc2xpZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50b3VjaFxuICovXG5cbmNsYXNzIFNsaWRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgZHJpbGxkb3duIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFNsaWRlci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnU2xpZGVyJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignU2xpZGVyJywge1xuICAgICAgJ2x0cic6IHtcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX1VQJzogJ2luY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX0RPV04nOiAnZGVjcmVhc2UnLFxuICAgICAgICAnQVJST1dfTEVGVCc6ICdkZWNyZWFzZScsXG4gICAgICAgICdTSElGVF9BUlJPV19SSUdIVCc6ICdpbmNyZWFzZV9mYXN0JyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX1VQJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfRE9XTic6ICdkZWNyZWFzZV9mYXN0JyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX0xFRlQnOiAnZGVjcmVhc2VfZmFzdCdcbiAgICAgIH0sXG4gICAgICAncnRsJzoge1xuICAgICAgICAnQVJST1dfTEVGVCc6ICdpbmNyZWFzZScsXG4gICAgICAgICdBUlJPV19SSUdIVCc6ICdkZWNyZWFzZScsXG4gICAgICAgICdTSElGVF9BUlJPV19MRUZUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfUklHSFQnOiAnZGVjcmVhc2VfZmFzdCdcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWxpemVzIHRoZSBwbHVnaW4gYnkgcmVhZGluZy9zZXR0aW5nIGF0dHJpYnV0ZXMsIGNyZWF0aW5nIGNvbGxlY3Rpb25zIGFuZCBzZXR0aW5nIHRoZSBpbml0aWFsIHBvc2l0aW9uIG9mIHRoZSBoYW5kbGUocykuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy5pbnB1dHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0Jyk7XG4gICAgdGhpcy5oYW5kbGVzID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpO1xuXG4gICAgdGhpcy4kaGFuZGxlID0gdGhpcy5oYW5kbGVzLmVxKDApO1xuICAgIHRoaXMuJGlucHV0ID0gdGhpcy5pbnB1dHMubGVuZ3RoID8gdGhpcy5pbnB1dHMuZXEoMCkgOiAkKGAjJHt0aGlzLiRoYW5kbGUuYXR0cignYXJpYS1jb250cm9scycpfWApO1xuICAgIHRoaXMuJGZpbGwgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXNsaWRlci1maWxsXScpLmNzcyh0aGlzLm9wdGlvbnMudmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCcsIDApO1xuXG4gICAgdmFyIGlzRGJsID0gZmFsc2UsXG4gICAgICAgIF90aGlzID0gdGhpcztcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmRpc2FibGVkQ2xhc3MpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICAgIGlmICghdGhpcy5pbnB1dHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmlucHV0cyA9ICQoKS5hZGQodGhpcy4kaW5wdXQpO1xuICAgICAgdGhpcy5vcHRpb25zLmJpbmRpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9zZXRJbml0QXR0cigwKTtcbiAgICB0aGlzLl9ldmVudHModGhpcy4kaGFuZGxlKTtcblxuICAgIGlmICh0aGlzLmhhbmRsZXNbMV0pIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA9IHRydWU7XG4gICAgICB0aGlzLiRoYW5kbGUyID0gdGhpcy5oYW5kbGVzLmVxKDEpO1xuICAgICAgdGhpcy4kaW5wdXQyID0gdGhpcy5pbnB1dHMubGVuZ3RoID4gMSA/IHRoaXMuaW5wdXRzLmVxKDEpIDogJChgIyR7dGhpcy4kaGFuZGxlMi5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YCk7XG5cbiAgICAgIGlmICghdGhpcy5pbnB1dHNbMV0pIHtcbiAgICAgICAgdGhpcy5pbnB1dHMgPSB0aGlzLmlucHV0cy5hZGQodGhpcy4kaW5wdXQyKTtcbiAgICAgIH1cbiAgICAgIGlzRGJsID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSwgdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCwgdHJ1ZSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfdGhpcy4kaGFuZGxlMiwgX3RoaXMub3B0aW9ucy5pbml0aWFsRW5kLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gdGhpcy4kaGFuZGxlLnRyaWdnZXJIYW5kbGVyKCdjbGljay56Zi5zbGlkZXInKTtcbiAgICAgIHRoaXMuX3NldEluaXRBdHRyKDEpO1xuICAgICAgdGhpcy5fZXZlbnRzKHRoaXMuJGhhbmRsZTIpO1xuICAgIH1cblxuICAgIGlmICghaXNEYmwpIHtcbiAgICAgIHRoaXMuX3NldEhhbmRsZVBvcyh0aGlzLiRoYW5kbGUsIHRoaXMub3B0aW9ucy5pbml0aWFsU3RhcnQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2VsZWN0ZWQgaGFuZGxlIGFuZCBmaWxsIGJhci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaG5kbCAtIHRoZSBzZWxlY3RlZCBoYW5kbGUgdG8gbW92ZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxvY2F0aW9uIC0gZmxvYXRpbmcgcG9pbnQgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMgb2YgdGhlIHNsaWRlciBiYXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbiBjb21wbGV0aW9uLlxuICAgKiBAZmlyZXMgU2xpZGVyI21vdmVkXG4gICAqIEBmaXJlcyBTbGlkZXIjY2hhbmdlZFxuICAgKi9cbiAgX3NldEhhbmRsZVBvcygkaG5kbCwgbG9jYXRpb24sIG5vSW52ZXJ0LCBjYikge1xuICAgIC8vIGRvbid0IG1vdmUgaWYgdGhlIHNsaWRlciBoYXMgYmVlbiBkaXNhYmxlZCBzaW5jZSBpdHMgaW5pdGlhbGl6YXRpb25cbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy9taWdodCBuZWVkIHRvIGFsdGVyIHRoYXQgc2xpZ2h0bHkgZm9yIGJhcnMgdGhhdCB3aWxsIGhhdmUgb2RkIG51bWJlciBzZWxlY3Rpb25zLlxuICAgIGxvY2F0aW9uID0gcGFyc2VGbG9hdChsb2NhdGlvbik7Ly9vbiBpbnB1dCBjaGFuZ2UgZXZlbnRzLCBjb252ZXJ0IHN0cmluZyB0byBudW1iZXIuLi5ncnVtYmxlLlxuXG4gICAgLy8gcHJldmVudCBzbGlkZXIgZnJvbSBydW5uaW5nIG91dCBvZiBib3VuZHMsIGlmIHZhbHVlIGV4Y2VlZHMgdGhlIGxpbWl0cyBzZXQgdGhyb3VnaCBvcHRpb25zLCBvdmVycmlkZSB0aGUgdmFsdWUgdG8gbWluL21heFxuICAgIGlmIChsb2NhdGlvbiA8IHRoaXMub3B0aW9ucy5zdGFydCkgeyBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5zdGFydDsgfVxuICAgIGVsc2UgaWYgKGxvY2F0aW9uID4gdGhpcy5vcHRpb25zLmVuZCkgeyBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5lbmQ7IH1cblxuICAgIHZhciBpc0RibCA9IHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZDtcblxuICAgIGlmIChpc0RibCkgeyAvL3RoaXMgYmxvY2sgaXMgdG8gcHJldmVudCAyIGhhbmRsZXMgZnJvbSBjcm9zc2luZyBlYWNob3RoZXIuIENvdWxkL3Nob3VsZCBiZSBpbXByb3ZlZC5cbiAgICAgIGlmICh0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwKSB7XG4gICAgICAgIHZhciBoMlZhbCA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMi5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uID49IGgyVmFsID8gaDJWYWwgLSB0aGlzLm9wdGlvbnMuc3RlcCA6IGxvY2F0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGgxVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUuYXR0cignYXJpYS12YWx1ZW5vdycpKTtcbiAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbiA8PSBoMVZhbCA/IGgxVmFsICsgdGhpcy5vcHRpb25zLnN0ZXAgOiBsb2NhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL3RoaXMgaXMgZm9yIHNpbmdsZS1oYW5kbGVkIHZlcnRpY2FsIHNsaWRlcnMsIGl0IGFkanVzdHMgdGhlIHZhbHVlIHRvIGFjY291bnQgZm9yIHRoZSBzbGlkZXIgYmVpbmcgXCJ1cHNpZGUtZG93blwiXG4gICAgLy9mb3IgY2xpY2sgYW5kIGRyYWcgZXZlbnRzLCBpdCdzIHdlaXJkIGR1ZSB0byB0aGUgc2NhbGUoLTEsIDEpIGNzcyBwcm9wZXJ0eVxuICAgIGlmICh0aGlzLm9wdGlvbnMudmVydGljYWwgJiYgIW5vSW52ZXJ0KSB7XG4gICAgICBsb2NhdGlvbiA9IHRoaXMub3B0aW9ucy5lbmQgLSBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB2ZXJ0ID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICBoT3JXID0gdmVydCA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgbE9yVCA9IHZlcnQgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgaGFuZGxlRGltID0gJGhuZGxbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG4gICAgICAgIGVsZW1EaW0gPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2hPclddLFxuICAgICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIG1pbi9tYXggdmFsdWUgYmFzZWQgb24gY2xpY2sgb3IgZHJhZyBwb2ludFxuICAgICAgICBwY3RPZkJhciA9IHBlcmNlbnQobG9jYXRpb24gLSB0aGlzLm9wdGlvbnMuc3RhcnQsIHRoaXMub3B0aW9ucy5lbmQgLSB0aGlzLm9wdGlvbnMuc3RhcnQpLnRvRml4ZWQoMiksXG4gICAgICAgIC8vbnVtYmVyIG9mIGFjdHVhbCBwaXhlbHMgdG8gc2hpZnQgdGhlIGhhbmRsZSwgYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2J0YWluZWQgYWJvdmVcbiAgICAgICAgcHhUb01vdmUgPSAoZWxlbURpbSAtIGhhbmRsZURpbSkgKiBwY3RPZkJhcixcbiAgICAgICAgLy9wZXJjZW50YWdlIG9mIGJhciB0byBzaGlmdCB0aGUgaGFuZGxlXG4gICAgICAgIG1vdmVtZW50ID0gKHBlcmNlbnQocHhUb01vdmUsIGVsZW1EaW0pICogMTAwKS50b0ZpeGVkKHRoaXMub3B0aW9ucy5kZWNpbWFsKTtcbiAgICAgICAgLy9maXhpbmcgdGhlIGRlY2ltYWwgdmFsdWUgZm9yIHRoZSBsb2NhdGlvbiBudW1iZXIsIGlzIHBhc3NlZCB0byBvdGhlciBtZXRob2RzIGFzIGEgZml4ZWQgZmxvYXRpbmctcG9pbnQgdmFsdWVcbiAgICAgICAgbG9jYXRpb24gPSBwYXJzZUZsb2F0KGxvY2F0aW9uLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpKTtcbiAgICAgICAgLy8gZGVjbGFyZSBlbXB0eSBvYmplY3QgZm9yIGNzcyBhZGp1c3RtZW50cywgb25seSB1c2VkIHdpdGggMiBoYW5kbGVkLXNsaWRlcnNcbiAgICB2YXIgY3NzID0ge307XG5cbiAgICB0aGlzLl9zZXRWYWx1ZXMoJGhuZGwsIGxvY2F0aW9uKTtcblxuICAgIC8vIFRPRE8gdXBkYXRlIHRvIGNhbGN1bGF0ZSBiYXNlZCBvbiB2YWx1ZXMgc2V0IHRvIHJlc3BlY3RpdmUgaW5wdXRzPz9cbiAgICBpZiAoaXNEYmwpIHtcbiAgICAgIHZhciBpc0xlZnRIbmRsID0gdGhpcy5oYW5kbGVzLmluZGV4KCRobmRsKSA9PT0gMCxcbiAgICAgICAgICAvL2VtcHR5IHZhcmlhYmxlLCB3aWxsIGJlIHVzZWQgZm9yIG1pbi1oZWlnaHQvd2lkdGggZm9yIGZpbGwgYmFyXG4gICAgICAgICAgZGltLFxuICAgICAgICAgIC8vcGVyY2VudGFnZSB3L2ggb2YgdGhlIGhhbmRsZSBjb21wYXJlZCB0byB0aGUgc2xpZGVyIGJhclxuICAgICAgICAgIGhhbmRsZVBjdCA9ICB+fihwZXJjZW50KGhhbmRsZURpbSwgZWxlbURpbSkgKiAxMDApO1xuICAgICAgLy9pZiBsZWZ0IGhhbmRsZSwgdGhlIG1hdGggaXMgc2xpZ2h0bHkgZGlmZmVyZW50IHRoYW4gaWYgaXQncyB0aGUgcmlnaHQgaGFuZGxlLCBhbmQgdGhlIGxlZnQvdG9wIHByb3BlcnR5IG5lZWRzIHRvIGJlIGNoYW5nZWQgZm9yIHRoZSBmaWxsIGJhclxuICAgICAgaWYgKGlzTGVmdEhuZGwpIHtcbiAgICAgICAgLy9sZWZ0IG9yIHRvcCBwZXJjZW50YWdlIHZhbHVlIHRvIGFwcGx5IHRvIHRoZSBmaWxsIGJhci5cbiAgICAgICAgY3NzW2xPclRdID0gYCR7bW92ZW1lbnR9JWA7XG4gICAgICAgIC8vY2FsY3VsYXRlIHRoZSBuZXcgbWluLWhlaWdodC93aWR0aCBmb3IgdGhlIGZpbGwgYmFyLlxuICAgICAgICBkaW0gPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZTJbMF0uc3R5bGVbbE9yVF0pIC0gbW92ZW1lbnQgKyBoYW5kbGVQY3Q7XG4gICAgICAgIC8vdGhpcyBjYWxsYmFjayBpcyBuZWNlc3NhcnkgdG8gcHJldmVudCBlcnJvcnMgYW5kIGFsbG93IHRoZSBwcm9wZXIgcGxhY2VtZW50IGFuZCBpbml0aWFsaXphdGlvbiBvZiBhIDItaGFuZGxlZCBzbGlkZXJcbiAgICAgICAgLy9wbHVzLCBpdCBtZWFucyB3ZSBkb24ndCBjYXJlIGlmICdkaW0nIGlzTmFOIG9uIGluaXQsIGl0IHdvbid0IGJlIGluIHRoZSBmdXR1cmUuXG4gICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfS8vdGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgdGhlIGluaXRpYWxpemF0aW9uIG9mIDIgaGFuZGxlZCBzbGlkZXJzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2p1c3QgY2FjaGluZyB0aGUgdmFsdWUgb2YgdGhlIGxlZnQvYm90dG9tIGhhbmRsZSdzIGxlZnQvdG9wIHByb3BlcnR5XG4gICAgICAgIHZhciBoYW5kbGVQb3MgPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZVswXS5zdHlsZVtsT3JUXSk7XG4gICAgICAgIC8vY2FsY3VsYXRlIHRoZSBuZXcgbWluLWhlaWdodC93aWR0aCBmb3IgdGhlIGZpbGwgYmFyLiBVc2UgaXNOYU4gdG8gcHJldmVudCBmYWxzZSBwb3NpdGl2ZXMgZm9yIG51bWJlcnMgPD0gMFxuICAgICAgICAvL2Jhc2VkIG9uIHRoZSBwZXJjZW50YWdlIG9mIG1vdmVtZW50IG9mIHRoZSBoYW5kbGUgYmVpbmcgbWFuaXB1bGF0ZWQsIGxlc3MgdGhlIG9wcG9zaW5nIGhhbmRsZSdzIGxlZnQvdG9wIHBvc2l0aW9uLCBwbHVzIHRoZSBwZXJjZW50YWdlIHcvaCBvZiB0aGUgaGFuZGxlIGl0c2VsZlxuICAgICAgICBkaW0gPSBtb3ZlbWVudCAtIChpc05hTihoYW5kbGVQb3MpID8gdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydC8oKHRoaXMub3B0aW9ucy5lbmQtdGhpcy5vcHRpb25zLnN0YXJ0KS8xMDApIDogaGFuZGxlUG9zKSArIGhhbmRsZVBjdDtcbiAgICAgIH1cbiAgICAgIC8vIGFzc2lnbiB0aGUgbWluLWhlaWdodC93aWR0aCB0byBvdXIgY3NzIG9iamVjdFxuICAgICAgY3NzW2BtaW4tJHtoT3JXfWBdID0gYCR7ZGltfSVgO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub25lKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoYW5kbGUgaXMgZG9uZSBtb3ZpbmcuXG4gICAgICAgICAgICAgICAgICAgICAqIEBldmVudCBTbGlkZXIjbW92ZWRcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ21vdmVkLnpmLnNsaWRlcicsIFskaG5kbF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgLy9iZWNhdXNlIHdlIGRvbid0IGtub3cgZXhhY3RseSBob3cgdGhlIGhhbmRsZSB3aWxsIGJlIG1vdmVkLCBjaGVjayB0aGUgYW1vdW50IG9mIHRpbWUgaXQgc2hvdWxkIHRha2UgdG8gbW92ZS5cbiAgICB2YXIgbW92ZVRpbWUgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykgPyAxMDAwLzYwIDogdGhpcy5vcHRpb25zLm1vdmVUaW1lO1xuXG4gICAgRm91bmRhdGlvbi5Nb3ZlKG1vdmVUaW1lLCAkaG5kbCwgZnVuY3Rpb24oKSB7XG4gICAgICAvL2FkanVzdGluZyB0aGUgbGVmdC90b3AgcHJvcGVydHkgb2YgdGhlIGhhbmRsZSwgYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2UgY2FsY3VsYXRlZCBhYm92ZVxuICAgICAgJGhuZGwuY3NzKGxPclQsIGAke21vdmVtZW50fSVgKTtcblxuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkKSB7XG4gICAgICAgIC8vaWYgc2luZ2xlLWhhbmRsZWQsIGEgc2ltcGxlIG1ldGhvZCB0byBleHBhbmQgdGhlIGZpbGwgYmFyXG4gICAgICAgIF90aGlzLiRmaWxsLmNzcyhoT3JXLCBgJHtwY3RPZkJhciAqIDEwMH0lYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL290aGVyd2lzZSwgdXNlIHRoZSBjc3Mgb2JqZWN0IHdlIGNyZWF0ZWQgYWJvdmVcbiAgICAgICAgX3RoaXMuJGZpbGwuY3NzKGNzcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB2YWx1ZSBoYXMgbm90IGJlZW4gY2hhbmdlIGZvciBhIGdpdmVuIHRpbWUuXG4gICAgICogQGV2ZW50IFNsaWRlciNjaGFuZ2VkXG4gICAgICovXG4gICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2VkLnpmLnNsaWRlcicsIFskaG5kbF0pO1xuICAgIH0sIF90aGlzLm9wdGlvbnMuY2hhbmdlZERlbGF5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpbml0aWFsIGF0dHJpYnV0ZSBmb3IgdGhlIHNsaWRlciBlbGVtZW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIGluZGV4IG9mIHRoZSBjdXJyZW50IGhhbmRsZS9pbnB1dCB0byB1c2UuXG4gICAqL1xuICBfc2V0SW5pdEF0dHIoaWR4KSB7XG4gICAgdmFyIGlkID0gdGhpcy5pbnB1dHMuZXEoaWR4KS5hdHRyKCdpZCcpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ3NsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLmVxKGlkeCkuYXR0cih7XG4gICAgICAnaWQnOiBpZCxcbiAgICAgICdtYXgnOiB0aGlzLm9wdGlvbnMuZW5kLFxuICAgICAgJ21pbic6IHRoaXMub3B0aW9ucy5zdGFydCxcbiAgICAgICdzdGVwJzogdGhpcy5vcHRpb25zLnN0ZXBcbiAgICB9KTtcbiAgICB0aGlzLmhhbmRsZXMuZXEoaWR4KS5hdHRyKHtcbiAgICAgICdyb2xlJzogJ3NsaWRlcicsXG4gICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgJ2FyaWEtdmFsdWVtYXgnOiB0aGlzLm9wdGlvbnMuZW5kLFxuICAgICAgJ2FyaWEtdmFsdWVtaW4nOiB0aGlzLm9wdGlvbnMuc3RhcnQsXG4gICAgICAnYXJpYS12YWx1ZW5vdyc6IGlkeCA9PT0gMCA/IHRoaXMub3B0aW9ucy5pbml0aWFsU3RhcnQgOiB0aGlzLm9wdGlvbnMuaW5pdGlhbEVuZCxcbiAgICAgICdhcmlhLW9yaWVudGF0aW9uJzogdGhpcy5vcHRpb25zLnZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJyxcbiAgICAgICd0YWJpbmRleCc6IDBcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBpbnB1dCBhbmQgYGFyaWEtdmFsdWVub3dgIHZhbHVlcyBmb3IgdGhlIHNsaWRlciBlbGVtZW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGhhbmRsZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbCAtIGZsb2F0aW5nIHBvaW50IG9mIHRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBfc2V0VmFsdWVzKCRoYW5kbGUsIHZhbCkge1xuICAgIHZhciBpZHggPSB0aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPyB0aGlzLmhhbmRsZXMuaW5kZXgoJGhhbmRsZSkgOiAwO1xuICAgIHRoaXMuaW5wdXRzLmVxKGlkeCkudmFsKHZhbCk7XG4gICAgJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JywgdmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGV2ZW50cyBvbiB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIENhbGN1bGF0ZXMgdGhlIG5ldyBsb2NhdGlvbiBvZiB0aGUgY3VycmVudCBoYW5kbGUuXG4gICAqIElmIHRoZXJlIGFyZSB0d28gaGFuZGxlcyBhbmQgdGhlIGJhciB3YXMgY2xpY2tlZCwgaXQgZGV0ZXJtaW5lcyB3aGljaCBoYW5kbGUgdG8gbW92ZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlIC0gdGhlIGBldmVudGAgb2JqZWN0IHBhc3NlZCBmcm9tIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gY2FsY3VsYXRlIGZvciwgaWYgc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWwgLSBmbG9hdGluZyBwb2ludCBudW1iZXIgZm9yIHRoZSBuZXcgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogVE9ETyBjbGVhbiB0aGlzIHVwLCB0aGVyZSdzIGEgbG90IG9mIHJlcGVhdGVkIGNvZGUgYmV0d2VlbiB0aGlzIGFuZCB0aGUgX3NldEhhbmRsZVBvcyBmbi5cbiAgICovXG4gIF9oYW5kbGVFdmVudChlLCAkaGFuZGxlLCB2YWwpIHtcbiAgICB2YXIgdmFsdWUsIGhhc1ZhbDtcbiAgICBpZiAoIXZhbCkgey8vY2xpY2sgb3IgZHJhZyBldmVudHNcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgdmVydGljYWwgPSB0aGlzLm9wdGlvbnMudmVydGljYWwsXG4gICAgICAgICAgcGFyYW0gPSB2ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgICBkaXJlY3Rpb24gPSB2ZXJ0aWNhbCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgIGV2ZW50T2Zmc2V0ID0gdmVydGljYWwgPyBlLnBhZ2VZIDogZS5wYWdlWCxcbiAgICAgICAgICBoYWxmT2ZIYW5kbGUgPSB0aGlzLiRoYW5kbGVbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcGFyYW1dIC8gMixcbiAgICAgICAgICBiYXJEaW0gPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3BhcmFtXSxcbiAgICAgICAgICB3aW5kb3dTY3JvbGwgPSB2ZXJ0aWNhbCA/ICQod2luZG93KS5zY3JvbGxUb3AoKSA6ICQod2luZG93KS5zY3JvbGxMZWZ0KCk7XG5cblxuICAgICAgdmFyIGVsZW1PZmZzZXQgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpW2RpcmVjdGlvbl07XG5cbiAgICAgIC8vIHRvdWNoIGV2ZW50cyBlbXVsYXRlZCBieSB0aGUgdG91Y2ggdXRpbCBnaXZlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHNjcmVlbiwgYWRkIHdpbmRvdy5zY3JvbGwgdG8gZXZlbnQgY29vcmRpbmF0ZXMuLi5cbiAgICAgIC8vIGJlc3Qgd2F5IHRvIGd1ZXNzIHRoaXMgaXMgc2ltdWxhdGVkIGlzIGlmIGNsaWVudFkgPT0gcGFnZVlcbiAgICAgIGlmIChlLmNsaWVudFkgPT09IGUucGFnZVkpIHsgZXZlbnRPZmZzZXQgPSBldmVudE9mZnNldCArIHdpbmRvd1Njcm9sbDsgfVxuICAgICAgdmFyIGV2ZW50RnJvbUJhciA9IGV2ZW50T2Zmc2V0IC0gZWxlbU9mZnNldDtcbiAgICAgIHZhciBiYXJYWTtcbiAgICAgIGlmIChldmVudEZyb21CYXIgPCAwKSB7XG4gICAgICAgIGJhclhZID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRGcm9tQmFyID4gYmFyRGltKSB7XG4gICAgICAgIGJhclhZID0gYmFyRGltO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFyWFkgPSBldmVudEZyb21CYXI7XG4gICAgICB9XG4gICAgICBvZmZzZXRQY3QgPSBwZXJjZW50KGJhclhZLCBiYXJEaW0pO1xuXG4gICAgICB2YWx1ZSA9ICh0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KSAqIG9mZnNldFBjdCArIHRoaXMub3B0aW9ucy5zdGFydDtcblxuICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpICYmICF0aGlzLm9wdGlvbnMudmVydGljYWwpIHt2YWx1ZSA9IHRoaXMub3B0aW9ucy5lbmQgLSB2YWx1ZTt9XG5cbiAgICAgIHZhbHVlID0gX3RoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbHVlKTtcbiAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgIGhhc1ZhbCA9IGZhbHNlO1xuXG4gICAgICBpZiAoISRoYW5kbGUpIHsvL2ZpZ3VyZSBvdXQgd2hpY2ggaGFuZGxlIGl0IGlzLCBwYXNzIGl0IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICBzZWNuZEhuZGxQb3MgPSBhYnNQb3NpdGlvbih0aGlzLiRoYW5kbGUyLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSk7XG4gICAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICB9XG5cbiAgICB9IGVsc2Ugey8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICB2YWx1ZSA9IHRoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbCk7XG4gICAgICBoYXNWYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEhhbmRsZVBvcygkaGFuZGxlLCB2YWx1ZSwgaGFzVmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3RlcyB2YWx1ZSBmb3IgaGFuZGxlIGluIHJlZ2FyZCB0byBzdGVwIHZhbHVlLiByZXR1cm5zIGFkanVzdGVkIHZhbHVlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIGFkanVzdC4gdXNlZCBpZiAkaGFuZGxlIGlzIGZhbHN5XG4gICAqL1xuICBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsLFxuICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgZGl2ID0gcGFyc2VGbG9hdChzdGVwLzIpLFxuICAgICAgbGVmdCwgcHJldl92YWwsIG5leHRfdmFsO1xuICAgIGlmICghISRoYW5kbGUpIHtcbiAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICBwcmV2X3ZhbCA9IHZhbCAtIGxlZnQ7XG4gICAgbmV4dF92YWwgPSBwcmV2X3ZhbCArIHN0ZXA7XG4gICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc2xpZGVyIGVsZW1lbnRzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gYXBwbHkgbGlzdGVuZXJzIHRvLlxuICAgKi9cbiAgX2V2ZW50cygkaGFuZGxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgY3VySGFuZGxlLFxuICAgICAgICB0aW1lcjtcblxuICAgICAgdGhpcy5pbnB1dHMub2ZmKCdjaGFuZ2UuemYuc2xpZGVyJykub24oJ2NoYW5nZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBpZHggPSBfdGhpcy5pbnB1dHMuaW5kZXgoJCh0aGlzKSk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBfdGhpcy5oYW5kbGVzLmVxKGlkeCksICQodGhpcykudmFsKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tTZWxlY3QpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnNsaWRlcicpLm9uKCdjbGljay56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLmhhbmRsZXMuYWRkVG91Y2goKTtcblxuICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgJGhhbmRsZVxuICAgICAgICAub2ZmKCdtb3VzZWRvd24uemYuc2xpZGVyJylcbiAgICAgICAgLm9uKCdtb3VzZWRvd24uemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICRoYW5kbGUuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgX3RoaXMuJGZpbGwuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7Ly9cbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIHRydWUpO1xuXG4gICAgICAgICAgY3VySGFuZGxlID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgJGJvZHkub24oJ21vdXNlbW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgY3VySGFuZGxlKTtcblxuICAgICAgICAgIH0pLm9uKCdtb3VzZXVwLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgICAkaGFuZGxlLnJlbW92ZUNsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgX3RoaXMuJGZpbGwucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIGZhbHNlKTtcblxuICAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLy8gcHJldmVudCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRvdWNoXG4gICAgICAub24oJ3NlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkaGFuZGxlLm9mZigna2V5ZG93bi56Zi5zbGlkZXInKS5vbigna2V5ZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgXyRoYW5kbGUgPSAkKHRoaXMpLFxuICAgICAgICAgIGlkeCA9IF90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPyBfdGhpcy5oYW5kbGVzLmluZGV4KF8kaGFuZGxlKSA6IDAsXG4gICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICBuZXdWYWx1ZTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1NsaWRlcicsIHtcbiAgICAgICAgZGVjcmVhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwO1xuICAgICAgICB9LFxuICAgICAgICBkZWNyZWFzZV9mYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlIC0gX3RoaXMub3B0aW9ucy5zdGVwICogMTA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIG9ubHkgc2V0IGhhbmRsZSBwb3Mgd2hlbiBldmVudCB3YXMgaGFuZGxlZCBzcGVjaWFsbHlcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qaWYgKG5ld1ZhbHVlKSB7IC8vIGlmIHByZXNzZWQga2V5IGhhcyBzcGVjaWFsIGZ1bmN0aW9uLCB1cGRhdGUgdmFsdWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSk7XG4gICAgICB9Ki9cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgc2xpZGVyIHBsdWdpbi5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oYW5kbGVzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYuc2xpZGVyJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU2xpZGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBmb3IgdGhlIHNsaWRlciBzY2FsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAwXG4gICAqL1xuICBzdGFydDogMCxcbiAgLyoqXG4gICAqIE1heGltdW0gdmFsdWUgZm9yIHRoZSBzbGlkZXIgc2NhbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTAwXG4gICAqL1xuICBlbmQ6IDEwMCxcbiAgLyoqXG4gICAqIE1pbmltdW0gdmFsdWUgY2hhbmdlIHBlciBjaGFuZ2UgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgc3RlcDogMSxcbiAgLyoqXG4gICAqIFZhbHVlIGF0IHdoaWNoIHRoZSBoYW5kbGUvaW5wdXQgKihsZWZ0IGhhbmRsZS9maXJzdCBpbnB1dCkqIHNob3VsZCBiZSBzZXQgdG8gb24gaW5pdGlhbGl6YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMFxuICAgKi9cbiAgaW5pdGlhbFN0YXJ0OiAwLFxuICAvKipcbiAgICogVmFsdWUgYXQgd2hpY2ggdGhlIHJpZ2h0IGhhbmRsZS9zZWNvbmQgaW5wdXQgc2hvdWxkIGJlIHNldCB0byBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMDBcbiAgICovXG4gIGluaXRpYWxFbmQ6IDEwMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgaW5wdXQgdG8gYmUgbG9jYXRlZCBvdXRzaWRlIHRoZSBjb250YWluZXIgYW5kIHZpc2libGUuIFNldCB0byBieSB0aGUgSlNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYmluZGluZzogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gY2xpY2svdGFwIG9uIHRoZSBzbGlkZXIgYmFyIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrU2VsZWN0OiB0cnVlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgYW5kIHVzZSB0aGUgYHZlcnRpY2FsYCBjbGFzcyB0byBjaGFuZ2UgYWxpZ25tZW50IHRvIHZlcnRpY2FsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gZHJhZyB0aGUgc2xpZGVyIGhhbmRsZShzKSB0byBzZWxlY3QgYSB2YWx1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBkcmFnZ2FibGU6IHRydWUsXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgc2xpZGVyIGFuZCBwcmV2ZW50cyBldmVudCBsaXN0ZW5lcnMgZnJvbSBiZWluZyBhcHBsaWVkLiBEb3VibGUgY2hlY2tlZCBieSBKUyB3aXRoIGBkaXNhYmxlZENsYXNzYC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2Ugb2YgdHdvIGhhbmRsZXMuIERvdWJsZSBjaGVja2VkIGJ5IHRoZSBKUy4gQ2hhbmdlcyBzb21lIGxvZ2ljIGhhbmRsaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkb3VibGVTaWRlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBQb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUuXG4gICAqL1xuICAvLyBzdGVwczogMTAwLFxuICAvKipcbiAgICogTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRoZSBwbHVnaW4gc2hvdWxkIGdvIHRvIGZvciBmbG9hdGluZyBwb2ludCBwcmVjaXNpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMlxuICAgKi9cbiAgZGVjaW1hbDogMixcbiAgLyoqXG4gICAqIFRpbWUgZGVsYXkgZm9yIGRyYWdnZWQgZWxlbWVudHMuXG4gICAqL1xuICAvLyBkcmFnRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gYW5pbWF0ZSB0aGUgbW92ZW1lbnQgb2YgYSBzbGlkZXIgaGFuZGxlIGlmIHVzZXIgY2xpY2tzL3RhcHMgb24gdGhlIGJhci4gTmVlZHMgdG8gYmUgbWFudWFsbHkgc2V0IGlmIHVwZGF0aW5nIHRoZSB0cmFuc2l0aW9uIHRpbWUgaW4gdGhlIFNhc3Mgc2V0dGluZ3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjAwXG4gICAqL1xuICBtb3ZlVGltZTogMjAwLC8vdXBkYXRlIHRoaXMgaWYgY2hhbmdpbmcgdGhlIHRyYW5zaXRpb24gdGltZSBpbiB0aGUgc2Fzc1xuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBkaXNhYmxlZCBzbGlkZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdkaXNhYmxlZCdcbiAgICovXG4gIGRpc2FibGVkQ2xhc3M6ICdkaXNhYmxlZCcsXG4gIC8qKlxuICAgKiBXaWxsIGludmVydCB0aGUgZGVmYXVsdCBsYXlvdXQgZm9yIGEgdmVydGljYWw8c3BhbiBkYXRhLXRvb2x0aXAgdGl0bGU9XCJ3aG8gd291bGQgZG8gdGhpcz8/P1wiPiA8L3NwYW4+c2xpZGVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMFxufTtcblxuZnVuY3Rpb24gcGVyY2VudChmcmFjLCBudW0pIHtcbiAgcmV0dXJuIChmcmFjIC8gbnVtKTtcbn1cbmZ1bmN0aW9uIGFic1Bvc2l0aW9uKCRoYW5kbGUsIGRpciwgY2xpY2tQb3MsIHBhcmFtKSB7XG4gIHJldHVybiBNYXRoLmFicygoJGhhbmRsZS5wb3NpdGlvbigpW2Rpcl0gKyAoJGhhbmRsZVtwYXJhbV0oKSAvIDIpKSAtIGNsaWNrUG9zKTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFNsaWRlciwgJ1NsaWRlcicpO1xuXG59KGpRdWVyeSk7XG5cbi8vKioqKioqKioqdGhpcyBpcyBpbiBjYXNlIHdlIGdvIHRvIHN0YXRpYywgYWJzb2x1dGUgcG9zaXRpb25zIGluc3RlYWQgb2YgZHluYW1pYyBwb3NpdGlvbmluZyoqKioqKioqXG4vLyB0aGlzLnNldFN0ZXBzKGZ1bmN0aW9uKCkge1xuLy8gICBfdGhpcy5fZXZlbnRzKCk7XG4vLyAgIHZhciBpbml0U3RhcnQgPSBfdGhpcy5vcHRpb25zLnBvc2l0aW9uc1tfdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCAtIDFdIHx8IG51bGw7XG4vLyAgIHZhciBpbml0RW5kID0gX3RoaXMub3B0aW9ucy5pbml0aWFsRW5kID8gX3RoaXMub3B0aW9ucy5wb3NpdGlvbltfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQgLSAxXSA6IG51bGw7XG4vLyAgIGlmIChpbml0U3RhcnQgfHwgaW5pdEVuZCkge1xuLy8gICAgIF90aGlzLl9oYW5kbGVFdmVudChpbml0U3RhcnQsIGluaXRFbmQpO1xuLy8gICB9XG4vLyB9KTtcblxuLy8qKioqKioqKioqKnRoZSBvdGhlciBwYXJ0IG9mIGFic29sdXRlIHBvc2l0aW9ucyoqKioqKioqKioqKipcbi8vIFNsaWRlci5wcm90b3R5cGUuc2V0U3RlcHMgPSBmdW5jdGlvbihjYikge1xuLy8gICB2YXIgcG9zQ2hhbmdlID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCkgLyB0aGlzLm9wdGlvbnMuc3RlcHM7XG4vLyAgIHZhciBjb3VudGVyID0gMFxuLy8gICB3aGlsZShjb3VudGVyIDwgdGhpcy5vcHRpb25zLnN0ZXBzKSB7XG4vLyAgICAgaWYgKGNvdW50ZXIpIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaCh0aGlzLm9wdGlvbnMucG9zaXRpb25zW2NvdW50ZXIgLSAxXSArIHBvc0NoYW5nZSk7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaChwb3NDaGFuZ2UpO1xuLy8gICAgIH1cbi8vICAgICBjb3VudGVyKys7XG4vLyAgIH1cbi8vICAgY2IoKTtcbi8vIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU3RpY2t5IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zdGlja3lcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFN0aWNreSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2Ugc3RpY2t5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFN0aWNreS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnU3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHN0aWNreSBlbGVtZW50IGJ5IGFkZGluZyBjbGFzc2VzLCBnZXR0aW5nL3NldHRpbmcgZGltZW5zaW9ucywgYnJlYWtwb2ludHMgYW5kIGF0dHJpYnV0ZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc3RpY2t5JyksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHRoaXMud2FzV3JhcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcikud3JhcElubmVyKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpXG4gICAgICAgICAgICAgICAgIC5hdHRyKHsnZGF0YS1yZXNpemUnOiBpZH0pO1xuXG4gICAgdGhpcy5zY3JvbGxDb3VudCA9IHRoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24oKXtcbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuYW5jaG9yICE9PSAnJyl7XG4gICAgICAgIF90aGlzLiRhbmNob3IgPSAkKCcjJyArIF90aGlzLm9wdGlvbnMuYW5jaG9yKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBfdGhpcy5fcGFyc2VQb2ludHMoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2V2ZW50cyhpZC5zcGxpdCgnLScpLnJldmVyc2UoKS5qb2luKCctJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHVzaW5nIG11bHRpcGxlIGVsZW1lbnRzIGFzIGFuY2hvcnMsIGNhbGN1bGF0ZXMgdGhlIHRvcCBhbmQgYm90dG9tIHBpeGVsIHZhbHVlcyB0aGUgc3RpY2t5IHRoaW5nIHNob3VsZCBzdGljayBhbmQgdW5zdGljayBvbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGFyc2VQb2ludHMoKSB7XG4gICAgdmFyIHRvcCA9IHRoaXMub3B0aW9ucy50b3BBbmNob3IgPT0gXCJcIiA/IDEgOiB0aGlzLm9wdGlvbnMudG9wQW5jaG9yLFxuICAgICAgICBidG0gPSB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yPT0gXCJcIiA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgOiB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yLFxuICAgICAgICBwdHMgPSBbdG9wLCBidG1dLFxuICAgICAgICBicmVha3MgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcHRzLmxlbmd0aDsgaSA8IGxlbiAmJiBwdHNbaV07IGkrKykge1xuICAgICAgdmFyIHB0O1xuICAgICAgaWYgKHR5cGVvZiBwdHNbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHB0ID0gcHRzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBsYWNlID0gcHRzW2ldLnNwbGl0KCc6JyksXG4gICAgICAgICAgICBhbmNob3IgPSAkKGAjJHtwbGFjZVswXX1gKTtcblxuICAgICAgICBwdCA9IGFuY2hvci5vZmZzZXQoKS50b3A7XG4gICAgICAgIGlmIChwbGFjZVsxXSAmJiBwbGFjZVsxXS50b0xvd2VyQ2FzZSgpID09PSAnYm90dG9tJykge1xuICAgICAgICAgIHB0ICs9IGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrc1tpXSA9IHB0O1xuICAgIH1cblxuXG4gICAgdGhpcy5wb2ludHMgPSBicmVha3M7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBzY3JvbGxpbmcgZWxlbWVudC5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gcHN1ZWRvLXJhbmRvbSBpZCBmb3IgdW5pcXVlIHNjcm9sbCBldmVudCBsaXN0ZW5lci5cbiAgICovXG4gIF9ldmVudHMoaWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzY3JvbGxMaXN0ZW5lciA9IHRoaXMuc2Nyb2xsTGlzdGVuZXIgPSBgc2Nyb2xsLnpmLiR7aWR9YDtcbiAgICBpZiAodGhpcy5pc09uKSB7IHJldHVybjsgfVxuICAgIGlmICh0aGlzLmNhblN0aWNrKSB7XG4gICAgICB0aGlzLmlzT24gPSB0cnVlO1xuICAgICAgJCh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcilcbiAgICAgICAgICAgICAgIC5vbihzY3JvbGxMaXN0ZW5lciwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2Nyb2xsQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudCA9IF90aGlzLm9wdGlvbnMuY2hlY2tFdmVyeTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJylcbiAgICAgICAgICAgICAgICAgLm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzT24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmb3Igc2Nyb2xsIGFuZCBjaGFuZ2UgZXZlbnRzIG9uIGFuY2hvci5cbiAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2Nyb2xsTGlzdGVuZXIgLSB1bmlxdWUsIG5hbWVzcGFjZWQgc2Nyb2xsIGxpc3RlbmVyIGF0dGFjaGVkIHRvIGB3aW5kb3dgXG4gICAqL1xuICBfcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbExpc3RlbmVyKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICogQGV2ZW50IFN0aWNreSNwYXVzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncGF1c2UuemYuc3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGV2ZXJ5IGBzY3JvbGxgIGV2ZW50IGFuZCBvbiBgX2luaXRgXG4gICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrU2l6ZXMgLSB0cnVlIGlmIHBsdWdpbiBzaG91bGQgcmVjYWxjdWxhdGUgc2l6ZXMgYW5kIGJyZWFrcG9pbnRzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gc2Nyb2xsIC0gY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGFzc2VkIGZyb20gc2Nyb2xsIGV2ZW50IGNiIGZ1bmN0aW9uLiBJZiBub3QgcGFzc2VkLCBkZWZhdWx0cyB0byBgd2luZG93LnBhZ2VZT2Zmc2V0YC5cbiAgICovXG4gIF9jYWxjKGNoZWNrU2l6ZXMsIHNjcm9sbCkge1xuICAgIGlmIChjaGVja1NpemVzKSB7IHRoaXMuX3NldFNpemVzKCk7IH1cblxuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzY3JvbGwpIHsgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0OyB9XG5cbiAgICBpZiAoc2Nyb2xsID49IHRoaXMudG9wUG9pbnQpIHtcbiAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3NldFN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgc3R1Y2suXG4gICAqIEFkZHMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTdGlja3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICBtcmduID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fTtcblxuICAgIGNzc1ttcmduXSA9IGAke3RoaXMub3B0aW9uc1ttcmduXX1lbWA7XG4gICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICBjc3Nbbm90U3R1Y2tUb10gPSAnYXV0byc7XG4gICAgY3NzWydsZWZ0J10gPSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkubGVmdCArIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSlbXCJwYWRkaW5nLWxlZnRcIl0sIDEwKTtcbiAgICB0aGlzLmlzU3R1Y2sgPSB0cnVlO1xuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYGlzLWFuY2hvcmVkIGlzLWF0LSR7bm90U3R1Y2tUb31gKVxuICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYGlzLXN0dWNrIGlzLWF0LSR7c3RpY2tUb31gKVxuICAgICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYHBvc2l0aW9uOiBmaXhlZDtgXG4gICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi5zdHVja3RvOnRvcGBcbiAgICAgICAgICAgICAgICAgICogQGV2ZW50IFN0aWNreSNzdHVja3RvXG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAudHJpZ2dlcihgc3RpY2t5LnpmLnN0dWNrdG86JHtzdGlja1RvfWApO1xuICAgIHRoaXMuJGVsZW1lbnQub24oXCJ0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgTVNUcmFuc2l0aW9uRW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMuX3NldFNpemVzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgdW5zdHVjay5cbiAgICogUmVtb3ZlcyBgcG9zaXRpb246IGZpeGVkO2AsIGFuZCBoZWxwZXIgY2xhc3Nlcy5cbiAgICogQWRkcyBvdGhlciBoZWxwZXIgY2xhc3Nlcy5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1RvcCAtIHRlbGxzIHRoZSBmdW5jdGlvbiBpZiB0aGUgJGVsZW1lbnQgc2hvdWxkIGFuY2hvciB0byB0aGUgdG9wIG9yIGJvdHRvbSBvZiBpdHMgJGFuY2hvciBlbGVtZW50LlxuICAgKiBAZmlyZXMgU3RpY2t5I3Vuc3R1Y2tmcm9tXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVtb3ZlU3RpY2t5KGlzVG9wKSB7XG4gICAgdmFyIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgc3RpY2tUb1RvcCA9IHN0aWNrVG8gPT09ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fSxcbiAgICAgICAgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMucG9pbnRzWzBdIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0LFxuICAgICAgICBtcmduID0gc3RpY2tUb1RvcCA/ICdtYXJnaW5Ub3AnIDogJ21hcmdpbkJvdHRvbScsXG4gICAgICAgIG5vdFN0dWNrVG8gPSBzdGlja1RvVG9wID8gJ2JvdHRvbScgOiAndG9wJyxcbiAgICAgICAgdG9wT3JCb3R0b20gPSBpc1RvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XG5cbiAgICBjc3NbbXJnbl0gPSAwO1xuXG4gICAgY3NzWydib3R0b20nXSA9ICdhdXRvJztcbiAgICBpZihpc1RvcCkge1xuICAgICAgY3NzWyd0b3AnXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1sndG9wJ10gPSBhbmNob3JQdDtcbiAgICB9XG5cbiAgICBjc3NbJ2xlZnQnXSA9ICcnO1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYGlzLXN0dWNrIGlzLWF0LSR7c3RpY2tUb31gKVxuICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYGlzLWFuY2hvcmVkIGlzLWF0LSR7dG9wT3JCb3R0b219YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGFuY2hvcmVkLlxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYudW5zdHVja2Zyb206Ym90dG9tYFxuICAgICAgICAgICAgICAgICAgKiBAZXZlbnQgU3RpY2t5I3Vuc3R1Y2tmcm9tXG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAudHJpZ2dlcihgc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOiR7dG9wT3JCb3R0b219YCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgJGVsZW1lbnQgYW5kICRjb250YWluZXIgc2l6ZXMgZm9yIHBsdWdpbi5cbiAgICogQ2FsbHMgYF9zZXRCcmVha1BvaW50c2AuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbiBjb21wbGV0aW9uIG9mIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFNpemVzKGNiKSB7XG4gICAgdGhpcy5jYW5TdGljayA9IEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5zdGlja3lPbik7XG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7IGNiKCk7IH1cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBuZXdFbGVtV2lkdGggPSB0aGlzLiRjb250YWluZXJbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICAgIGNvbXAgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiRjb250YWluZXJbMF0pLFxuICAgICAgICBwZG5nID0gcGFyc2VJbnQoY29tcFsncGFkZGluZy1yaWdodCddLCAxMCk7XG5cbiAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYW5jaG9ySGVpZ2h0ID0gdGhpcy4kYW5jaG9yWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VQb2ludHMoKTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICAnbWF4LXdpZHRoJzogYCR7bmV3RWxlbVdpZHRoIC0gcGRuZ31weGBcbiAgICB9KTtcblxuICAgIHZhciBuZXdDb250YWluZXJIZWlnaHQgPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCB8fCB0aGlzLmNvbnRhaW5lckhlaWdodDtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5jc3MoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiKSB7XG4gICAgICBuZXdDb250YWluZXJIZWlnaHQgPSAwO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lckhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcbiAgICB0aGlzLiRjb250YWluZXIuY3NzKHtcbiAgICAgIGhlaWdodDogbmV3Q29udGFpbmVySGVpZ2h0XG4gICAgfSk7XG4gICAgdGhpcy5lbGVtSGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuXG4gIFx0aWYgKHRoaXMuaXNTdHVjaykge1xuICBcdFx0dGhpcy4kZWxlbWVudC5jc3Moe1wibGVmdFwiOnRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0ICsgcGFyc2VJbnQoY29tcFsncGFkZGluZy1sZWZ0J10sIDEwKX0pO1xuICBcdH1cblxuICAgIHRoaXMuX3NldEJyZWFrUG9pbnRzKG5ld0NvbnRhaW5lckhlaWdodCwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2IpIHsgY2IoKTsgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVwcGVyIGFuZCBsb3dlciBicmVha3BvaW50cyBmb3IgdGhlIGVsZW1lbnQgdG8gYmVjb21lIHN0aWNreS91bnN0aWNreS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsZW1IZWlnaHQgLSBweCB2YWx1ZSBmb3Igc3RpY2t5LiRlbGVtZW50IGhlaWdodCwgY2FsY3VsYXRlZCBieSBgX3NldFNpemVzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gY29tcGxldGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRCcmVha1BvaW50cyhlbGVtSGVpZ2h0LCBjYikge1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiKSB7IGNiKCk7IH1cbiAgICAgIGVsc2UgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG4gICAgdmFyIG1Ub3AgPSBlbUNhbGModGhpcy5vcHRpb25zLm1hcmdpblRvcCksXG4gICAgICAgIG1CdG0gPSBlbUNhbGModGhpcy5vcHRpb25zLm1hcmdpbkJvdHRvbSksXG4gICAgICAgIHRvcFBvaW50ID0gdGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1swXSA6IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AsXG4gICAgICAgIGJvdHRvbVBvaW50ID0gdGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSA6IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQsXG4gICAgICAgIC8vIHRvcFBvaW50ID0gdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCB8fCB0aGlzLnBvaW50c1swXSxcbiAgICAgICAgLy8gYm90dG9tUG9pbnQgPSB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0IHx8IHRoaXMucG9pbnRzWzFdLFxuICAgICAgICB3aW5IZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICd0b3AnKSB7XG4gICAgICB0b3BQb2ludCAtPSBtVG9wO1xuICAgICAgYm90dG9tUG9pbnQgLT0gKGVsZW1IZWlnaHQgKyBtVG9wKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAnYm90dG9tJykge1xuICAgICAgdG9wUG9pbnQgLT0gKHdpbkhlaWdodCAtIChlbGVtSGVpZ2h0ICsgbUJ0bSkpO1xuICAgICAgYm90dG9tUG9pbnQgLT0gKHdpbkhlaWdodCAtIG1CdG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3RoaXMgd291bGQgYmUgdGhlIHN0aWNrVG86IGJvdGggb3B0aW9uLi4uIHRyaWNreVxuICAgIH1cblxuICAgIHRoaXMudG9wUG9pbnQgPSB0b3BQb2ludDtcbiAgICB0aGlzLmJvdHRvbVBvaW50ID0gYm90dG9tUG9pbnQ7XG5cbiAgICBpZiAoY2IpIHsgY2IoKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IHN0aWNreSBlbGVtZW50LlxuICAgKiBSZXNldHMgdGhlIGVsZW1lbnQgdG8gdGhlIHRvcCBwb3NpdGlvbiBmaXJzdC5cbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMsIEpTLWFkZGVkIGNzcyBwcm9wZXJ0aWVzIGFuZCBjbGFzc2VzLCBhbmQgdW53cmFwcyB0aGUgJGVsZW1lbnQgaWYgdGhlIEpTIGFkZGVkIHRoZSAkY29udGFpbmVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgJHt0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3N9IGlzLWFuY2hvcmVkIGlzLWF0LXRvcGApXG4gICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICAgICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiAnJ1xuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub2ZmKCdjaGFuZ2UuemYuc3RpY2t5Jyk7XG4gICAgfVxuICAgICQod2luZG93KS5vZmYodGhpcy5zY3JvbGxMaXN0ZW5lcik7XG5cbiAgICBpZiAodGhpcy53YXNXcmFwcGVkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU3RpY2t5LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ3VzdG9taXphYmxlIGNvbnRhaW5lciB0ZW1wbGF0ZS4gQWRkIHlvdXIgb3duIGNsYXNzZXMgZm9yIHN0eWxpbmcgYW5kIHNpemluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnJmx0O2RpdiBkYXRhLXN0aWNreS1jb250YWluZXIgY2xhc3M9XCJzbWFsbC02IGNvbHVtbnNcIiZndDsmbHQ7L2RpdiZndDsnXG4gICAqL1xuICBjb250YWluZXI6ICc8ZGl2IGRhdGEtc3RpY2t5LWNvbnRhaW5lcj48L2Rpdj4nLFxuICAvKipcbiAgICogTG9jYXRpb24gaW4gdGhlIHZpZXcgdGhlIGVsZW1lbnQgc3RpY2tzIHRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBzdGlja1RvOiAndG9wJyxcbiAgLyoqXG4gICAqIElmIGFuY2hvcmVkIHRvIGEgc2luZ2xlIGVsZW1lbnQsIHRoZSBpZCBvZiB0aGF0IGVsZW1lbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZCdcbiAgICovXG4gIGFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgYXMgYW5jaG9yIHBvaW50cywgdGhlIGlkIG9mIHRoZSB0b3AgYW5jaG9yLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdleGFtcGxlSWQ6dG9wJ1xuICAgKi9cbiAgdG9wQW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIGJvdHRvbSBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZDpib3R0b20nXG4gICAqL1xuICBidG1BbmNob3I6ICcnLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIG1hcmdpblRvcDogMSxcbiAgLyoqXG4gICAqIE1hcmdpbiwgaW4gYGVtYCdzIHRvIGFwcGx5IHRvIHRoZSBib3R0b20gb2YgdGhlIGVsZW1lbnQgd2hlbiBpdCBiZWNvbWVzIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICBtYXJnaW5Cb3R0b206IDEsXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IHN0cmluZyB0aGF0IGlzIHRoZSBtaW5pbXVtIHNjcmVlbiBzaXplIGFuIGVsZW1lbnQgc2hvdWxkIGJlY29tZSBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIHN0aWNreU9uOiAnbWVkaXVtJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGVsZW1lbnQsIGFuZCByZW1vdmVkIG9uIGRlc3RydWN0aW9uLiBGb3VuZGF0aW9uIGRlZmF1bHRzIHRvIGBzdGlja3lgLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzdGlja3knXG4gICAqL1xuICBzdGlja3lDbGFzczogJ3N0aWNreScsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHN0aWNreSBjb250YWluZXIuIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreS1jb250YWluZXJgLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzdGlja3ktY29udGFpbmVyJ1xuICAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdzdGlja3ktY29udGFpbmVyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBzY3JvbGwgZXZlbnRzIGJldHdlZW4gdGhlIHBsdWdpbidzIHJlY2FsY3VsYXRpbmcgc3RpY2t5IHBvaW50cy4gU2V0dGluZyBpdCB0byBgMGAgd2lsbCBjYXVzZSBpdCB0byByZWNhbGMgZXZlcnkgc2Nyb2xsIGV2ZW50LCBzZXR0aW5nIGl0IHRvIGAtMWAgd2lsbCBwcmV2ZW50IHJlY2FsYyBvbiBzY3JvbGwuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTBcbiAgICovXG4gIGNoZWNrRXZlcnk6IC0xXG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgZW0gdmFsdWVzXG4gKiBAcGFyYW0gTnVtYmVyIHtlbX0gLSBudW1iZXIgb2YgZW0ncyB0byBjYWxjdWxhdGUgaW50byBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZW1DYWxjKGVtKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKS5mb250U2l6ZSwgMTApICogZW07XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihTdGlja3ksICdTdGlja3knKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRhYnMgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRhYnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlciBpZiB0YWJzIGNvbnRhaW4gaW1hZ2VzXG4gKi9cblxuY2xhc3MgVGFicyB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRhYnMuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVGFicyNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gdGFicy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUYWJzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnVGFicycpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ1RhYnMnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnbmV4dCcsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgIC8vICdUQUInOiAnbmV4dCcsXG4gICAgICAvLyAnU0hJRlRfVEFCJzogJ3ByZXZpb3VzJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWJzIGJ5IHNob3dpbmcgYW5kIGZvY3VzaW5nIChpZiBhdXRvRm9jdXM9dHJ1ZSkgdGhlIHByZXNldCBhY3RpdmUgdGFiLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJHRhYlRpdGxlcyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKTtcbiAgICB0aGlzLiR0YWJDb250ZW50ID0gJChgW2RhdGEtdGFicy1jb250ZW50PVwiJHt0aGlzLiRlbGVtZW50WzBdLmlkfVwiXWApO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgJGxpbmsgPSAkZWxlbS5maW5kKCdhJyksXG4gICAgICAgICAgaXNBY3RpdmUgPSAkZWxlbS5oYXNDbGFzcygnaXMtYWN0aXZlJyksXG4gICAgICAgICAgaGFzaCA9ICRsaW5rWzBdLmhhc2guc2xpY2UoMSksXG4gICAgICAgICAgbGlua0lkID0gJGxpbmtbMF0uaWQgPyAkbGlua1swXS5pZCA6IGAke2hhc2h9LWxhYmVsYCxcbiAgICAgICAgICAkdGFiQ29udGVudCA9ICQoYCMke2hhc2h9YCk7XG5cbiAgICAgICRlbGVtLmF0dHIoeydyb2xlJzogJ3ByZXNlbnRhdGlvbid9KTtcblxuICAgICAgJGxpbmsuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaGFzaCxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgJHRhYkNvbnRlbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogIWlzQWN0aXZlLFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgaWYoaXNBY3RpdmUgJiYgX3RoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgICAkbGluay5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICB2YXIgJGltYWdlcyA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnaW1nJyk7XG5cbiAgICAgIGlmICgkaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKCRpbWFnZXMsIHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NldEhlaWdodCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy5fYWRkS2V5SGFuZGxlcigpO1xuICAgIHRoaXMuX2FkZENsaWNrSGFuZGxlcigpO1xuICAgIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciA9IG51bGw7XG4gICAgXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcyk7XG4gICAgICBcbiAgICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBjbGljayBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZENsaWNrSGFuZGxlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9mZignY2xpY2suemYudGFicycpXG4gICAgICAub24oJ2NsaWNrLnpmLnRhYnMnLCBgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gLCBmdW5jdGlvbihlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkKHRoaXMpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRLZXlIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyICRmaXJzdFRhYiA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ2xpOmZpcnN0LW9mLXR5cGUnKTtcbiAgICB2YXIgJGxhc3RUYWIgPSBfdGhpcy4kZWxlbWVudC5maW5kKCdsaTpsYXN0LW9mLXR5cGUnKTtcblxuICAgIHRoaXMuJHRhYlRpdGxlcy5vZmYoJ2tleWRvd24uemYudGFicycpLm9uKCdrZXlkb3duLnpmLnRhYnMnLCBmdW5jdGlvbihlKXtcbiAgICAgIGlmIChlLndoaWNoID09PSA5KSByZXR1cm47XG4gICAgICBcblxuICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKSxcbiAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLmNoaWxkcmVuKCdsaScpLFxuICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy53cmFwT25LZXlzKSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSBpID09PSAwID8gJGVsZW1lbnRzLmxhc3QoKSA6ICRlbGVtZW50cy5lcShpLTEpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gaSA9PT0gJGVsZW1lbnRzLmxlbmd0aCAtMSA/ICRlbGVtZW50cy5maXJzdCgpIDogJGVsZW1lbnRzLmVxKGkrMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpLTEpKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpKzEsICRlbGVtZW50cy5sZW5ndGgtMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnVGFicycsIHtcbiAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJGVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRwcmV2RWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkbmV4dEVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIHRhYiBgJHRhcmdldENvbnRlbnRgIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIFRhYiB0byBvcGVuLlxuICAgKiBAZmlyZXMgVGFicyNjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfaGFuZGxlVGFiQ2hhbmdlKCR0YXJnZXQpIHtcbiAgICB2YXIgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgIGhhc2ggPSAkdGFiTGlua1swXS5oYXNoLFxuICAgICAgICAkdGFyZ2V0Q29udGVudCA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZChoYXNoKSxcbiAgICAgICAgJG9sZFRhYiA9IHRoaXMuJGVsZW1lbnQuXG4gICAgICAgICAgZmluZChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc30uaXMtYWN0aXZlYClcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpXG4gICAgICAgICAgLmZpbmQoJ1tyb2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cih7ICdhcmlhLXNlbGVjdGVkJzogJ2ZhbHNlJyB9KTtcblxuICAgICQoYCMkeyRvbGRUYWIuYXR0cignYXJpYS1jb250cm9scycpfWApXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpXG4gICAgICAuYXR0cih7ICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9KTtcblxuICAgICR0YXJnZXQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgJHRhYkxpbmsuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZSd9KTtcblxuICAgICR0YXJnZXRDb250ZW50XG4gICAgICAuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpXG4gICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ30pO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGhhcyBzdWNjZXNzZnVsbHkgY2hhbmdlZCB0YWJzLlxuICAgICAqIEBldmVudCBUYWJzI2NoYW5nZVxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2hhbmdlLnpmLnRhYnMnLCBbJHRhcmdldF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgZm9yIHNlbGVjdGluZyBhIGNvbnRlbnQgcGFuZSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0ge2pRdWVyeSB8IFN0cmluZ30gZWxlbSAtIGpRdWVyeSBvYmplY3Qgb3Igc3RyaW5nIG9mIHRoZSBpZCBvZiB0aGUgcGFuZSB0byBkaXNwbGF5LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHNlbGVjdFRhYihlbGVtKSB7XG4gICAgdmFyIGlkU3RyO1xuXG4gICAgaWYgKHR5cGVvZiBlbGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgaWRTdHIgPSBlbGVtWzBdLmlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZFN0ciA9IGVsZW07XG4gICAgfVxuXG4gICAgaWYgKGlkU3RyLmluZGV4T2YoJyMnKSA8IDApIHtcbiAgICAgIGlkU3RyID0gYCMke2lkU3RyfWA7XG4gICAgfVxuXG4gICAgdmFyICR0YXJnZXQgPSB0aGlzLiR0YWJUaXRsZXMuZmluZChgW2hyZWY9XCIke2lkU3RyfVwiXWApLnBhcmVudChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKTtcblxuICAgIHRoaXMuX2hhbmRsZVRhYkNoYW5nZSgkdGFyZ2V0KTtcbiAgfTtcbiAgLyoqXG4gICAqIFNldHMgdGhlIGhlaWdodCBvZiBlYWNoIHBhbmVsIHRvIHRoZSBoZWlnaHQgb2YgdGhlIHRhbGxlc3QgcGFuZWwuXG4gICAqIElmIGVuYWJsZWQgaW4gb3B0aW9ucywgZ2V0cyBjYWxsZWQgb24gbWVkaWEgcXVlcnkgY2hhbmdlLlxuICAgKiBJZiBsb2FkaW5nIGNvbnRlbnQgdmlhIGV4dGVybmFsIHNvdXJjZSwgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSBvciB3aXRoIF9yZWZsb3cuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldEhlaWdodCgpIHtcbiAgICB2YXIgbWF4ID0gMDtcbiAgICB0aGlzLiR0YWJDb250ZW50XG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLnBhbmVsQ2xhc3N9YClcbiAgICAgIC5jc3MoJ2hlaWdodCcsICcnKVxuICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYW5lbCA9ICQodGhpcyksXG4gICAgICAgICAgICBpc0FjdGl2ZSA9IHBhbmVsLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHsndmlzaWJpbGl0eSc6ICdoaWRkZW4nLCAnZGlzcGxheSc6ICdibG9jayd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZW1wID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgIHBhbmVsLmNzcyh7XG4gICAgICAgICAgICAndmlzaWJpbGl0eSc6ICcnLFxuICAgICAgICAgICAgJ2Rpc3BsYXknOiAnJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF4ID0gdGVtcCA+IG1heCA/IHRlbXAgOiBtYXg7XG4gICAgICB9KVxuICAgICAgLmNzcygnaGVpZ2h0JywgYCR7bWF4fXB4YCk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYW4gdGFicy5cbiAgICogQGZpcmVzIFRhYnMjZGVzdHJveWVkXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApXG4gICAgICAub2ZmKCcuemYudGFicycpLmhpZGUoKS5lbmQoKVxuICAgICAgLmZpbmQoYC4ke3RoaXMub3B0aW9ucy5wYW5lbENsYXNzfWApXG4gICAgICAuaGlkZSgpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgaWYgKHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAkKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5UYWJzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgYWN0aXZlIHBhbmUgb24gbG9hZCBpZiBzZXQgdG8gdHJ1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcblxuICAvKipcbiAgICogQWxsb3dzIGtleWJvYXJkIGlucHV0IHRvICd3cmFwJyBhcm91bmQgdGhlIHRhYiBsaW5rcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICB3cmFwT25LZXlzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRhYiBjb250ZW50IHBhbmVzIHRvIG1hdGNoIGhlaWdodHMgaWYgc2V0IHRvIHRydWUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIG1hdGNoSGVpZ2h0OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBgbGlgJ3MgaW4gdGFiIGxpbmsgbGlzdC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndGFicy10aXRsZSdcbiAgICovXG4gIGxpbmtDbGFzczogJ3RhYnMtdGl0bGUnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBjb250ZW50IGNvbnRhaW5lcnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RhYnMtcGFuZWwnXG4gICAqL1xuICBwYW5lbENsYXNzOiAndGFicy1wYW5lbCdcbn07XG5cbmZ1bmN0aW9uIGNoZWNrQ2xhc3MoJGVsZW0pe1xuICByZXR1cm4gJGVsZW0uaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVGFicywgJ1RhYnMnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRvZ2dsZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvZ2dsZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgVG9nZ2xlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRvZ2dsZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9nZ2xlciNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9nZ2xlci5kZWZhdWx0cywgZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUb2dnbGVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFRvZ2dsZXIgcGx1Z2luIGJ5IHBhcnNpbmcgdGhlIHRvZ2dsZSBjbGFzcyBmcm9tIGRhdGEtdG9nZ2xlciwgb3IgYW5pbWF0aW9uIGNsYXNzZXMgZnJvbSBkYXRhLWFuaW1hdGUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGlucHV0O1xuICAgIC8vIFBhcnNlIGFuaW1hdGlvbiBjbGFzc2VzIGlmIHRoZXkgd2VyZSBzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgIGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBpbnB1dFsxXSB8fCBudWxsO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIHBhcnNlIHRvZ2dsZSBjbGFzc1xuICAgIGVsc2Uge1xuICAgICAgaW5wdXQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RvZ2dsZXInKTtcbiAgICAgIC8vIEFsbG93IGZvciBhIC4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IGlucHV0WzBdID09PSAnLicgPyBpbnB1dC5zbGljZSgxKSA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIEFkZCBBUklBIGF0dHJpYnV0ZXMgdG8gdHJpZ2dlcnNcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkO1xuICAgICQoYFtkYXRhLW9wZW49XCIke2lkfVwiXSwgW2RhdGEtY2xvc2U9XCIke2lkfVwiXSwgW2RhdGEtdG9nZ2xlPVwiJHtpZH1cIl1gKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgLy8gSWYgdGhlIHRhcmdldCBpcyBoaWRkZW4sIGFkZCBhcmlhLWhpZGRlblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSA/IGZhbHNlIDogdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgdG9nZ2xlIHRyaWdnZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZigndG9nZ2xlLnpmLnRyaWdnZXInKS5vbigndG9nZ2xlLnpmLnRyaWdnZXInLCB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSB0YXJnZXQgY2xhc3Mgb24gdGhlIHRhcmdldCBlbGVtZW50LiBBbiBldmVudCBpcyBmaXJlZCBmcm9tIHRoZSBvcmlnaW5hbCB0cmlnZ2VyIGRlcGVuZGluZyBvbiBpZiB0aGUgcmVzdWx0YW50IHN0YXRlIHdhcyBcIm9uXCIgb3IgXCJvZmZcIi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29mZlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXNbIHRoaXMub3B0aW9ucy5hbmltYXRlID8gJ190b2dnbGVBbmltYXRlJyA6ICdfdG9nZ2xlQ2xhc3MnXSgpO1xuICB9XG5cbiAgX3RvZ2dsZUNsYXNzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuXG4gICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICBpZiAoaXNPbikge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAqIEBldmVudCBUb2dnbGVyI29uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaWYgdGhlIHRhcmdldCBlbGVtZW50IGRvZXMgbm90IGhhdmUgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb2ZmLnpmLnRvZ2dsZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVBUklBKGlzT24pO1xuICB9XG5cbiAgX3RvZ2dsZUFuaW1hdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbkluLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEodHJ1ZSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbk91dCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKGZhbHNlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZUFSSUEoaXNPbikge1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT24gPyB0cnVlIDogZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiBUb2dnbGVyIG9uIHRoZSBlbGVtZW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50b2dnbGVyJyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblRvZ2dsZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUZWxscyB0aGUgcGx1Z2luIGlmIHRoZSBlbGVtZW50IHNob3VsZCBhbmltYXRlZCB3aGVuIHRvZ2dsZWQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVG9nZ2xlciwgJ1RvZ2dsZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRvb2x0aXAgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvb2x0aXBcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgVG9vbHRpcCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgVG9vbHRpcC5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUb29sdGlwI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCBhIHRvb2x0aXAgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb2JqZWN0IHRvIGV4dGVuZCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUb29sdGlwLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnVG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0b29sdGlwIGJ5IHNldHRpbmcgdGhlIGNyZWF0aW5nIHRoZSB0aXAgZWxlbWVudCwgYWRkaW5nIGl0J3MgdGV4dCwgc2V0dGluZyBwcml2YXRlIHZhcmlhYmxlcyBhbmQgc2V0dGluZyBhdHRyaWJ1dGVzIG9uIHRoZSBhbmNob3IuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgZWxlbUlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAndG9vbHRpcCcpO1xuXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcyB8fCB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMub3B0aW9ucy50aXBUZXh0ID0gdGhpcy5vcHRpb25zLnRpcFRleHQgfHwgdGhpcy4kZWxlbWVudC5hdHRyKCd0aXRsZScpO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUgPyAkKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSkgOiB0aGlzLl9idWlsZFRlbXBsYXRlKGVsZW1JZCk7XG5cbiAgICB0aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG4gICAgICAgIC50ZXh0KHRoaXMub3B0aW9ucy50aXBUZXh0KVxuICAgICAgICAuaGlkZSgpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICd0aXRsZSc6ICcnLFxuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBlbGVtSWQsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6IGVsZW1JZCxcbiAgICAgICdkYXRhLXRvZ2dsZSc6IGVsZW1JZCxcbiAgICAgICdkYXRhLXJlc2l6ZSc6IGVsZW1JZFxuICAgIH0pLmFkZENsYXNzKHRoaXMudHJpZ2dlckNsYXNzKTtcblxuICAgIC8vaGVscGVyIHZhcmlhYmxlcyB0byB0cmFjayBtb3ZlbWVudCBvbiBjb2xsaXNpb25zXG4gICAgdGhpcy51c2VkUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogR3JhYnMgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgY2xhc3MsIGlmIHByZXNlbnQsIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBvciBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UG9zaXRpb25DbGFzcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7IHJldHVybiAnJzsgfVxuICAgIC8vIHZhciBwb3NpdGlvbiA9IGVsZW1lbnQuYXR0cignY2xhc3MnKS5tYXRjaCgvdG9wfGxlZnR8cmlnaHQvZyk7XG4gICAgdmFyIHBvc2l0aW9uID0gZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goL1xcYih0b3B8bGVmdHxyaWdodClcXGIvZyk7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICcnO1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAqIGJ1aWxkcyB0aGUgdG9vbHRpcCBlbGVtZW50LCBhZGRzIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm5zIHRoZSB0ZW1wbGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZFRlbXBsYXRlKGlkKSB7XG4gICAgdmFyIHRlbXBsYXRlQ2xhc3NlcyA9IChgJHt0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzfSAke3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzfSAke3RoaXMub3B0aW9ucy50ZW1wbGF0ZUNsYXNzZXN9YCkudHJpbSgpO1xuICAgIHZhciAkdGVtcGxhdGUgPSAgJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcyh0ZW1wbGF0ZUNsYXNzZXMpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2UsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICByZXR1cm4gJHRlbXBsYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgaWYgYSBjb2xsaXNpb24gZXZlbnQgaXMgZGV0ZWN0ZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uaW5nIGNsYXNzIHRvIHRyeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuXG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZiAoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5hZGRDbGFzcygndG9wJyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdyaWdodCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICAvL2lmIGRlZmF1bHQgY2hhbmdlIGRpZG4ndCB3b3JrLCB0cnkgYm90dG9tIG9yIGxlZnQgZmlyc3RcbiAgICBlbHNlIGlmICghcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgKiBpZiB0aGUgdG9vbHRpcCBpcyBsYXJnZXIgdGhhbiB0aGUgc2NyZWVuIHdpZHRoLCBkZWZhdWx0IHRvIGZ1bGwgd2lkdGggLSBhbnkgdXNlciBzZWxlY3RlZCBtYXJnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMudGVtcGxhdGUpLFxuICAgICAgICAkdGlwRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy50ZW1wbGF0ZSksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICgoJHRpcERpbXMud2lkdGggPj0gJHRpcERpbXMud2luZG93RGltcy53aWR0aCkgfHwgKCF0aGlzLmNvdW50ZXIgJiYgIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkpKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCAnY2VudGVyIGJvdHRvbScsIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCwgdHJ1ZSkpLmNzcyh7XG4gICAgICAgICd3aWR0aCc6ICRhbmNob3JEaW1zLndpbmRvd0RpbXMud2lkdGggLSAodGhpcy5vcHRpb25zLmhPZmZzZXQgKiAyKSxcbiAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZW1wbGF0ZS5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCdjZW50ZXIgJyArIChwb3NpdGlvbiB8fCAnYm90dG9tJyksIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkgJiYgdGhpcy5jb3VudGVyKSB7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgKiBAZmlyZXMgVG9vbHRpcCNjbG9zZW1lXG4gICAqIEBmaXJlcyBUb29sdGlwI3Nob3dcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd09uICE9PSAnYWxsJyAmJiAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLnNob3dPbikpIHtcbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1RoZSBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkgdGhpcyB0b29sdGlwJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnRlbXBsYXRlLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5zaG93KCk7XG4gICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIGFsbCBvdGhlciBvcGVuIHRvb2x0aXBzIG9uIHRoZSBwYWdlXG4gICAgICogQGV2ZW50IENsb3NlbWUjdG9vbHRpcFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi50b29sdGlwJywgdGhpcy50ZW1wbGF0ZS5hdHRyKCdpZCcpKTtcblxuXG4gICAgdGhpcy50ZW1wbGF0ZS5hdHRyKHtcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IHRydWUsXG4gICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZVxuICAgIH0pO1xuICAgIF90aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKTtcbiAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5oaWRlKCkuY3NzKCd2aXNpYmlsaXR5JywgJycpLmZhZGVJbih0aGlzLm9wdGlvbnMuZmFkZUluRHVyYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgLy9tYXliZSBkbyBzdHVmZj9cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIHNob3duXG4gICAgICogQGV2ZW50IFRvb2x0aXAjc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi50b29sdGlwJyk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIGN1cnJlbnQgdG9vbHRpcCwgYW5kIHJlc2V0cyB0aGUgcG9zaXRpb25pbmcgY2xhc3MgaWYgaXQgd2FzIGNoYW5nZWQgZHVlIHRvIGNvbGxpc2lvblxuICAgKiBAZmlyZXMgVG9vbHRpcCNoaWRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnaGlkaW5nJywgdGhpcy4kZWxlbWVudC5kYXRhKCd5ZXRpLWJveCcpKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGVtcGxhdGUuc3RvcCgpLmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlXG4gICAgfSkuZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZU91dER1cmF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICBpZiAoX3RoaXMuY2xhc3NDaGFuZ2VkKSB7XG4gICAgICAgIF90aGlzLnRlbXBsYXRlXG4gICAgICAgICAgICAgLnJlbW92ZUNsYXNzKF90aGlzLl9nZXRQb3NpdGlvbkNsYXNzKF90aGlzLnRlbXBsYXRlKSlcbiAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzKTtcblxuICAgICAgIF90aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICAgICBfdGhpcy5jb3VudGVyID0gNDtcbiAgICAgICBfdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBmaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIGhpZGRlblxuICAgICAqIEBldmVudCBUb29sdGlwI2hpZGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYudG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgdG9vbHRpcCBhbmQgaXRzIGFuY2hvclxuICAgKiBUT0RPIGNvbWJpbmUgc29tZSBvZiB0aGUgbGlzdGVuZXJzIGxpa2UgZm9jdXMgYW5kIG1vdXNlZW50ZXIsIGV0Yy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcbiAgICB2YXIgaXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzYWJsZUhvdmVyKSB7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgIGlmICghaXNGb2N1cyB8fCAoX3RoaXMuaXNDbGljayAmJiAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4pKSB7XG4gICAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy9fdGhpcy5oaWRlKCk7XG4gICAgICAgICAgLy8gX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIGlmICgoX3RoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIgfHwgIV90aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykpICYmICFfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZG93bi56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVGb3JUb3VjaCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCd0YXAuemYudG9vbHRpcCB0b3VjaGVuZC56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBfdGhpcy5pc0FjdGl2ZSA/IF90aGlzLmhpZGUoKSA6IF90aGlzLnNob3coKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgLy8gJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgIC8vICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignZm9jdXMuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IHRydWU7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgbm90IHNob3dpbmcgb3BlbiBvbiBjbGlja3MsIHdlIG5lZWQgdG8gcHJldGVuZCBhIGNsaWNrLWxhdW5jaGVkIGZvY3VzIGlzbid0XG4gICAgICAgICAgLy8gYSByZWFsIGZvY3VzLCBvdGhlcndpc2Ugb24gaG92ZXIgYW5kIGNvbWUgYmFjayB3ZSBnZXQgYmFkIGJlaGF2aW9yXG4gICAgICAgICAgaWYoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IGlzRm9jdXMgPSBmYWxzZTsgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC5vbignZm9jdXNvdXQuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgIH0pXG5cbiAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICBfdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogYWRkcyBhIHRvZ2dsZSBtZXRob2QsIGluIGFkZGl0aW9uIHRvIHRoZSBzdGF0aWMgc2hvdygpICYgaGlkZSgpIGZ1bmN0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiB0b29sdGlwLCByZW1vdmVzIHRlbXBsYXRlIGVsZW1lbnQgZnJvbSB0aGUgdmlldy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnLCB0aGlzLnRlbXBsYXRlLnRleHQoKSlcbiAgICAgICAgICAgICAgICAgLm9mZignLnpmLnRyaWdnZXIgLnpmLnRvb3RpcCcpXG4gICAgICAgICAgICAgICAgLy8gIC5yZW1vdmVDbGFzcygnaGFzLXRpcCcpXG4gICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEteWV0aS1ib3gnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS10b2dnbGUnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1yZXNpemUnKTtcblxuICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlKCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9vbHRpcC5kZWZhdWx0cyA9IHtcbiAgZGlzYWJsZUZvclRvdWNoOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBiZWZvcmUgYSB0b29sdGlwIHNob3VsZCBvcGVuIG9uIGhvdmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDIwMFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIGludG8gdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxNTBcbiAgICovXG4gIGZhZGVJbkR1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgb3V0IG9mIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTUwXG4gICAqL1xuICBmYWRlT3V0RHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIERpc2FibGVzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgdGhlIHRvb2x0aXAgaWYgc2V0IHRvIHRydWVcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFkZHRpb25hbCBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSB0b29sdGlwIHRlbXBsYXRlIG9uIGluaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ215LWNvb2wtdGlwLWNsYXNzJ1xuICAgKi9cbiAgdGVtcGxhdGVDbGFzc2VzOiAnJyxcbiAgLyoqXG4gICAqIE5vbi1vcHRpb25hbCBjbGFzcyBhZGRlZCB0byB0b29sdGlwIHRlbXBsYXRlcy4gRm91bmRhdGlvbiBkZWZhdWx0IGlzICd0b29sdGlwJy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndG9vbHRpcCdcbiAgICovXG4gIHRvb2x0aXBDbGFzczogJ3Rvb2x0aXAnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgdG9vbHRpcCBhbmNob3IgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnaGFzLXRpcCdcbiAgICovXG4gIHRyaWdnZXJDbGFzczogJ2hhcy10aXAnLFxuICAvKipcbiAgICogTWluaW11bSBicmVha3BvaW50IHNpemUgYXQgd2hpY2ggdG8gb3BlbiB0aGUgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc21hbGwnXG4gICAqL1xuICBzaG93T246ICdzbWFsbCcsXG4gIC8qKlxuICAgKiBDdXN0b20gdGVtcGxhdGUgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBtYXJrdXAgZm9yIHRvb2x0aXAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJyZsdDtkaXYgY2xhc3M9XCJ0b29sdGlwXCImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgdGVtcGxhdGU6ICcnLFxuICAvKipcbiAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnU29tZSBjb29sIHNwYWNlIGZhY3QgaGVyZS4nXG4gICAqL1xuICB0aXBUZXh0OiAnJyxcbiAgdG91Y2hDbG9zZVRleHQ6ICdUYXAgdG8gY2xvc2UuJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdG9vbHRpcCB0byByZW1haW4gb3BlbiBpZiB0cmlnZ2VyZWQgd2l0aCBhIGNsaWNrIG9yIHRvdWNoIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogdHJ1ZSxcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgcG9zaXRpb25pbmcgY2xhc3Nlcywgc2V0IGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWSBheGlzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICB2T2Zmc2V0OiAxMCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWCBheGlzLCBpZiBhbGlnbmVkIHRvIGEgc2lkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMlxuICAgKi9cbiAgaE9mZnNldDogMTJcbn07XG5cbi8qKlxuICogVE9ETyB1dGlsaXplIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gKi9cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFRvb2x0aXAsICdUb29sdGlwJyk7XG5cbn0oalF1ZXJ5KTsiLCIvKiEgTWFnbmlmaWMgUG9wdXAgLSB2MS4xLjAgLSAyMDE2LTAyLTIwXG4qIGh0dHA6Ly9kaW1zZW1lbm92LmNvbS9wbHVnaW5zL21hZ25pZmljLXBvcHVwL1xuKiBDb3B5cmlnaHQgKGMpIDIwMTYgRG1pdHJ5IFNlbWVub3Y7ICovXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7IFxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgeyBcbiAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuIFxuIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTsgXG4gfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHsgXG4gLy8gTm9kZS9Db21tb25KUyBcbiBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTsgXG4gfSBlbHNlIHsgXG4gLy8gQnJvd3NlciBnbG9iYWxzIFxuIGZhY3Rvcnkod2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG8pOyBcbiB9IFxuIH0oZnVuY3Rpb24oJCkgeyBcblxuLyo+PmNvcmUqL1xuLyoqXG4gKiBcbiAqIE1hZ25pZmljIFBvcHVwIENvcmUgSlMgZmlsZVxuICogXG4gKi9cblxuXG4vKipcbiAqIFByaXZhdGUgc3RhdGljIGNvbnN0YW50c1xuICovXG52YXIgQ0xPU0VfRVZFTlQgPSAnQ2xvc2UnLFxuXHRCRUZPUkVfQ0xPU0VfRVZFTlQgPSAnQmVmb3JlQ2xvc2UnLFxuXHRBRlRFUl9DTE9TRV9FVkVOVCA9ICdBZnRlckNsb3NlJyxcblx0QkVGT1JFX0FQUEVORF9FVkVOVCA9ICdCZWZvcmVBcHBlbmQnLFxuXHRNQVJLVVBfUEFSU0VfRVZFTlQgPSAnTWFya3VwUGFyc2UnLFxuXHRPUEVOX0VWRU5UID0gJ09wZW4nLFxuXHRDSEFOR0VfRVZFTlQgPSAnQ2hhbmdlJyxcblx0TlMgPSAnbWZwJyxcblx0RVZFTlRfTlMgPSAnLicgKyBOUyxcblx0UkVBRFlfQ0xBU1MgPSAnbWZwLXJlYWR5Jyxcblx0UkVNT1ZJTkdfQ0xBU1MgPSAnbWZwLXJlbW92aW5nJyxcblx0UFJFVkVOVF9DTE9TRV9DTEFTUyA9ICdtZnAtcHJldmVudC1jbG9zZSc7XG5cblxuLyoqXG4gKiBQcml2YXRlIHZhcnMgXG4gKi9cbi8qanNoaW50IC1XMDc5ICovXG52YXIgbWZwLCAvLyBBcyB3ZSBoYXZlIG9ubHkgb25lIGluc3RhbmNlIG9mIE1hZ25pZmljUG9wdXAgb2JqZWN0LCB3ZSBkZWZpbmUgaXQgbG9jYWxseSB0byBub3QgdG8gdXNlICd0aGlzJ1xuXHRNYWduaWZpY1BvcHVwID0gZnVuY3Rpb24oKXt9LFxuXHRfaXNKUSA9ICEhKHdpbmRvdy5qUXVlcnkpLFxuXHRfcHJldlN0YXR1cyxcblx0X3dpbmRvdyA9ICQod2luZG93KSxcblx0X2RvY3VtZW50LFxuXHRfcHJldkNvbnRlbnRUeXBlLFxuXHRfd3JhcENsYXNzZXMsXG5cdF9jdXJyUG9wdXBUeXBlO1xuXG5cbi8qKlxuICogUHJpdmF0ZSBmdW5jdGlvbnNcbiAqL1xudmFyIF9tZnBPbiA9IGZ1bmN0aW9uKG5hbWUsIGYpIHtcblx0XHRtZnAuZXYub24oTlMgKyBuYW1lICsgRVZFTlRfTlMsIGYpO1xuXHR9LFxuXHRfZ2V0RWwgPSBmdW5jdGlvbihjbGFzc05hbWUsIGFwcGVuZFRvLCBodG1sLCByYXcpIHtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRlbC5jbGFzc05hbWUgPSAnbWZwLScrY2xhc3NOYW1lO1xuXHRcdGlmKGh0bWwpIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IGh0bWw7XG5cdFx0fVxuXHRcdGlmKCFyYXcpIHtcblx0XHRcdGVsID0gJChlbCk7XG5cdFx0XHRpZihhcHBlbmRUbykge1xuXHRcdFx0XHRlbC5hcHBlbmRUbyhhcHBlbmRUbyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmKGFwcGVuZFRvKSB7XG5cdFx0XHRhcHBlbmRUby5hcHBlbmRDaGlsZChlbCk7XG5cdFx0fVxuXHRcdHJldHVybiBlbDtcblx0fSxcblx0X21mcFRyaWdnZXIgPSBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0bWZwLmV2LnRyaWdnZXJIYW5kbGVyKE5TICsgZSwgZGF0YSk7XG5cblx0XHRpZihtZnAuc3QuY2FsbGJhY2tzKSB7XG5cdFx0XHQvLyBjb252ZXJ0cyBcIm1mcEV2ZW50TmFtZVwiIHRvIFwiZXZlbnROYW1lXCIgY2FsbGJhY2sgYW5kIHRyaWdnZXJzIGl0IGlmIGl0J3MgcHJlc2VudFxuXHRcdFx0ZSA9IGUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBlLnNsaWNlKDEpO1xuXHRcdFx0aWYobWZwLnN0LmNhbGxiYWNrc1tlXSkge1xuXHRcdFx0XHRtZnAuc3QuY2FsbGJhY2tzW2VdLmFwcGx5KG1mcCwgJC5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtkYXRhXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRfZ2V0Q2xvc2VCdG4gPSBmdW5jdGlvbih0eXBlKSB7XG5cdFx0aWYodHlwZSAhPT0gX2N1cnJQb3B1cFR5cGUgfHwgIW1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG4pIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG4gPSAkKCBtZnAuc3QuY2xvc2VNYXJrdXAucmVwbGFjZSgnJXRpdGxlJScsIG1mcC5zdC50Q2xvc2UgKSApO1xuXHRcdFx0X2N1cnJQb3B1cFR5cGUgPSB0eXBlO1xuXHRcdH1cblx0XHRyZXR1cm4gbWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bjtcblx0fSxcblx0Ly8gSW5pdGlhbGl6ZSBNYWduaWZpYyBQb3B1cCBvbmx5IHdoZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0X2NoZWNrSW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcblx0XHRpZighJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlKSB7XG5cdFx0XHQvKmpzaGludCAtVzAyMCAqL1xuXHRcdFx0bWZwID0gbmV3IE1hZ25pZmljUG9wdXAoKTtcblx0XHRcdG1mcC5pbml0KCk7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgPSBtZnA7XG5cdFx0fVxuXHR9LFxuXHQvLyBDU1MgdHJhbnNpdGlvbiBkZXRlY3Rpb24sIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzI2NDg5OS9kZXRlY3QtY3NzLXRyYW5zaXRpb25zLXVzaW5nLWphdmFzY3JpcHQtYW5kLXdpdGhvdXQtbW9kZXJuaXpyXG5cdHN1cHBvcnRzVHJhbnNpdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZSwgLy8gJ3MnIGZvciBzdHlsZS4gYmV0dGVyIHRvIGNyZWF0ZSBhbiBlbGVtZW50IGlmIGJvZHkgeWV0IHRvIGV4aXN0XG5cdFx0XHR2ID0gWydtcycsJ08nLCdNb3onLCdXZWJraXQnXTsgLy8gJ3YnIGZvciB2ZW5kb3JcblxuXHRcdGlmKCBzWyd0cmFuc2l0aW9uJ10gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiB0cnVlOyBcblx0XHR9XG5cdFx0XHRcblx0XHR3aGlsZSggdi5sZW5ndGggKSB7XG5cdFx0XHRpZiggdi5wb3AoKSArICdUcmFuc2l0aW9uJyBpbiBzICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXG5cbi8qKlxuICogUHVibGljIGZ1bmN0aW9uc1xuICovXG5NYWduaWZpY1BvcHVwLnByb3RvdHlwZSA9IHtcblxuXHRjb25zdHJ1Y3RvcjogTWFnbmlmaWNQb3B1cCxcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgTWFnbmlmaWMgUG9wdXAgcGx1Z2luLiBcblx0ICogVGhpcyBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQgb25seSBvbmNlIHdoZW4gJC5mbi5tYWduaWZpY1BvcHVwIG9yICQubWFnbmlmaWNQb3B1cCBpcyBleGVjdXRlZFxuXHQgKi9cblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFwcFZlcnNpb24gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcblx0XHRtZnAuaXNMb3dJRSA9IG1mcC5pc0lFOCA9IGRvY3VtZW50LmFsbCAmJiAhZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcjtcblx0XHRtZnAuaXNBbmRyb2lkID0gKC9hbmRyb2lkL2dpKS50ZXN0KGFwcFZlcnNpb24pO1xuXHRcdG1mcC5pc0lPUyA9ICgvaXBob25lfGlwYWR8aXBvZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuc3VwcG9ydHNUcmFuc2l0aW9uID0gc3VwcG9ydHNUcmFuc2l0aW9ucygpO1xuXG5cdFx0Ly8gV2UgZGlzYWJsZSBmaXhlZCBwb3NpdGlvbmVkIGxpZ2h0Ym94IG9uIGRldmljZXMgdGhhdCBkb24ndCBoYW5kbGUgaXQgbmljZWx5LlxuXHRcdC8vIElmIHlvdSBrbm93IGEgYmV0dGVyIHdheSBvZiBkZXRlY3RpbmcgdGhpcyAtIGxldCBtZSBrbm93LlxuXHRcdG1mcC5wcm9iYWJseU1vYmlsZSA9IChtZnAuaXNBbmRyb2lkIHx8IG1mcC5pc0lPUyB8fCAvKE9wZXJhIE1pbmkpfEtpbmRsZXx3ZWJPU3xCbGFja0JlcnJ5fChPcGVyYSBNb2JpKXwoV2luZG93cyBQaG9uZSl8SUVNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICk7XG5cdFx0X2RvY3VtZW50ID0gJChkb2N1bWVudCk7XG5cblx0XHRtZnAucG9wdXBzQ2FjaGUgPSB7fTtcblx0fSxcblxuXHQvKipcblx0ICogT3BlbnMgcG9wdXBcblx0ICogQHBhcmFtICBkYXRhIFtkZXNjcmlwdGlvbl1cblx0ICovXG5cdG9wZW46IGZ1bmN0aW9uKGRhdGEpIHtcblxuXHRcdHZhciBpO1xuXG5cdFx0aWYoZGF0YS5pc09iaiA9PT0gZmFsc2UpIHsgXG5cdFx0XHQvLyBjb252ZXJ0IGpRdWVyeSBjb2xsZWN0aW9uIHRvIGFycmF5IHRvIGF2b2lkIGNvbmZsaWN0cyBsYXRlclxuXHRcdFx0bWZwLml0ZW1zID0gZGF0YS5pdGVtcy50b0FycmF5KCk7XG5cblx0XHRcdG1mcC5pbmRleCA9IDA7XG5cdFx0XHR2YXIgaXRlbXMgPSBkYXRhLml0ZW1zLFxuXHRcdFx0XHRpdGVtO1xuXHRcdFx0Zm9yKGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aXRlbSA9IGl0ZW1zW2ldO1xuXHRcdFx0XHRpZihpdGVtLnBhcnNlZCkge1xuXHRcdFx0XHRcdGl0ZW0gPSBpdGVtLmVsWzBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGl0ZW0gPT09IGRhdGEuZWxbMF0pIHtcblx0XHRcdFx0XHRtZnAuaW5kZXggPSBpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5pdGVtcyA9ICQuaXNBcnJheShkYXRhLml0ZW1zKSA/IGRhdGEuaXRlbXMgOiBbZGF0YS5pdGVtc107XG5cdFx0XHRtZnAuaW5kZXggPSBkYXRhLmluZGV4IHx8IDA7XG5cdFx0fVxuXG5cdFx0Ly8gaWYgcG9wdXAgaXMgYWxyZWFkeSBvcGVuZWQgLSB3ZSBqdXN0IHVwZGF0ZSB0aGUgY29udGVudFxuXHRcdGlmKG1mcC5pc09wZW4pIHtcblx0XHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHRtZnAudHlwZXMgPSBbXTsgXG5cdFx0X3dyYXBDbGFzc2VzID0gJyc7XG5cdFx0aWYoZGF0YS5tYWluRWwgJiYgZGF0YS5tYWluRWwubGVuZ3RoKSB7XG5cdFx0XHRtZnAuZXYgPSBkYXRhLm1haW5FbC5lcSgwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLmV2ID0gX2RvY3VtZW50O1xuXHRcdH1cblxuXHRcdGlmKGRhdGEua2V5KSB7XG5cdFx0XHRpZighbWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSkge1xuXHRcdFx0XHRtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldID0ge307XG5cdFx0XHR9XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlID0gbWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IHt9O1xuXHRcdH1cblxuXG5cblx0XHRtZnAuc3QgPSAkLmV4dGVuZCh0cnVlLCB7fSwgJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLCBkYXRhICk7IFxuXHRcdG1mcC5maXhlZENvbnRlbnRQb3MgPSBtZnAuc3QuZml4ZWRDb250ZW50UG9zID09PSAnYXV0bycgPyAhbWZwLnByb2JhYmx5TW9iaWxlIDogbWZwLnN0LmZpeGVkQ29udGVudFBvcztcblxuXHRcdGlmKG1mcC5zdC5tb2RhbCkge1xuXHRcdFx0bWZwLnN0LmNsb3NlT25Db250ZW50Q2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQmdDbGljayA9IGZhbHNlO1xuXHRcdFx0bWZwLnN0LnNob3dDbG9zZUJ0biA9IGZhbHNlO1xuXHRcdFx0bWZwLnN0LmVuYWJsZUVzY2FwZUtleSA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblxuXHRcdC8vIEJ1aWxkaW5nIG1hcmt1cFxuXHRcdC8vIG1haW4gY29udGFpbmVycyBhcmUgY3JlYXRlZCBvbmx5IG9uY2Vcblx0XHRpZighbWZwLmJnT3ZlcmxheSkge1xuXG5cdFx0XHQvLyBEYXJrIG92ZXJsYXlcblx0XHRcdG1mcC5iZ092ZXJsYXkgPSBfZ2V0RWwoJ2JnJykub24oJ2NsaWNrJytFVkVOVF9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdG1mcC53cmFwID0gX2dldEVsKCd3cmFwJykuYXR0cigndGFiaW5kZXgnLCAtMSkub24oJ2NsaWNrJytFVkVOVF9OUywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZihtZnAuX2NoZWNrSWZDbG9zZShlLnRhcmdldCkpIHtcblx0XHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdG1mcC5jb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRhaW5lcicsIG1mcC53cmFwKTtcblx0XHR9XG5cblx0XHRtZnAuY29udGVudENvbnRhaW5lciA9IF9nZXRFbCgnY29udGVudCcpO1xuXHRcdGlmKG1mcC5zdC5wcmVsb2FkZXIpIHtcblx0XHRcdG1mcC5wcmVsb2FkZXIgPSBfZ2V0RWwoJ3ByZWxvYWRlcicsIG1mcC5jb250YWluZXIsIG1mcC5zdC50TG9hZGluZyk7XG5cdFx0fVxuXG5cblx0XHQvLyBJbml0aWFsaXppbmcgbW9kdWxlc1xuXHRcdHZhciBtb2R1bGVzID0gJC5tYWduaWZpY1BvcHVwLm1vZHVsZXM7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG4gPSBtb2R1bGVzW2ldO1xuXHRcdFx0biA9IG4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuLnNsaWNlKDEpO1xuXHRcdFx0bWZwWydpbml0JytuXS5jYWxsKG1mcCk7XG5cdFx0fVxuXHRcdF9tZnBUcmlnZ2VyKCdCZWZvcmVPcGVuJyk7XG5cblxuXHRcdGlmKG1mcC5zdC5zaG93Q2xvc2VCdG4pIHtcblx0XHRcdC8vIENsb3NlIGJ1dHRvblxuXHRcdFx0aWYoIW1mcC5zdC5jbG9zZUJ0bkluc2lkZSkge1xuXHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoIF9nZXRDbG9zZUJ0bigpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfbWZwT24oTUFSS1VQX1BBUlNFX0VWRU5ULCBmdW5jdGlvbihlLCB0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0XHRcdFx0dmFsdWVzLmNsb3NlX3JlcGxhY2VXaXRoID0gX2dldENsb3NlQnRuKGl0ZW0udHlwZSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtY2xvc2UtYnRuLWluJztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihtZnAuc3QuYWxpZ25Ub3ApIHtcblx0XHRcdF93cmFwQ2xhc3NlcyArPSAnIG1mcC1hbGlnbi10b3AnO1xuXHRcdH1cblxuXHRcblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdG1mcC53cmFwLmNzcyh7XG5cdFx0XHRcdG92ZXJmbG93OiBtZnAuc3Qub3ZlcmZsb3dZLFxuXHRcdFx0XHRvdmVyZmxvd1g6ICdoaWRkZW4nLFxuXHRcdFx0XHRvdmVyZmxvd1k6IG1mcC5zdC5vdmVyZmxvd1lcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAud3JhcC5jc3MoeyBcblx0XHRcdFx0dG9wOiBfd2luZG93LnNjcm9sbFRvcCgpLFxuXHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmKCBtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gZmFsc2UgfHwgKG1mcC5zdC5maXhlZEJnUG9zID09PSAnYXV0bycgJiYgIW1mcC5maXhlZENvbnRlbnRQb3MpICkge1xuXHRcdFx0bWZwLmJnT3ZlcmxheS5jc3Moe1xuXHRcdFx0XHRoZWlnaHQ6IF9kb2N1bWVudC5oZWlnaHQoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdFxuXG5cdFx0aWYobWZwLnN0LmVuYWJsZUVzY2FwZUtleSkge1xuXHRcdFx0Ly8gQ2xvc2Ugb24gRVNDIGtleVxuXHRcdFx0X2RvY3VtZW50Lm9uKCdrZXl1cCcgKyBFVkVOVF9OUywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZihlLmtleUNvZGUgPT09IDI3KSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdF93aW5kb3cub24oJ3Jlc2l6ZScgKyBFVkVOVF9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudXBkYXRlU2l6ZSgpO1xuXHRcdH0pO1xuXG5cblx0XHRpZighbWZwLnN0LmNsb3NlT25Db250ZW50Q2xpY2spIHtcblx0XHRcdF93cmFwQ2xhc3NlcyArPSAnIG1mcC1hdXRvLWN1cnNvcic7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKF93cmFwQ2xhc3Nlcylcblx0XHRcdG1mcC53cmFwLmFkZENsYXNzKF93cmFwQ2xhc3Nlcyk7XG5cblxuXHRcdC8vIHRoaXMgdHJpZ2dlcnMgcmVjYWxjdWxhdGlvbiBvZiBsYXlvdXQsIHNvIHdlIGdldCBpdCBvbmNlIHRvIG5vdCB0byB0cmlnZ2VyIHR3aWNlXG5cdFx0dmFyIHdpbmRvd0hlaWdodCA9IG1mcC53SCA9IF93aW5kb3cuaGVpZ2h0KCk7XG5cblx0XHRcblx0XHR2YXIgd2luZG93U3R5bGVzID0ge307XG5cblx0XHRpZiggbWZwLmZpeGVkQ29udGVudFBvcyApIHtcbiAgICAgICAgICAgIGlmKG1mcC5faGFzU2Nyb2xsQmFyKHdpbmRvd0hlaWdodCkpe1xuICAgICAgICAgICAgICAgIHZhciBzID0gbWZwLl9nZXRTY3JvbGxiYXJTaXplKCk7XG4gICAgICAgICAgICAgICAgaWYocykge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3dTdHlsZXMubWFyZ2luUmlnaHQgPSBzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0aWYoIW1mcC5pc0lFNykge1xuXHRcdFx0XHR3aW5kb3dTdHlsZXMub3ZlcmZsb3cgPSAnaGlkZGVuJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGllNyBkb3VibGUtc2Nyb2xsIGJ1Z1xuXHRcdFx0XHQkKCdib2R5LCBodG1sJykuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRcblx0XHRcblx0XHR2YXIgY2xhc3Nlc1RvYWRkID0gbWZwLnN0Lm1haW5DbGFzcztcblx0XHRpZihtZnAuaXNJRTcpIHtcblx0XHRcdGNsYXNzZXNUb2FkZCArPSAnIG1mcC1pZTcnO1xuXHRcdH1cblx0XHRpZihjbGFzc2VzVG9hZGQpIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUCggY2xhc3Nlc1RvYWRkICk7XG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGNvbnRlbnRcblx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdCdWlsZENvbnRyb2xzJyk7XG5cblx0XHQvLyByZW1vdmUgc2Nyb2xsYmFyLCBhZGQgbWFyZ2luIGUudC5jXG5cdFx0JCgnaHRtbCcpLmNzcyh3aW5kb3dTdHlsZXMpO1xuXHRcdFxuXHRcdC8vIGFkZCBldmVyeXRoaW5nIHRvIERPTVxuXHRcdG1mcC5iZ092ZXJsYXkuYWRkKG1mcC53cmFwKS5wcmVwZW5kVG8oIG1mcC5zdC5wcmVwZW5kVG8gfHwgJChkb2N1bWVudC5ib2R5KSApO1xuXG5cdFx0Ly8gU2F2ZSBsYXN0IGZvY3VzZWQgZWxlbWVudFxuXHRcdG1mcC5fbGFzdEZvY3VzZWRFbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdFx0XG5cdFx0Ly8gV2FpdCBmb3IgbmV4dCBjeWNsZSB0byBhbGxvdyBDU1MgdHJhbnNpdGlvblxuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcblx0XHRcdGlmKG1mcC5jb250ZW50KSB7XG5cdFx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGlmIGNvbnRlbnQgaXMgbm90IGRlZmluZWQgKG5vdCBsb2FkZWQgZS50LmMpIHdlIGFkZCBjbGFzcyBvbmx5IGZvciBCR1xuXHRcdFx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKFJFQURZX0NMQVNTKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gVHJhcCB0aGUgZm9jdXMgaW4gcG9wdXBcblx0XHRcdF9kb2N1bWVudC5vbignZm9jdXNpbicgKyBFVkVOVF9OUywgbWZwLl9vbkZvY3VzSW4pO1xuXG5cdFx0fSwgMTYpO1xuXG5cdFx0bWZwLmlzT3BlbiA9IHRydWU7XG5cdFx0bWZwLnVwZGF0ZVNpemUod2luZG93SGVpZ2h0KTtcblx0XHRfbWZwVHJpZ2dlcihPUEVOX0VWRU5UKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDbG9zZXMgdGhlIHBvcHVwXG5cdCAqL1xuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0aWYoIW1mcC5pc09wZW4pIHJldHVybjtcblx0XHRfbWZwVHJpZ2dlcihCRUZPUkVfQ0xPU0VfRVZFTlQpO1xuXG5cdFx0bWZwLmlzT3BlbiA9IGZhbHNlO1xuXHRcdC8vIGZvciBDU1MzIGFuaW1hdGlvblxuXHRcdGlmKG1mcC5zdC5yZW1vdmFsRGVsYXkgJiYgIW1mcC5pc0xvd0lFICYmIG1mcC5zdXBwb3J0c1RyYW5zaXRpb24gKSAge1xuXHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKFJFTU9WSU5HX0NMQVNTKTtcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1mcC5fY2xvc2UoKTtcblx0XHRcdH0sIG1mcC5zdC5yZW1vdmFsRGVsYXkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBIZWxwZXIgZm9yIGNsb3NlKCkgZnVuY3Rpb25cblx0ICovXG5cdF9jbG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0X21mcFRyaWdnZXIoQ0xPU0VfRVZFTlQpO1xuXG5cdFx0dmFyIGNsYXNzZXNUb1JlbW92ZSA9IFJFTU9WSU5HX0NMQVNTICsgJyAnICsgUkVBRFlfQ0xBU1MgKyAnICc7XG5cblx0XHRtZnAuYmdPdmVybGF5LmRldGFjaCgpO1xuXHRcdG1mcC53cmFwLmRldGFjaCgpO1xuXHRcdG1mcC5jb250YWluZXIuZW1wdHkoKTtcblxuXHRcdGlmKG1mcC5zdC5tYWluQ2xhc3MpIHtcblx0XHRcdGNsYXNzZXNUb1JlbW92ZSArPSBtZnAuc3QubWFpbkNsYXNzICsgJyAnO1xuXHRcdH1cblxuXHRcdG1mcC5fcmVtb3ZlQ2xhc3NGcm9tTUZQKGNsYXNzZXNUb1JlbW92ZSk7XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHR2YXIgd2luZG93U3R5bGVzID0ge21hcmdpblJpZ2h0OiAnJ307XG5cdFx0XHRpZihtZnAuaXNJRTcpIHtcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dTdHlsZXMub3ZlcmZsb3cgPSAnJztcblx0XHRcdH1cblx0XHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHR9XG5cdFx0XG5cdFx0X2RvY3VtZW50Lm9mZigna2V5dXAnICsgRVZFTlRfTlMgKyAnIGZvY3VzaW4nICsgRVZFTlRfTlMpO1xuXHRcdG1mcC5ldi5vZmYoRVZFTlRfTlMpO1xuXG5cdFx0Ly8gY2xlYW4gdXAgRE9NIGVsZW1lbnRzIHRoYXQgYXJlbid0IHJlbW92ZWRcblx0XHRtZnAud3JhcC5hdHRyKCdjbGFzcycsICdtZnAtd3JhcCcpLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG5cdFx0bWZwLmJnT3ZlcmxheS5hdHRyKCdjbGFzcycsICdtZnAtYmcnKTtcblx0XHRtZnAuY29udGFpbmVyLmF0dHIoJ2NsYXNzJywgJ21mcC1jb250YWluZXInKTtcblxuXHRcdC8vIHJlbW92ZSBjbG9zZSBidXR0b24gZnJvbSB0YXJnZXQgZWxlbWVudFxuXHRcdGlmKG1mcC5zdC5zaG93Q2xvc2VCdG4gJiZcblx0XHQoIW1mcC5zdC5jbG9zZUJ0bkluc2lkZSB8fCBtZnAuY3VyclRlbXBsYXRlW21mcC5jdXJySXRlbS50eXBlXSA9PT0gdHJ1ZSkpIHtcblx0XHRcdGlmKG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG4pXG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG4uZGV0YWNoKCk7XG5cdFx0fVxuXG5cblx0XHRpZihtZnAuc3QuYXV0b0ZvY3VzTGFzdCAmJiBtZnAuX2xhc3RGb2N1c2VkRWwpIHtcblx0XHRcdCQobWZwLl9sYXN0Rm9jdXNlZEVsKS5mb2N1cygpOyAvLyBwdXQgdGFiIGZvY3VzIGJhY2tcblx0XHR9XG5cdFx0bWZwLmN1cnJJdGVtID0gbnVsbDtcdFxuXHRcdG1mcC5jb250ZW50ID0gbnVsbDtcblx0XHRtZnAuY3VyclRlbXBsYXRlID0gbnVsbDtcblx0XHRtZnAucHJldkhlaWdodCA9IDA7XG5cblx0XHRfbWZwVHJpZ2dlcihBRlRFUl9DTE9TRV9FVkVOVCk7XG5cdH0sXG5cdFxuXHR1cGRhdGVTaXplOiBmdW5jdGlvbih3aW5IZWlnaHQpIHtcblxuXHRcdGlmKG1mcC5pc0lPUykge1xuXHRcdFx0Ly8gZml4ZXMgaU9TIG5hdiBiYXJzIGh0dHBzOi8vZ2l0aHViLmNvbS9kaW1zZW1lbm92L01hZ25pZmljLVBvcHVwL2lzc3Vlcy8yXG5cdFx0XHR2YXIgem9vbUxldmVsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC8gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0XHR2YXIgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICogem9vbUxldmVsO1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBoZWlnaHQpO1xuXHRcdFx0bWZwLndIID0gaGVpZ2h0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAud0ggPSB3aW5IZWlnaHQgfHwgX3dpbmRvdy5oZWlnaHQoKTtcblx0XHR9XG5cdFx0Ly8gRml4ZXMgIzg0OiBwb3B1cCBpbmNvcnJlY3RseSBwb3NpdGlvbmVkIHdpdGggcG9zaXRpb246cmVsYXRpdmUgb24gYm9keVxuXHRcdGlmKCFtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3MoJ2hlaWdodCcsIG1mcC53SCk7XG5cdFx0fVxuXG5cdFx0X21mcFRyaWdnZXIoJ1Jlc2l6ZScpO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldCBjb250ZW50IG9mIHBvcHVwIGJhc2VkIG9uIGN1cnJlbnQgaW5kZXhcblx0ICovXG5cdHVwZGF0ZUl0ZW1IVE1MOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1ttZnAuaW5kZXhdO1xuXG5cdFx0Ly8gRGV0YWNoIGFuZCBwZXJmb3JtIG1vZGlmaWNhdGlvbnNcblx0XHRtZnAuY29udGVudENvbnRhaW5lci5kZXRhY2goKTtcblxuXHRcdGlmKG1mcC5jb250ZW50KVxuXHRcdFx0bWZwLmNvbnRlbnQuZGV0YWNoKCk7XG5cblx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdGl0ZW0gPSBtZnAucGFyc2VFbCggbWZwLmluZGV4ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHR5cGUgPSBpdGVtLnR5cGU7XG5cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlQ2hhbmdlJywgW21mcC5jdXJySXRlbSA/IG1mcC5jdXJySXRlbS50eXBlIDogJycsIHR5cGVdKTtcblx0XHQvLyBCZWZvcmVDaGFuZ2UgZXZlbnQgd29ya3MgbGlrZSBzbzpcblx0XHQvLyBfbWZwT24oJ0JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uKGUsIHByZXZUeXBlLCBuZXdUeXBlKSB7IH0pO1xuXG5cdFx0bWZwLmN1cnJJdGVtID0gaXRlbTtcblxuXHRcdGlmKCFtZnAuY3VyclRlbXBsYXRlW3R5cGVdKSB7XG5cdFx0XHR2YXIgbWFya3VwID0gbWZwLnN0W3R5cGVdID8gbWZwLnN0W3R5cGVdLm1hcmt1cCA6IGZhbHNlO1xuXG5cdFx0XHQvLyBhbGxvd3MgdG8gbW9kaWZ5IG1hcmt1cFxuXHRcdFx0X21mcFRyaWdnZXIoJ0ZpcnN0TWFya3VwUGFyc2UnLCBtYXJrdXApO1xuXG5cdFx0XHRpZihtYXJrdXApIHtcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9ICQobWFya3VwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCBmb3VuZCB3ZSBqdXN0IGRlZmluZSB0aGF0IHRlbXBsYXRlIGlzIHBhcnNlZFxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihfcHJldkNvbnRlbnRUeXBlICYmIF9wcmV2Q29udGVudFR5cGUgIT09IGl0ZW0udHlwZSkge1xuXHRcdFx0bWZwLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnbWZwLScrX3ByZXZDb250ZW50VHlwZSsnLWhvbGRlcicpO1xuXHRcdH1cblxuXHRcdHZhciBuZXdDb250ZW50ID0gbWZwWydnZXQnICsgdHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSldKGl0ZW0sIG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0pO1xuXHRcdG1mcC5hcHBlbmRDb250ZW50KG5ld0NvbnRlbnQsIHR5cGUpO1xuXG5cdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXG5cdFx0X21mcFRyaWdnZXIoQ0hBTkdFX0VWRU5ULCBpdGVtKTtcblx0XHRfcHJldkNvbnRlbnRUeXBlID0gaXRlbS50eXBlO1xuXG5cdFx0Ly8gQXBwZW5kIGNvbnRhaW5lciBiYWNrIGFmdGVyIGl0cyBjb250ZW50IGNoYW5nZWRcblx0XHRtZnAuY29udGFpbmVyLnByZXBlbmQobWZwLmNvbnRlbnRDb250YWluZXIpO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0FmdGVyQ2hhbmdlJyk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogU2V0IEhUTUwgY29udGVudCBvZiBwb3B1cFxuXHQgKi9cblx0YXBwZW5kQ29udGVudDogZnVuY3Rpb24obmV3Q29udGVudCwgdHlwZSkge1xuXHRcdG1mcC5jb250ZW50ID0gbmV3Q29udGVudDtcblxuXHRcdGlmKG5ld0NvbnRlbnQpIHtcblx0XHRcdGlmKG1mcC5zdC5zaG93Q2xvc2VCdG4gJiYgbWZwLnN0LmNsb3NlQnRuSW5zaWRlICYmXG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPT09IHRydWUpIHtcblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gbWFya3VwLCB3ZSBqdXN0IGFwcGVuZCBjbG9zZSBidXR0b24gZWxlbWVudCBpbnNpZGVcblx0XHRcdFx0aWYoIW1mcC5jb250ZW50LmZpbmQoJy5tZnAtY2xvc2UnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRtZnAuY29udGVudC5hcHBlbmQoX2dldENsb3NlQnRuKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jb250ZW50ID0gJyc7XG5cdFx0fVxuXG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0FQUEVORF9FVkVOVCk7XG5cdFx0bWZwLmNvbnRhaW5lci5hZGRDbGFzcygnbWZwLScrdHlwZSsnLWhvbGRlcicpO1xuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuYXBwZW5kKG1mcC5jb250ZW50KTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIE1hZ25pZmljIFBvcHVwIGRhdGEgb2JqZWN0IGJhc2VkIG9uIGdpdmVuIGRhdGFcblx0ICogQHBhcmFtICB7aW50fSBpbmRleCBJbmRleCBvZiBpdGVtIHRvIHBhcnNlXG5cdCAqL1xuXHRwYXJzZUVsOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBpdGVtID0gbWZwLml0ZW1zW2luZGV4XSxcblx0XHRcdHR5cGU7XG5cblx0XHRpZihpdGVtLnRhZ05hbWUpIHtcblx0XHRcdGl0ZW0gPSB7IGVsOiAkKGl0ZW0pIH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHR5cGUgPSBpdGVtLnR5cGU7XG5cdFx0XHRpdGVtID0geyBkYXRhOiBpdGVtLCBzcmM6IGl0ZW0uc3JjIH07XG5cdFx0fVxuXG5cdFx0aWYoaXRlbS5lbCkge1xuXHRcdFx0dmFyIHR5cGVzID0gbWZwLnR5cGVzO1xuXG5cdFx0XHQvLyBjaGVjayBmb3IgJ21mcC1UWVBFJyBjbGFzc1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmKCBpdGVtLmVsLmhhc0NsYXNzKCdtZnAtJyt0eXBlc1tpXSkgKSB7XG5cdFx0XHRcdFx0dHlwZSA9IHR5cGVzW2ldO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGl0ZW0uc3JjID0gaXRlbS5lbC5hdHRyKCdkYXRhLW1mcC1zcmMnKTtcblx0XHRcdGlmKCFpdGVtLnNyYykge1xuXHRcdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignaHJlZicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGl0ZW0udHlwZSA9IHR5cGUgfHwgbWZwLnN0LnR5cGUgfHwgJ2lubGluZSc7XG5cdFx0aXRlbS5pbmRleCA9IGluZGV4O1xuXHRcdGl0ZW0ucGFyc2VkID0gdHJ1ZTtcblx0XHRtZnAuaXRlbXNbaW5kZXhdID0gaXRlbTtcblx0XHRfbWZwVHJpZ2dlcignRWxlbWVudFBhcnNlJywgaXRlbSk7XG5cblx0XHRyZXR1cm4gbWZwLml0ZW1zW2luZGV4XTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyBzaW5nbGUgcG9wdXAgb3IgYSBncm91cCBvZiBwb3B1cHNcblx0ICovXG5cdGFkZEdyb3VwOiBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuXHRcdHZhciBlSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGUubWZwRWwgPSB0aGlzO1xuXHRcdFx0bWZwLl9vcGVuQ2xpY2soZSwgZWwsIG9wdGlvbnMpO1xuXHRcdH07XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH1cblxuXHRcdHZhciBlTmFtZSA9ICdjbGljay5tYWduaWZpY1BvcHVwJztcblx0XHRvcHRpb25zLm1haW5FbCA9IGVsO1xuXG5cdFx0aWYob3B0aW9ucy5pdGVtcykge1xuXHRcdFx0b3B0aW9ucy5pc09iaiA9IHRydWU7XG5cdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBlSGFuZGxlcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSBmYWxzZTtcblx0XHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgb3B0aW9ucy5kZWxlZ2F0ZSAsIGVIYW5kbGVyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbDtcblx0XHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X29wZW5DbGljazogZnVuY3Rpb24oZSwgZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgbWlkQ2xpY2sgPSBvcHRpb25zLm1pZENsaWNrICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1pZENsaWNrIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLm1pZENsaWNrO1xuXG5cblx0XHRpZighbWlkQ2xpY2sgJiYgKCBlLndoaWNoID09PSAyIHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5zaGlmdEtleSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBkaXNhYmxlT24gPSBvcHRpb25zLmRpc2FibGVPbiAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kaXNhYmxlT24gOiAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMuZGlzYWJsZU9uO1xuXG5cdFx0aWYoZGlzYWJsZU9uKSB7XG5cdFx0XHRpZigkLmlzRnVuY3Rpb24oZGlzYWJsZU9uKSkge1xuXHRcdFx0XHRpZiggIWRpc2FibGVPbi5jYWxsKG1mcCkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7IC8vIGVsc2UgaXQncyBudW1iZXJcblx0XHRcdFx0aWYoIF93aW5kb3cud2lkdGgoKSA8IGRpc2FibGVPbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGUudHlwZSkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHQvLyBUaGlzIHdpbGwgcHJldmVudCBwb3B1cCBmcm9tIGNsb3NpbmcgaWYgZWxlbWVudCBpcyBpbnNpZGUgYW5kIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkXG5cdFx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5lbCA9ICQoZS5tZnBFbCk7XG5cdFx0aWYob3B0aW9ucy5kZWxlZ2F0ZSkge1xuXHRcdFx0b3B0aW9ucy5pdGVtcyA9IGVsLmZpbmQob3B0aW9ucy5kZWxlZ2F0ZSk7XG5cdFx0fVxuXHRcdG1mcC5vcGVuKG9wdGlvbnMpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGV4dCBvbiBwcmVsb2FkZXJcblx0ICovXG5cdHVwZGF0ZVN0YXR1czogZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG5cblx0XHRpZihtZnAucHJlbG9hZGVyKSB7XG5cdFx0XHRpZihfcHJldlN0YXR1cyAhPT0gc3RhdHVzKSB7XG5cdFx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC1zLScrX3ByZXZTdGF0dXMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighdGV4dCAmJiBzdGF0dXMgPT09ICdsb2FkaW5nJykge1xuXHRcdFx0XHR0ZXh0ID0gbWZwLnN0LnRMb2FkaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdFx0c3RhdHVzOiBzdGF0dXMsXG5cdFx0XHRcdHRleHQ6IHRleHRcblx0XHRcdH07XG5cdFx0XHQvLyBhbGxvd3MgdG8gbW9kaWZ5IHN0YXR1c1xuXHRcdFx0X21mcFRyaWdnZXIoJ1VwZGF0ZVN0YXR1cycsIGRhdGEpO1xuXG5cdFx0XHRzdGF0dXMgPSBkYXRhLnN0YXR1cztcblx0XHRcdHRleHQgPSBkYXRhLnRleHQ7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuaHRtbCh0ZXh0KTtcblxuXHRcdFx0bWZwLnByZWxvYWRlci5maW5kKCdhJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fSk7XG5cblx0XHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC1zLScrc3RhdHVzKTtcblx0XHRcdF9wcmV2U3RhdHVzID0gc3RhdHVzO1xuXHRcdH1cblx0fSxcblxuXG5cdC8qXG5cdFx0XCJQcml2YXRlXCIgaGVscGVycyB0aGF0IGFyZW4ndCBwcml2YXRlIGF0IGFsbFxuXHQgKi9cblx0Ly8gQ2hlY2sgdG8gY2xvc2UgcG9wdXAgb3Igbm90XG5cdC8vIFwidGFyZ2V0XCIgaXMgYW4gZWxlbWVudCB0aGF0IHdhcyBjbGlja2VkXG5cdF9jaGVja0lmQ2xvc2U6IGZ1bmN0aW9uKHRhcmdldCkge1xuXG5cdFx0aWYoJCh0YXJnZXQpLmhhc0NsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNsb3NlT25Db250ZW50ID0gbWZwLnN0LmNsb3NlT25Db250ZW50Q2xpY2s7XG5cdFx0dmFyIGNsb3NlT25CZyA9IG1mcC5zdC5jbG9zZU9uQmdDbGljaztcblxuXHRcdGlmKGNsb3NlT25Db250ZW50ICYmIGNsb3NlT25CZykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gV2UgY2xvc2UgdGhlIHBvcHVwIGlmIGNsaWNrIGlzIG9uIGNsb3NlIGJ1dHRvbiBvciBvbiBwcmVsb2FkZXIuIE9yIGlmIHRoZXJlIGlzIG5vIGNvbnRlbnQuXG5cdFx0XHRpZighbWZwLmNvbnRlbnQgfHwgJCh0YXJnZXQpLmhhc0NsYXNzKCdtZnAtY2xvc2UnKSB8fCAobWZwLnByZWxvYWRlciAmJiB0YXJnZXQgPT09IG1mcC5wcmVsb2FkZXJbMF0pICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgY2xpY2sgaXMgb3V0c2lkZSB0aGUgY29udGVudFxuXHRcdFx0aWYoICAodGFyZ2V0ICE9PSBtZnAuY29udGVudFswXSAmJiAhJC5jb250YWlucyhtZnAuY29udGVudFswXSwgdGFyZ2V0KSkgICkge1xuXHRcdFx0XHRpZihjbG9zZU9uQmcpIHtcblx0XHRcdFx0XHQvLyBsYXN0IGNoZWNrLCBpZiB0aGUgY2xpY2tlZCBlbGVtZW50IGlzIGluIERPTSwgKGluIGNhc2UgaXQncyByZW1vdmVkIG9uY2xpY2spXG5cdFx0XHRcdFx0aWYoICQuY29udGFpbnMoZG9jdW1lbnQsIHRhcmdldCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZihjbG9zZU9uQ29udGVudCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cdF9hZGRDbGFzc1RvTUZQOiBmdW5jdGlvbihjTmFtZSkge1xuXHRcdG1mcC5iZ092ZXJsYXkuYWRkQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLmFkZENsYXNzKGNOYW1lKTtcblx0fSxcblx0X3JlbW92ZUNsYXNzRnJvbU1GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHR0aGlzLmJnT3ZlcmxheS5yZW1vdmVDbGFzcyhjTmFtZSk7XG5cdFx0bWZwLndyYXAucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHR9LFxuXHRfaGFzU2Nyb2xsQmFyOiBmdW5jdGlvbih3aW5IZWlnaHQpIHtcblx0XHRyZXR1cm4gKCAgKG1mcC5pc0lFNyA/IF9kb2N1bWVudC5oZWlnaHQoKSA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0KSA+ICh3aW5IZWlnaHQgfHwgX3dpbmRvdy5oZWlnaHQoKSkgKTtcblx0fSxcblx0X3NldEZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHQobWZwLnN0LmZvY3VzID8gbWZwLmNvbnRlbnQuZmluZChtZnAuc3QuZm9jdXMpLmVxKDApIDogbWZwLndyYXApLmZvY3VzKCk7XG5cdH0sXG5cdF9vbkZvY3VzSW46IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiggZS50YXJnZXQgIT09IG1mcC53cmFwWzBdICYmICEkLmNvbnRhaW5zKG1mcC53cmFwWzBdLCBlLnRhcmdldCkgKSB7XG5cdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXHRfcGFyc2VNYXJrdXA6IGZ1bmN0aW9uKHRlbXBsYXRlLCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHR2YXIgYXJyO1xuXHRcdGlmKGl0ZW0uZGF0YSkge1xuXHRcdFx0dmFsdWVzID0gJC5leHRlbmQoaXRlbS5kYXRhLCB2YWx1ZXMpO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcihNQVJLVVBfUEFSU0VfRVZFTlQsIFt0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtXSApO1xuXG5cdFx0JC5lYWNoKHZhbHVlcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRhcnIgPSBrZXkuc3BsaXQoJ18nKTtcblx0XHRcdGlmKGFyci5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdHZhciBlbCA9IHRlbXBsYXRlLmZpbmQoRVZFTlRfTlMgKyAnLScrYXJyWzBdKTtcblxuXHRcdFx0XHRpZihlbC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFyIGF0dHIgPSBhcnJbMV07XG5cdFx0XHRcdFx0aWYoYXR0ciA9PT0gJ3JlcGxhY2VXaXRoJykge1xuXHRcdFx0XHRcdFx0aWYoZWxbMF0gIT09IHZhbHVlWzBdKSB7XG5cdFx0XHRcdFx0XHRcdGVsLnJlcGxhY2VXaXRoKHZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYoYXR0ciA9PT0gJ2ltZycpIHtcblx0XHRcdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdFx0XHRlbC5hdHRyKCdzcmMnLCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCggJCgnPGltZz4nKS5hdHRyKCdzcmMnLCB2YWx1ZSkuYXR0cignY2xhc3MnLCBlbC5hdHRyKCdjbGFzcycpKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbC5hdHRyKGFyclsxXSwgdmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2tleSkuaHRtbCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0X2dldFNjcm9sbGJhclNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdC8vIHRoeCBEYXZpZFxuXHRcdGlmKG1mcC5zY3JvbGxiYXJTaXplID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0c2Nyb2xsRGl2LnN0eWxlLmNzc1RleHQgPSAnd2lkdGg6IDk5cHg7IGhlaWdodDogOTlweDsgb3ZlcmZsb3c6IHNjcm9sbDsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IC05OTk5cHg7Jztcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHRcdG1mcC5zY3JvbGxiYXJTaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuXHRcdH1cblx0XHRyZXR1cm4gbWZwLnNjcm9sbGJhclNpemU7XG5cdH1cblxufTsgLyogTWFnbmlmaWNQb3B1cCBjb3JlIHByb3RvdHlwZSBlbmQgKi9cblxuXG5cblxuLyoqXG4gKiBQdWJsaWMgc3RhdGljIGZ1bmN0aW9uc1xuICovXG4kLm1hZ25pZmljUG9wdXAgPSB7XG5cdGluc3RhbmNlOiBudWxsLFxuXHRwcm90bzogTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUsXG5cdG1vZHVsZXM6IFtdLFxuXG5cdG9wZW46IGZ1bmN0aW9uKG9wdGlvbnMsIGluZGV4KSB7XG5cdFx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHRcdGlmKCFvcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5pc09iaiA9IHRydWU7XG5cdFx0b3B0aW9ucy5pbmRleCA9IGluZGV4IHx8IDA7XG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2Uub3BlbihvcHRpb25zKTtcblx0fSxcblxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSAmJiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UuY2xvc2UoKTtcblx0fSxcblxuXHRyZWdpc3Rlck1vZHVsZTogZnVuY3Rpb24obmFtZSwgbW9kdWxlKSB7XG5cdFx0aWYobW9kdWxlLm9wdGlvbnMpIHtcblx0XHRcdCQubWFnbmlmaWNQb3B1cC5kZWZhdWx0c1tuYW1lXSA9IG1vZHVsZS5vcHRpb25zO1xuXHRcdH1cblx0XHQkLmV4dGVuZCh0aGlzLnByb3RvLCBtb2R1bGUucHJvdG8pO1xuXHRcdHRoaXMubW9kdWxlcy5wdXNoKG5hbWUpO1xuXHR9LFxuXG5cdGRlZmF1bHRzOiB7XG5cblx0XHQvLyBJbmZvIGFib3V0IG9wdGlvbnMgaXMgaW4gZG9jczpcblx0XHQvLyBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9kb2N1bWVudGF0aW9uLmh0bWwjb3B0aW9uc1xuXG5cdFx0ZGlzYWJsZU9uOiAwLFxuXG5cdFx0a2V5OiBudWxsLFxuXG5cdFx0bWlkQ2xpY2s6IGZhbHNlLFxuXG5cdFx0bWFpbkNsYXNzOiAnJyxcblxuXHRcdHByZWxvYWRlcjogdHJ1ZSxcblxuXHRcdGZvY3VzOiAnJywgLy8gQ1NTIHNlbGVjdG9yIG9mIGlucHV0IHRvIGZvY3VzIGFmdGVyIHBvcHVwIGlzIG9wZW5lZFxuXG5cdFx0Y2xvc2VPbkNvbnRlbnRDbGljazogZmFsc2UsXG5cblx0XHRjbG9zZU9uQmdDbGljazogdHJ1ZSxcblxuXHRcdGNsb3NlQnRuSW5zaWRlOiB0cnVlLFxuXG5cdFx0c2hvd0Nsb3NlQnRuOiB0cnVlLFxuXG5cdFx0ZW5hYmxlRXNjYXBlS2V5OiB0cnVlLFxuXG5cdFx0bW9kYWw6IGZhbHNlLFxuXG5cdFx0YWxpZ25Ub3A6IGZhbHNlLFxuXG5cdFx0cmVtb3ZhbERlbGF5OiAwLFxuXG5cdFx0cHJlcGVuZFRvOiBudWxsLFxuXG5cdFx0Zml4ZWRDb250ZW50UG9zOiAnYXV0bycsXG5cblx0XHRmaXhlZEJnUG9zOiAnYXV0bycsXG5cblx0XHRvdmVyZmxvd1k6ICdhdXRvJyxcblxuXHRcdGNsb3NlTWFya3VwOiAnPGJ1dHRvbiB0aXRsZT1cIiV0aXRsZSVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtZnAtY2xvc2VcIj4mIzIxNTs8L2J1dHRvbj4nLFxuXG5cdFx0dENsb3NlOiAnQ2xvc2UgKEVzYyknLFxuXG5cdFx0dExvYWRpbmc6ICdMb2FkaW5nLi4uJyxcblxuXHRcdGF1dG9Gb2N1c0xhc3Q6IHRydWVcblxuXHR9XG59O1xuXG5cblxuJC5mbi5tYWduaWZpY1BvcHVwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRfY2hlY2tJbnN0YW5jZSgpO1xuXG5cdHZhciBqcUVsID0gJCh0aGlzKTtcblxuXHQvLyBXZSBjYWxsIHNvbWUgQVBJIG1ldGhvZCBvZiBmaXJzdCBwYXJhbSBpcyBhIHN0cmluZ1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRpZihvcHRpb25zID09PSAnb3BlbicpIHtcblx0XHRcdHZhciBpdGVtcyxcblx0XHRcdFx0aXRlbU9wdHMgPSBfaXNKUSA/IGpxRWwuZGF0YSgnbWFnbmlmaWNQb3B1cCcpIDoganFFbFswXS5tYWduaWZpY1BvcHVwLFxuXHRcdFx0XHRpbmRleCA9IHBhcnNlSW50KGFyZ3VtZW50c1sxXSwgMTApIHx8IDA7XG5cblx0XHRcdGlmKGl0ZW1PcHRzLml0ZW1zKSB7XG5cdFx0XHRcdGl0ZW1zID0gaXRlbU9wdHMuaXRlbXNbaW5kZXhdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXRlbXMgPSBqcUVsO1xuXHRcdFx0XHRpZihpdGVtT3B0cy5kZWxlZ2F0ZSkge1xuXHRcdFx0XHRcdGl0ZW1zID0gaXRlbXMuZmluZChpdGVtT3B0cy5kZWxlZ2F0ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbXMgPSBpdGVtcy5lcSggaW5kZXggKTtcblx0XHRcdH1cblx0XHRcdG1mcC5fb3BlbkNsaWNrKHttZnBFbDppdGVtc30sIGpxRWwsIGl0ZW1PcHRzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYobWZwLmlzT3Blbilcblx0XHRcdFx0bWZwW29wdGlvbnNdLmFwcGx5KG1mcCwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gY2xvbmUgb3B0aW9ucyBvYmpcblx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXG5cdFx0Lypcblx0XHQgKiBBcyBaZXB0byBkb2Vzbid0IHN1cHBvcnQgLmRhdGEoKSBtZXRob2QgZm9yIG9iamVjdHNcblx0XHQgKiBhbmQgaXQgd29ya3Mgb25seSBpbiBub3JtYWwgYnJvd3NlcnNcblx0XHQgKiB3ZSBhc3NpZ24gXCJvcHRpb25zXCIgb2JqZWN0IGRpcmVjdGx5IHRvIHRoZSBET00gZWxlbWVudC4gRlRXIVxuXHRcdCAqL1xuXHRcdGlmKF9pc0pRKSB7XG5cdFx0XHRqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFFbFswXS5tYWduaWZpY1BvcHVwID0gb3B0aW9ucztcblx0XHR9XG5cblx0XHRtZnAuYWRkR3JvdXAoanFFbCwgb3B0aW9ucyk7XG5cblx0fVxuXHRyZXR1cm4ganFFbDtcbn07XG5cbi8qPj5jb3JlKi9cblxuLyo+PmlubGluZSovXG5cbnZhciBJTkxJTkVfTlMgPSAnaW5saW5lJyxcblx0X2hpZGRlbkNsYXNzLFxuXHRfaW5saW5lUGxhY2Vob2xkZXIsXG5cdF9sYXN0SW5saW5lRWxlbWVudCxcblx0X3B1dElubGluZUVsZW1lbnRzQmFjayA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKF9sYXN0SW5saW5lRWxlbWVudCkge1xuXHRcdFx0X2lubGluZVBsYWNlaG9sZGVyLmFmdGVyKCBfbGFzdElubGluZUVsZW1lbnQuYWRkQ2xhc3MoX2hpZGRlbkNsYXNzKSApLmRldGFjaCgpO1xuXHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gbnVsbDtcblx0XHR9XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShJTkxJTkVfTlMsIHtcblx0b3B0aW9uczoge1xuXHRcdGhpZGRlbkNsYXNzOiAnaGlkZScsIC8vIHdpbGwgYmUgYXBwZW5kZWQgd2l0aCBgbWZwLWAgcHJlZml4XG5cdFx0bWFya3VwOiAnJyxcblx0XHR0Tm90Rm91bmQ6ICdDb250ZW50IG5vdCBmb3VuZCdcblx0fSxcblx0cHJvdG86IHtcblxuXHRcdGluaXRJbmxpbmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSU5MSU5FX05TKTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UKycuJytJTkxJTkVfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfcHV0SW5saW5lRWxlbWVudHNCYWNrKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Z2V0SW5saW5lOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXG5cdFx0XHRfcHV0SW5saW5lRWxlbWVudHNCYWNrKCk7XG5cblx0XHRcdGlmKGl0ZW0uc3JjKSB7XG5cdFx0XHRcdHZhciBpbmxpbmVTdCA9IG1mcC5zdC5pbmxpbmUsXG5cdFx0XHRcdFx0ZWwgPSAkKGl0ZW0uc3JjKTtcblxuXHRcdFx0XHRpZihlbC5sZW5ndGgpIHtcblxuXHRcdFx0XHRcdC8vIElmIHRhcmdldCBlbGVtZW50IGhhcyBwYXJlbnQgLSB3ZSByZXBsYWNlIGl0IHdpdGggcGxhY2Vob2xkZXIgYW5kIHB1dCBpdCBiYWNrIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFxuXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBlbFswXS5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdGlmKHBhcmVudCAmJiBwYXJlbnQudGFnTmFtZSkge1xuXHRcdFx0XHRcdFx0aWYoIV9pbmxpbmVQbGFjZWhvbGRlcikge1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSBpbmxpbmVTdC5oaWRkZW5DbGFzcztcblx0XHRcdFx0XHRcdFx0X2lubGluZVBsYWNlaG9sZGVyID0gX2dldEVsKF9oaWRkZW5DbGFzcyk7XG5cdFx0XHRcdFx0XHRcdF9oaWRkZW5DbGFzcyA9ICdtZnAtJytfaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyByZXBsYWNlIHRhcmdldCBpbmxpbmUgZWxlbWVudCB3aXRoIHBsYWNlaG9sZGVyXG5cdFx0XHRcdFx0XHRfbGFzdElubGluZUVsZW1lbnQgPSBlbC5hZnRlcihfaW5saW5lUGxhY2Vob2xkZXIpLmRldGFjaCgpLnJlbW92ZUNsYXNzKF9oaWRkZW5DbGFzcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGlubGluZVN0LnROb3RGb3VuZCk7XG5cdFx0XHRcdFx0ZWwgPSAkKCc8ZGl2PicpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aXRlbS5pbmxpbmVFbGVtZW50ID0gZWw7XG5cdFx0XHRcdHJldHVybiBlbDtcblx0XHRcdH1cblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdG1mcC5fcGFyc2VNYXJrdXAodGVtcGxhdGUsIHt9LCBpdGVtKTtcblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW5saW5lKi9cblxuLyo+PmFqYXgqL1xudmFyIEFKQVhfTlMgPSAnYWpheCcsXG5cdF9hamF4Q3VyLFxuXHRfcmVtb3ZlQWpheEN1cnNvciA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHQkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKF9hamF4Q3VyKTtcblx0XHR9XG5cdH0sXG5cdF9kZXN0cm95QWpheFJlcXVlc3QgPSBmdW5jdGlvbigpIHtcblx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdGlmKG1mcC5yZXEpIHtcblx0XHRcdG1mcC5yZXEuYWJvcnQoKTtcblx0XHR9XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShBSkFYX05TLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdHNldHRpbmdzOiBudWxsLFxuXHRcdGN1cnNvcjogJ21mcC1hamF4LWN1cicsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGNvbnRlbnQ8L2E+IGNvdWxkIG5vdCBiZSBsb2FkZWQuJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEFqYXg6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goQUpBWF9OUyk7XG5cdFx0XHRfYWpheEN1ciA9IG1mcC5zdC5hamF4LmN1cnNvcjtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UKycuJytBSkFYX05TLCBfZGVzdHJveUFqYXhSZXF1ZXN0KTtcblx0XHRcdF9tZnBPbignQmVmb3JlQ2hhbmdlLicgKyBBSkFYX05TLCBfZGVzdHJveUFqYXhSZXF1ZXN0KTtcblx0XHR9LFxuXHRcdGdldEFqYXg6IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdFx0aWYoX2FqYXhDdXIpIHtcblx0XHRcdFx0JChkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhfYWpheEN1cik7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblxuXHRcdFx0dmFyIG9wdHMgPSAkLmV4dGVuZCh7XG5cdFx0XHRcdHVybDogaXRlbS5zcmMsXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7XG5cdFx0XHRcdFx0dmFyIHRlbXAgPSB7XG5cdFx0XHRcdFx0XHRkYXRhOmRhdGEsXG5cdFx0XHRcdFx0XHR4aHI6anFYSFJcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0X21mcFRyaWdnZXIoJ1BhcnNlQWpheCcsIHRlbXApO1xuXG5cdFx0XHRcdFx0bWZwLmFwcGVuZENvbnRlbnQoICQodGVtcC5kYXRhKSwgQUpBWF9OUyApO1xuXG5cdFx0XHRcdFx0aXRlbS5maW5pc2hlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXG5cdFx0XHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC53cmFwLmFkZENsYXNzKFJFQURZX0NMQVNTKTtcblx0XHRcdFx0XHR9LCAxNik7XG5cblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXG5cdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0FqYXhDb250ZW50QWRkZWQnKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cdFx0XHRcdFx0aXRlbS5maW5pc2hlZCA9IGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIG1mcC5zdC5hamF4LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIG1mcC5zdC5hamF4LnNldHRpbmdzKTtcblxuXHRcdFx0bWZwLnJlcSA9ICQuYWpheChvcHRzKTtcblxuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5hamF4Ki9cblxuLyo+PmltYWdlKi9cbnZhciBfaW1nSW50ZXJ2YWwsXG5cdF9nZXRUaXRsZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpZihpdGVtLmRhdGEgJiYgaXRlbS5kYXRhLnRpdGxlICE9PSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm4gaXRlbS5kYXRhLnRpdGxlO1xuXG5cdFx0dmFyIHNyYyA9IG1mcC5zdC5pbWFnZS50aXRsZVNyYztcblxuXHRcdGlmKHNyYykge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKHNyYykpIHtcblx0XHRcdFx0cmV0dXJuIHNyYy5jYWxsKG1mcCwgaXRlbSk7XG5cdFx0XHR9IGVsc2UgaWYoaXRlbS5lbCkge1xuXHRcdFx0XHRyZXR1cm4gaXRlbS5lbC5hdHRyKHNyYykgfHwgJyc7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAnJztcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdpbWFnZScsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0bWFya3VwOiAnPGRpdiBjbGFzcz1cIm1mcC1maWd1cmVcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGZpZ3VyZT4nK1xuXHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtaW1nXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8ZmlnY2FwdGlvbj4nK1xuXHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1ib3R0b20tYmFyXCI+Jytcblx0XHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC10aXRsZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtY291bnRlclwiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHRcdCc8L2Rpdj4nK1xuXHRcdFx0XHRcdFx0JzwvZmlnY2FwdGlvbj4nK1xuXHRcdFx0XHRcdCc8L2ZpZ3VyZT4nK1xuXHRcdFx0XHQnPC9kaXY+Jyxcblx0XHRjdXJzb3I6ICdtZnAtem9vbS1vdXQtY3VyJyxcblx0XHR0aXRsZVNyYzogJ3RpdGxlJyxcblx0XHR2ZXJ0aWNhbEZpdDogdHJ1ZSxcblx0XHR0RXJyb3I6ICc8YSBocmVmPVwiJXVybCVcIj5UaGUgaW1hZ2U8L2E+IGNvdWxkIG5vdCBiZSBsb2FkZWQuJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbWdTdCA9IG1mcC5zdC5pbWFnZSxcblx0XHRcdFx0bnMgPSAnLmltYWdlJztcblxuXHRcdFx0bWZwLnR5cGVzLnB1c2goJ2ltYWdlJyk7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZScgJiYgaW1nU3QuY3Vyc29yKSB7XG5cdFx0XHRcdFx0JChkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhpbWdTdC5jdXJzb3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoaW1nU3QuY3Vyc29yKSB7XG5cdFx0XHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhpbWdTdC5jdXJzb3IpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF93aW5kb3cub2ZmKCdyZXNpemUnICsgRVZFTlRfTlMpO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignUmVzaXplJytucywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdF9tZnBPbignQWZ0ZXJDaGFuZ2UnLCBtZnAucmVzaXplSW1hZ2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVzaXplSW1hZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGl0ZW0gPSBtZnAuY3Vyckl0ZW07XG5cdFx0XHRpZighaXRlbSB8fCAhaXRlbS5pbWcpIHJldHVybjtcblxuXHRcdFx0aWYobWZwLnN0LmltYWdlLnZlcnRpY2FsRml0KSB7XG5cdFx0XHRcdHZhciBkZWNyID0gMDtcblx0XHRcdFx0Ly8gZml4IGJveC1zaXppbmcgaW4gaWU3Lzhcblx0XHRcdFx0aWYobWZwLmlzTG93SUUpIHtcblx0XHRcdFx0XHRkZWNyID0gcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLXRvcCcpLCAxMCkgKyBwYXJzZUludChpdGVtLmltZy5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW0uaW1nLmNzcygnbWF4LWhlaWdodCcsIG1mcC53SC1kZWNyKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9vbkltYWdlSGFzU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0aWYoaXRlbS5pbWcpIHtcblxuXHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXG5cdFx0XHRcdGlmKF9pbWdJbnRlcnZhbCkge1xuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaXNDaGVja2luZ0ltZ1NpemUgPSBmYWxzZTtcblxuXHRcdFx0XHRfbWZwVHJpZ2dlcignSW1hZ2VIYXNTaXplJywgaXRlbSk7XG5cblx0XHRcdFx0aWYoaXRlbS5pbWdIaWRkZW4pIHtcblx0XHRcdFx0XHRpZihtZnAuY29udGVudClcblx0XHRcdFx0XHRcdG1mcC5jb250ZW50LnJlbW92ZUNsYXNzKCdtZnAtbG9hZGluZycpO1xuXG5cdFx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEZ1bmN0aW9uIHRoYXQgbG9vcHMgdW50aWwgdGhlIGltYWdlIGhhcyBzaXplIHRvIGRpc3BsYXkgZWxlbWVudHMgdGhhdCByZWx5IG9uIGl0IGFzYXBcblx0XHQgKi9cblx0XHRmaW5kSW1hZ2VTaXplOiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdHZhciBjb3VudGVyID0gMCxcblx0XHRcdFx0aW1nID0gaXRlbS5pbWdbMF0sXG5cdFx0XHRcdG1mcFNldEludGVydmFsID0gZnVuY3Rpb24oZGVsYXkpIHtcblxuXHRcdFx0XHRcdGlmKF9pbWdJbnRlcnZhbCkge1xuXHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBkZWNlbGVyYXRpbmcgaW50ZXJ2YWwgdGhhdCBjaGVja3MgZm9yIHNpemUgb2YgYW4gaW1hZ2Vcblx0XHRcdFx0XHRfaW1nSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmKGltZy5uYXR1cmFsV2lkdGggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcC5fb25JbWFnZUhhc1NpemUoaXRlbSk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYoY291bnRlciA+IDIwMCkge1xuXHRcdFx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvdW50ZXIrKztcblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPT09IDMpIHtcblx0XHRcdFx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwoMTApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNvdW50ZXIgPT09IDQwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSAxMDApIHtcblx0XHRcdFx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwoNTAwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBkZWxheSk7XG5cdFx0XHRcdH07XG5cblx0XHRcdG1mcFNldEludGVydmFsKDEpO1xuXHRcdH0sXG5cblx0XHRnZXRJbWFnZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0dmFyIGd1YXJkID0gMCxcblxuXHRcdFx0XHQvLyBpbWFnZSBsb2FkIGNvbXBsZXRlIGhhbmRsZXJcblx0XHRcdFx0b25Mb2FkQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZihpdGVtKSB7XG5cdFx0XHRcdFx0XHRpZiAoaXRlbS5pbWdbMF0uY29tcGxldGUpIHtcblx0XHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cblx0XHRcdFx0XHRcdFx0aWYoaXRlbSA9PT0gbWZwLmN1cnJJdGVtKXtcblx0XHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXG5cdFx0XHRcdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGl0ZW0ubG9hZGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHRfbWZwVHJpZ2dlcignSW1hZ2VMb2FkQ29tcGxldGUnKTtcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIGlmIGltYWdlIGNvbXBsZXRlIGNoZWNrIGZhaWxzIDIwMCB0aW1lcyAoMjAgc2VjKSwgd2UgYXNzdW1lIHRoYXQgdGhlcmUgd2FzIGFuIGVycm9yLlxuXHRcdFx0XHRcdFx0XHRndWFyZCsrO1xuXHRcdFx0XHRcdFx0XHRpZihndWFyZCA8IDIwMCkge1xuXHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQob25Mb2FkQ29tcGxldGUsMTAwKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRvbkxvYWRFcnJvcigpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIGltYWdlIGVycm9yIGhhbmRsZXJcblx0XHRcdFx0b25Mb2FkRXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZihpdGVtKSB7XG5cdFx0XHRcdFx0XHRpdGVtLmltZy5vZmYoJy5tZnBsb2FkZXInKTtcblx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdG1mcC5fb25JbWFnZUhhc1NpemUoaXRlbSk7XG5cdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpbWdTdCA9IG1mcC5zdC5pbWFnZTtcblxuXG5cdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKCcubWZwLWltZycpO1xuXHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblx0XHRcdFx0aW1nLmNsYXNzTmFtZSA9ICdtZnAtaW1nJztcblx0XHRcdFx0aWYoaXRlbS5lbCAmJiBpdGVtLmVsLmZpbmQoJ2ltZycpLmxlbmd0aCkge1xuXHRcdFx0XHRcdGltZy5hbHQgPSBpdGVtLmVsLmZpbmQoJ2ltZycpLmF0dHIoJ2FsdCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW0uaW1nID0gJChpbWcpLm9uKCdsb2FkLm1mcGxvYWRlcicsIG9uTG9hZENvbXBsZXRlKS5vbignZXJyb3IubWZwbG9hZGVyJywgb25Mb2FkRXJyb3IpO1xuXHRcdFx0XHRpbWcuc3JjID0gaXRlbS5zcmM7XG5cblx0XHRcdFx0Ly8gd2l0aG91dCBjbG9uZSgpIFwiZXJyb3JcIiBldmVudCBpcyBub3QgZmlyaW5nIHdoZW4gSU1HIGlzIHJlcGxhY2VkIGJ5IG5ldyBJTUdcblx0XHRcdFx0Ly8gVE9ETzogZmluZCBhIHdheSB0byBhdm9pZCBzdWNoIGNsb25pbmdcblx0XHRcdFx0aWYoZWwuaXMoJ2ltZycpKSB7XG5cdFx0XHRcdFx0aXRlbS5pbWcgPSBpdGVtLmltZy5jbG9uZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW1nID0gaXRlbS5pbWdbMF07XG5cdFx0XHRcdGlmKGltZy5uYXR1cmFsV2lkdGggPiAwKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmKCFpbWcud2lkdGgpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7XG5cdFx0XHRcdHRpdGxlOiBfZ2V0VGl0bGUoaXRlbSksXG5cdFx0XHRcdGltZ19yZXBsYWNlV2l0aDogaXRlbS5pbWdcblx0XHRcdH0sIGl0ZW0pO1xuXG5cdFx0XHRtZnAucmVzaXplSW1hZ2UoKTtcblxuXHRcdFx0aWYoaXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdGlmKF9pbWdJbnRlcnZhbCkgY2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXG5cdFx0XHRcdGlmKGl0ZW0ubG9hZEVycm9yKSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUuYWRkQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbWdTdC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHRcdH1cblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnbG9hZGluZycpO1xuXHRcdFx0aXRlbS5sb2FkaW5nID0gdHJ1ZTtcblxuXHRcdFx0aWYoIWl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpdGVtLmltZ0hpZGRlbiA9IHRydWU7XG5cdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRtZnAuZmluZEltYWdlU2l6ZShpdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5pbWFnZSovXG5cbi8qPj56b29tKi9cbnZhciBoYXNNb3pUcmFuc2Zvcm0sXG5cdGdldEhhc01velRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKGhhc01velRyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRoYXNNb3pUcmFuc2Zvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHJldHVybiBoYXNNb3pUcmFuc2Zvcm07XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnem9vbScsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0ZW5hYmxlZDogZmFsc2UsXG5cdFx0ZWFzaW5nOiAnZWFzZS1pbi1vdXQnLFxuXHRcdGR1cmF0aW9uOiAzMDAsXG5cdFx0b3BlbmVyOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudC5pcygnaW1nJykgPyBlbGVtZW50IDogZWxlbWVudC5maW5kKCdpbWcnKTtcblx0XHR9XG5cdH0sXG5cblx0cHJvdG86IHtcblxuXHRcdGluaXRab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB6b29tU3QgPSBtZnAuc3Quem9vbSxcblx0XHRcdFx0bnMgPSAnLnpvb20nLFxuXHRcdFx0XHRpbWFnZTtcblxuXHRcdFx0aWYoIXpvb21TdC5lbmFibGVkIHx8ICFtZnAuc3VwcG9ydHNUcmFuc2l0aW9uKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGR1cmF0aW9uID0gem9vbVN0LmR1cmF0aW9uLFxuXHRcdFx0XHRnZXRFbFRvQW5pbWF0ZSA9IGZ1bmN0aW9uKGltYWdlKSB7XG5cdFx0XHRcdFx0dmFyIG5ld0ltZyA9IGltYWdlLmNsb25lKCkucmVtb3ZlQXR0cignc3R5bGUnKS5yZW1vdmVBdHRyKCdjbGFzcycpLmFkZENsYXNzKCdtZnAtYW5pbWF0ZWQtaW1hZ2UnKSxcblx0XHRcdFx0XHRcdHRyYW5zaXRpb24gPSAnYWxsICcrKHpvb21TdC5kdXJhdGlvbi8xMDAwKSsncyAnICsgem9vbVN0LmVhc2luZyxcblx0XHRcdFx0XHRcdGNzc09iaiA9IHtcblx0XHRcdFx0XHRcdFx0cG9zaXRpb246ICdmaXhlZCcsXG5cdFx0XHRcdFx0XHRcdHpJbmRleDogOTk5OSxcblx0XHRcdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0XHQnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5JzogJ2hpZGRlbidcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR0ID0gJ3RyYW5zaXRpb24nO1xuXG5cdFx0XHRcdFx0Y3NzT2JqWyctd2Via2l0LScrdF0gPSBjc3NPYmpbJy1tb3otJyt0XSA9IGNzc09ialsnLW8tJyt0XSA9IGNzc09ialt0XSA9IHRyYW5zaXRpb247XG5cblx0XHRcdFx0XHRuZXdJbWcuY3NzKGNzc09iaik7XG5cdFx0XHRcdFx0cmV0dXJuIG5ld0ltZztcblx0XHRcdFx0fSxcblx0XHRcdFx0c2hvd01haW5Db250ZW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0b3BlblRpbWVvdXQsXG5cdFx0XHRcdGFuaW1hdGVkSW1nO1xuXG5cdFx0XHRfbWZwT24oJ0J1aWxkQ29udHJvbHMnK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KG9wZW5UaW1lb3V0KTtcblx0XHRcdFx0XHRtZnAuY29udGVudC5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG5cblx0XHRcdFx0XHQvLyBCYXNpY2FsbHksIGFsbCBjb2RlIGJlbG93IGRvZXMgaXMgY2xvbmVzIGV4aXN0aW5nIGltYWdlLCBwdXRzIGluIG9uIHRvcCBvZiB0aGUgY3VycmVudCBvbmUgYW5kIGFuaW1hdGVkIGl0XG5cblx0XHRcdFx0XHRpbWFnZSA9IG1mcC5fZ2V0SXRlbVRvWm9vbSgpO1xuXG5cdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZyA9IGdldEVsVG9BbmltYXRlKGltYWdlKTtcblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXG5cdFx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKGFuaW1hdGVkSW1nKTtcblxuXHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoIHRydWUgKSApO1xuXHRcdFx0XHRcdFx0b3BlblRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRcdFx0aW1hZ2UgPSBhbmltYXRlZEltZyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ1pvb21BbmltYXRpb25FbmRlZCcpO1xuXHRcdFx0XHRcdFx0XHR9LCAxNik7IC8vIGF2b2lkIGJsaW5rIHdoZW4gc3dpdGNoaW5nIGltYWdlc1xuXG5cdFx0XHRcdFx0XHR9LCBkdXJhdGlvbik7IC8vIHRoaXMgdGltZW91dCBlcXVhbHMgYW5pbWF0aW9uIGR1cmF0aW9uXG5cblx0XHRcdFx0XHR9LCAxNik7IC8vIGJ5IGFkZGluZyB0aGlzIHRpbWVvdXQgd2UgYXZvaWQgc2hvcnQgZ2xpdGNoIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uXG5cblxuXHRcdFx0XHRcdC8vIExvdHMgb2YgdGltZW91dHMuLi5cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRfbWZwT24oQkVGT1JFX0NMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KG9wZW5UaW1lb3V0KTtcblxuXHRcdFx0XHRcdG1mcC5zdC5yZW1vdmFsRGVsYXkgPSBkdXJhdGlvbjtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblx0XHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZyA9IGdldEVsVG9BbmltYXRlKGltYWdlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KHRydWUpICk7XG5cdFx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKGFuaW1hdGVkSW1nKTtcblx0XHRcdFx0XHRtZnAuY29udGVudC5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCgpICk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0aWYoYW5pbWF0ZWRJbWcpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpbWFnZSA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRfYWxsb3dab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0udHlwZSA9PT0gJ2ltYWdlJztcblx0XHR9LFxuXG5cdFx0X2dldEl0ZW1Ub1pvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYobWZwLmN1cnJJdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0cmV0dXJuIG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEdldCBlbGVtZW50IHBvc3Rpb24gcmVsYXRpdmUgdG8gdmlld3BvcnRcblx0XHRfZ2V0T2Zmc2V0OiBmdW5jdGlvbihpc0xhcmdlKSB7XG5cdFx0XHR2YXIgZWw7XG5cdFx0XHRpZihpc0xhcmdlKSB7XG5cdFx0XHRcdGVsID0gbWZwLmN1cnJJdGVtLmltZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsID0gbWZwLnN0Lnpvb20ub3BlbmVyKG1mcC5jdXJySXRlbS5lbCB8fCBtZnAuY3Vyckl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgb2Zmc2V0ID0gZWwub2Zmc2V0KCk7XG5cdFx0XHR2YXIgcGFkZGluZ1RvcCA9IHBhcnNlSW50KGVsLmNzcygncGFkZGluZy10b3AnKSwxMCk7XG5cdFx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlSW50KGVsLmNzcygncGFkZGluZy1ib3R0b20nKSwxMCk7XG5cdFx0XHRvZmZzZXQudG9wIC09ICggJCh3aW5kb3cpLnNjcm9sbFRvcCgpIC0gcGFkZGluZ1RvcCApO1xuXG5cblx0XHRcdC8qXG5cblx0XHRcdEFuaW1hdGluZyBsZWZ0ICsgdG9wICsgd2lkdGgvaGVpZ2h0IGxvb2tzIGdsaXRjaHkgaW4gRmlyZWZveCwgYnV0IHBlcmZlY3QgaW4gQ2hyb21lLiBBbmQgdmljZS12ZXJzYS5cblxuXHRcdFx0ICovXG5cdFx0XHR2YXIgb2JqID0ge1xuXHRcdFx0XHR3aWR0aDogZWwud2lkdGgoKSxcblx0XHRcdFx0Ly8gZml4IFplcHRvIGhlaWdodCtwYWRkaW5nIGlzc3VlXG5cdFx0XHRcdGhlaWdodDogKF9pc0pRID8gZWwuaW5uZXJIZWlnaHQoKSA6IGVsWzBdLm9mZnNldEhlaWdodCkgLSBwYWRkaW5nQm90dG9tIC0gcGFkZGluZ1RvcFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gSSBoYXRlIHRvIGRvIHRoaXMsIGJ1dCB0aGVyZSBpcyBubyBhbm90aGVyIG9wdGlvblxuXHRcdFx0aWYoIGdldEhhc01velRyYW5zZm9ybSgpICkge1xuXHRcdFx0XHRvYmpbJy1tb3otdHJhbnNmb3JtJ10gPSBvYmpbJ3RyYW5zZm9ybSddID0gJ3RyYW5zbGF0ZSgnICsgb2Zmc2V0LmxlZnQgKyAncHgsJyArIG9mZnNldC50b3AgKyAncHgpJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9iai5sZWZ0ID0gb2Zmc2V0LmxlZnQ7XG5cdFx0XHRcdG9iai50b3AgPSBvZmZzZXQudG9wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR9XG5cblx0fVxufSk7XG5cblxuXG4vKj4+em9vbSovXG5cbi8qPj5pZnJhbWUqL1xuXG52YXIgSUZSQU1FX05TID0gJ2lmcmFtZScsXG5cdF9lbXB0eVBhZ2UgPSAnLy9hYm91dDpibGFuaycsXG5cblx0X2ZpeElmcmFtZUJ1Z3MgPSBmdW5jdGlvbihpc1Nob3dpbmcpIHtcblx0XHRpZihtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10pIHtcblx0XHRcdHZhciBlbCA9IG1mcC5jdXJyVGVtcGxhdGVbSUZSQU1FX05TXS5maW5kKCdpZnJhbWUnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHQvLyByZXNldCBzcmMgYWZ0ZXIgdGhlIHBvcHVwIGlzIGNsb3NlZCB0byBhdm9pZCBcInZpZGVvIGtlZXBzIHBsYXlpbmcgYWZ0ZXIgcG9wdXAgaXMgY2xvc2VkXCIgYnVnXG5cdFx0XHRcdGlmKCFpc1Nob3dpbmcpIHtcblx0XHRcdFx0XHRlbFswXS5zcmMgPSBfZW1wdHlQYWdlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSUU4IGJsYWNrIHNjcmVlbiBidWcgZml4XG5cdFx0XHRcdGlmKG1mcC5pc0lFOCkge1xuXHRcdFx0XHRcdGVsLmNzcygnZGlzcGxheScsIGlzU2hvd2luZyA/ICdibG9jaycgOiAnbm9uZScpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSUZSQU1FX05TLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtaWZyYW1lLXNjYWxlclwiPicrXG5cdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtY2xvc2VcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdCc8aWZyYW1lIGNsYXNzPVwibWZwLWlmcmFtZVwiIHNyYz1cIi8vYWJvdXQ6YmxhbmtcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cblx0XHRzcmNBY3Rpb246ICdpZnJhbWVfc3JjJyxcblxuXHRcdC8vIHdlIGRvbid0IGNhcmUgYW5kIHN1cHBvcnQgb25seSBvbmUgZGVmYXVsdCB0eXBlIG9mIFVSTCBieSBkZWZhdWx0XG5cdFx0cGF0dGVybnM6IHtcblx0XHRcdHlvdXR1YmU6IHtcblx0XHRcdFx0aW5kZXg6ICd5b3V0dWJlLmNvbScsXG5cdFx0XHRcdGlkOiAndj0nLFxuXHRcdFx0XHRzcmM6ICcvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0dmltZW86IHtcblx0XHRcdFx0aW5kZXg6ICd2aW1lby5jb20vJyxcblx0XHRcdFx0aWQ6ICcvJyxcblx0XHRcdFx0c3JjOiAnLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyVpZCU/YXV0b3BsYXk9MSdcblx0XHRcdH0sXG5cdFx0XHRnbWFwczoge1xuXHRcdFx0XHRpbmRleDogJy8vbWFwcy5nb29nbGUuJyxcblx0XHRcdFx0c3JjOiAnJWlkJSZvdXRwdXQ9ZW1iZWQnXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdElmcmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChJRlJBTUVfTlMpO1xuXG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uKGUsIHByZXZUeXBlLCBuZXdUeXBlKSB7XG5cdFx0XHRcdGlmKHByZXZUeXBlICE9PSBuZXdUeXBlKSB7XG5cdFx0XHRcdFx0aWYocHJldlR5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTsgLy8gaWZyYW1lIGlmIHJlbW92ZWRcblx0XHRcdFx0XHR9IGVsc2UgaWYobmV3VHlwZSA9PT0gSUZSQU1FX05TKSB7XG5cdFx0XHRcdFx0XHRfZml4SWZyYW1lQnVncyh0cnVlKTsgLy8gaWZyYW1lIGlzIHNob3dpbmdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0vLyBlbHNlIHtcblx0XHRcdFx0XHQvLyBpZnJhbWUgc291cmNlIGlzIHN3aXRjaGVkLCBkb24ndCBkbyBhbnl0aGluZ1xuXHRcdFx0XHQvL31cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQgKyAnLicgKyBJRlJBTUVfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZml4SWZyYW1lQnVncygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElmcmFtZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblx0XHRcdHZhciBlbWJlZFNyYyA9IGl0ZW0uc3JjO1xuXHRcdFx0dmFyIGlmcmFtZVN0ID0gbWZwLnN0LmlmcmFtZTtcblxuXHRcdFx0JC5lYWNoKGlmcmFtZVN0LnBhdHRlcm5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoZW1iZWRTcmMuaW5kZXhPZiggdGhpcy5pbmRleCApID4gLTEpIHtcblx0XHRcdFx0XHRpZih0aGlzLmlkKSB7XG5cdFx0XHRcdFx0XHRpZih0eXBlb2YgdGhpcy5pZCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSBlbWJlZFNyYy5zdWJzdHIoZW1iZWRTcmMubGFzdEluZGV4T2YodGhpcy5pZCkrdGhpcy5pZC5sZW5ndGgsIGVtYmVkU3JjLmxlbmd0aCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbWJlZFNyYyA9IHRoaXMuaWQuY2FsbCggdGhpcywgZW1iZWRTcmMgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLnNyYy5yZXBsYWNlKCclaWQlJywgZW1iZWRTcmMgKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIGRhdGFPYmogPSB7fTtcblx0XHRcdGlmKGlmcmFtZVN0LnNyY0FjdGlvbikge1xuXHRcdFx0XHRkYXRhT2JqW2lmcmFtZVN0LnNyY0FjdGlvbl0gPSBlbWJlZFNyYztcblx0XHRcdH1cblx0XHRcdG1mcC5fcGFyc2VNYXJrdXAodGVtcGxhdGUsIGRhdGFPYmosIGl0ZW0pO1xuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuXG5cbi8qPj5pZnJhbWUqL1xuXG4vKj4+Z2FsbGVyeSovXG4vKipcbiAqIEdldCBsb29wZWQgaW5kZXggZGVwZW5kaW5nIG9uIG51bWJlciBvZiBzbGlkZXNcbiAqL1xudmFyIF9nZXRMb29wZWRJZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG51bVNsaWRlcyA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0aWYoaW5kZXggPiBudW1TbGlkZXMgLSAxKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggLSBudW1TbGlkZXM7XG5cdFx0fSBlbHNlICBpZihpbmRleCA8IDApIHtcblx0XHRcdHJldHVybiBudW1TbGlkZXMgKyBpbmRleDtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9LFxuXHRfcmVwbGFjZUN1cnJUb3RhbCA9IGZ1bmN0aW9uKHRleHQsIGN1cnIsIHRvdGFsKSB7XG5cdFx0cmV0dXJuIHRleHQucmVwbGFjZSgvJWN1cnIlL2dpLCBjdXJyICsgMSkucmVwbGFjZSgvJXRvdGFsJS9naSwgdG90YWwpO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ2dhbGxlcnknLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGFycm93TWFya3VwOiAnPGJ1dHRvbiB0aXRsZT1cIiV0aXRsZSVcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtZnAtYXJyb3cgbWZwLWFycm93LSVkaXIlXCI+PC9idXR0b24+Jyxcblx0XHRwcmVsb2FkOiBbMCwyXSxcblx0XHRuYXZpZ2F0ZUJ5SW1nQ2xpY2s6IHRydWUsXG5cdFx0YXJyb3dzOiB0cnVlLFxuXG5cdFx0dFByZXY6ICdQcmV2aW91cyAoTGVmdCBhcnJvdyBrZXkpJyxcblx0XHR0TmV4dDogJ05leHQgKFJpZ2h0IGFycm93IGtleSknLFxuXHRcdHRDb3VudGVyOiAnJWN1cnIlIG9mICV0b3RhbCUnXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0R2FsbGVyeTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBnU3QgPSBtZnAuc3QuZ2FsbGVyeSxcblx0XHRcdFx0bnMgPSAnLm1mcC1nYWxsZXJ5JztcblxuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7IC8vIHRydWUgLSBuZXh0LCBmYWxzZSAtIHByZXZcblxuXHRcdFx0aWYoIWdTdCB8fCAhZ1N0LmVuYWJsZWQgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRcdF93cmFwQ2xhc3NlcyArPSAnIG1mcC1nYWxsZXJ5JztcblxuXHRcdFx0X21mcE9uKE9QRU5fRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdGlmKGdTdC5uYXZpZ2F0ZUJ5SW1nQ2xpY2spIHtcblx0XHRcdFx0XHRtZnAud3JhcC5vbignY2xpY2snK25zLCAnLm1mcC1pbWcnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmKG1mcC5pdGVtcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0XHRcdG1mcC5uZXh0KCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9kb2N1bWVudC5vbigna2V5ZG93bicrbnMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRpZiAoZS5rZXlDb2RlID09PSAzNykge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHtcblx0XHRcdFx0XHRcdG1mcC5uZXh0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1VwZGF0ZVN0YXR1cycrbnMsIGZ1bmN0aW9uKGUsIGRhdGEpIHtcblx0XHRcdFx0aWYoZGF0YS50ZXh0KSB7XG5cdFx0XHRcdFx0ZGF0YS50ZXh0ID0gX3JlcGxhY2VDdXJyVG90YWwoZGF0YS50ZXh0LCBtZnAuY3Vyckl0ZW0uaW5kZXgsIG1mcC5pdGVtcy5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCtucywgZnVuY3Rpb24oZSwgZWxlbWVudCwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0XHRcdHZhciBsID0gbWZwLml0ZW1zLmxlbmd0aDtcblx0XHRcdFx0dmFsdWVzLmNvdW50ZXIgPSBsID4gMSA/IF9yZXBsYWNlQ3VyclRvdGFsKGdTdC50Q291bnRlciwgaXRlbS5pbmRleCwgbCkgOiAnJztcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ0J1aWxkQ29udHJvbHMnICsgbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSAmJiBnU3QuYXJyb3dzICYmICFtZnAuYXJyb3dMZWZ0KSB7XG5cdFx0XHRcdFx0dmFyIG1hcmt1cCA9IGdTdC5hcnJvd01hcmt1cCxcblx0XHRcdFx0XHRcdGFycm93TGVmdCA9IG1mcC5hcnJvd0xlZnQgPSAkKCBtYXJrdXAucmVwbGFjZSgvJXRpdGxlJS9naSwgZ1N0LnRQcmV2KS5yZXBsYWNlKC8lZGlyJS9naSwgJ2xlZnQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpLFxuXHRcdFx0XHRcdFx0YXJyb3dSaWdodCA9IG1mcC5hcnJvd1JpZ2h0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50TmV4dCkucmVwbGFjZSgvJWRpciUvZ2ksICdyaWdodCcpICkuYWRkQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUyk7XG5cblx0XHRcdFx0XHRhcnJvd0xlZnQuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAucHJldigpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGFycm93UmlnaHQuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0bWZwLmNvbnRhaW5lci5hcHBlbmQoYXJyb3dMZWZ0LmFkZChhcnJvd1JpZ2h0KSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oQ0hBTkdFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9wcmVsb2FkVGltZW91dCkgY2xlYXJUaW1lb3V0KG1mcC5fcHJlbG9hZFRpbWVvdXQpO1xuXG5cdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5wcmVsb2FkTmVhcmJ5SW1hZ2VzKCk7XG5cdFx0XHRcdFx0bWZwLl9wcmVsb2FkVGltZW91dCA9IG51bGw7XG5cdFx0XHRcdH0sIDE2KTtcblx0XHRcdH0pO1xuXG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9kb2N1bWVudC5vZmYobnMpO1xuXHRcdFx0XHRtZnAud3JhcC5vZmYoJ2NsaWNrJytucyk7XG5cdFx0XHRcdG1mcC5hcnJvd1JpZ2h0ID0gbWZwLmFycm93TGVmdCA9IG51bGw7XG5cdFx0XHR9KTtcblxuXHRcdH0sXG5cdFx0bmV4dDogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAuZGlyZWN0aW9uID0gdHJ1ZTtcblx0XHRcdG1mcC5pbmRleCA9IF9nZXRMb29wZWRJZChtZnAuaW5kZXggKyAxKTtcblx0XHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXHRcdH0sXG5cdFx0cHJldjogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAuZGlyZWN0aW9uID0gZmFsc2U7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4IC0gMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdGdvVG86IGZ1bmN0aW9uKG5ld0luZGV4KSB7XG5cdFx0XHRtZnAuZGlyZWN0aW9uID0gKG5ld0luZGV4ID49IG1mcC5pbmRleCk7XG5cdFx0XHRtZnAuaW5kZXggPSBuZXdJbmRleDtcblx0XHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXHRcdH0sXG5cdFx0cHJlbG9hZE5lYXJieUltYWdlczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcCA9IG1mcC5zdC5nYWxsZXJ5LnByZWxvYWQsXG5cdFx0XHRcdHByZWxvYWRCZWZvcmUgPSBNYXRoLm1pbihwWzBdLCBtZnAuaXRlbXMubGVuZ3RoKSxcblx0XHRcdFx0cHJlbG9hZEFmdGVyID0gTWF0aC5taW4ocFsxXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdGk7XG5cblx0XHRcdGZvcihpID0gMTsgaSA8PSAobWZwLmRpcmVjdGlvbiA/IHByZWxvYWRBZnRlciA6IHByZWxvYWRCZWZvcmUpOyBpKyspIHtcblx0XHRcdFx0bWZwLl9wcmVsb2FkSXRlbShtZnAuaW5kZXgraSk7XG5cdFx0XHR9XG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQmVmb3JlIDogcHJlbG9hZEFmdGVyKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4LWkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3ByZWxvYWRJdGVtOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0aW5kZXggPSBfZ2V0TG9vcGVkSWQoaW5kZXgpO1xuXG5cdFx0XHRpZihtZnAuaXRlbXNbaW5kZXhdLnByZWxvYWRlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBpdGVtID0gbWZwLml0ZW1zW2luZGV4XTtcblx0XHRcdGlmKCFpdGVtLnBhcnNlZCkge1xuXHRcdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIGluZGV4ICk7XG5cdFx0XHR9XG5cblx0XHRcdF9tZnBUcmlnZ2VyKCdMYXp5TG9hZCcsIGl0ZW0pO1xuXG5cdFx0XHRpZihpdGVtLnR5cGUgPT09ICdpbWFnZScpIHtcblx0XHRcdFx0aXRlbS5pbWcgPSAkKCc8aW1nIGNsYXNzPVwibWZwLWltZ1wiIC8+Jykub24oJ2xvYWQubWZwbG9hZGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0fSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdMYXp5TG9hZEVycm9yJywgaXRlbSk7XG5cdFx0XHRcdH0pLmF0dHIoJ3NyYycsIGl0ZW0uc3JjKTtcblx0XHRcdH1cblxuXG5cdFx0XHRpdGVtLnByZWxvYWRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmdhbGxlcnkqL1xuXG4vKj4+cmV0aW5hKi9cblxudmFyIFJFVElOQV9OUyA9ICdyZXRpbmEnO1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoUkVUSU5BX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRyZXBsYWNlU3JjOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRyZXR1cm4gaXRlbS5zcmMucmVwbGFjZSgvXFwuXFx3KyQvLCBmdW5jdGlvbihtKSB7IHJldHVybiAnQDJ4JyArIG07IH0pO1xuXHRcdH0sXG5cdFx0cmF0aW86IDEgLy8gRnVuY3Rpb24gb3IgbnVtYmVyLiAgU2V0IHRvIDEgdG8gZGlzYWJsZS5cblx0fSxcblx0cHJvdG86IHtcblx0XHRpbml0UmV0aW5hOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSkge1xuXG5cdFx0XHRcdHZhciBzdCA9IG1mcC5zdC5yZXRpbmEsXG5cdFx0XHRcdFx0cmF0aW8gPSBzdC5yYXRpbztcblxuXHRcdFx0XHRyYXRpbyA9ICFpc05hTihyYXRpbykgPyByYXRpbyA6IHJhdGlvKCk7XG5cblx0XHRcdFx0aWYocmF0aW8gPiAxKSB7XG5cdFx0XHRcdFx0X21mcE9uKCdJbWFnZUhhc1NpemUnICsgJy4nICsgUkVUSU5BX05TLCBmdW5jdGlvbihlLCBpdGVtKSB7XG5cdFx0XHRcdFx0XHRpdGVtLmltZy5jc3Moe1xuXHRcdFx0XHRcdFx0XHQnbWF4LXdpZHRoJzogaXRlbS5pbWdbMF0ubmF0dXJhbFdpZHRoIC8gcmF0aW8sXG5cdFx0XHRcdFx0XHRcdCd3aWR0aCc6ICcxMDAlJ1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0X21mcE9uKCdFbGVtZW50UGFyc2UnICsgJy4nICsgUkVUSU5BX05TLCBmdW5jdGlvbihlLCBpdGVtKSB7XG5cdFx0XHRcdFx0XHRpdGVtLnNyYyA9IHN0LnJlcGxhY2VTcmMoaXRlbSwgcmF0aW8pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+cmV0aW5hKi9cbiBfY2hlY2tJbnN0YW5jZSgpOyB9KSk7Il19
